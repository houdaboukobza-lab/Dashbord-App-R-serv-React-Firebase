{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { withInRange, sum } from '../../common/utils/helper';\nimport { getSaturationColor, getPoint } from '../../common/utils/helper';\nimport { Size, PathOption } from '@syncfusion/ej2-svg-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ColumnBase } from './column-base';\nimport { getMedian } from '../../common/utils/helper';\n/**\n * `BoxAndWhiskerSeries` module is used to render the box and whisker series.\n */\n\nvar BoxAndWhiskerSeries =\n/** @class */\nfunction (_super) {\n  __extends(BoxAndWhiskerSeries, _super);\n\n  function BoxAndWhiskerSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render BoxAndWhisker series.\n   * @return {void}\n   * @private\n   */\n\n\n  BoxAndWhiskerSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n    var sideBySideInfo = this.getSideBySideInfo(series);\n    var argsData;\n\n    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n      point.symbolLocations = [];\n      point.regions = [];\n      var centerRegion = void 0;\n\n      if (point.visible && withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {\n        this.findBoxPlotValues(point.y, point, series.boxPlotMode); //region to cover the top and bottom ticks\n\n        this.updateTipRegion(series, point, sideBySideInfo); //get middle rect\n\n        centerRegion = this.getRectangle(point.xValue + sideBySideInfo.start, point.upperQuartile, point.xValue + sideBySideInfo.end, point.lowerQuartile, series);\n        point.regions.push(centerRegion);\n        argsData = this.triggerEvent(series, point, series.interior, {\n          color: !isNullOrUndefined(series.border.color) && series.border.color !== 'transparent' ? series.border.color : getSaturationColor(series.interior, -0.6),\n          width: series.border.width ? series.border.width : 1\n        });\n\n        if (!argsData.cancel) {\n          this.renderBoxAndWhisker(series, point, centerRegion, argsData, this.getPathString(point, series, getPoint(point.xValue, point.median, xAxis, yAxis, isInverted), getPoint(point.xValue + sideBySideInfo.median, point.average, xAxis, yAxis, isInverted)), sideBySideInfo.median);\n        }\n      }\n    }\n\n    if (series.marker.visible) {\n      series.chart.markerRender.render(series);\n    }\n  };\n  /**\n   * update the tip region fo box plot\n   * @param series\n   * @param point\n   * @param sideBySideInfo\n   */\n\n\n  BoxAndWhiskerSeries.prototype.updateTipRegion = function (series, point, sideBySideInfo) {\n    var tipRegion = this.getRectangle(point.xValue + sideBySideInfo.median, point.maximum, point.xValue + sideBySideInfo.median, point.minimum, series);\n    this.updateTipSize(series, point, tipRegion, series.chart.requireInvertedAxis);\n  };\n  /**\n   * Update tip size to tip regions\n   * @param series\n   * @param point\n   * @param region\n   * @param isInverted\n   */\n\n\n  BoxAndWhiskerSeries.prototype.updateTipSize = function (series, point, region, isInverted) {\n    var borderWidth = series.border.width || 1;\n\n    if (!isInverted) {\n      region.x -= borderWidth / 2;\n      region.width = region.width || borderWidth;\n    } else {\n      region.y -= borderWidth / 2;\n      region.height = region.height || borderWidth;\n    }\n\n    point.regions.push(region);\n  };\n  /**\n   * Calculation for path direction performed here\n   * @param point\n   * @param series\n   * @param median\n   * @param average\n   */\n\n\n  BoxAndWhiskerSeries.prototype.getPathString = function (point, series, median, average) {\n    var topRect = point.regions[0];\n    var midRect = point.regions[1];\n    var direction = '';\n    var width = series.chart.requireInvertedAxis ? topRect.height : topRect.width;\n    var center = series.chart.requireInvertedAxis ? topRect.y + topRect.height / 2 : topRect.x + topRect.width / 2;\n    var midWidth = midRect.x + midRect.width;\n    var midHeight = midRect.y + midRect.height;\n    var topWidth = topRect.x + topRect.width;\n    var topHeight = topRect.y + topRect.height;\n\n    if (!series.chart.requireInvertedAxis) {\n      this.updateTipSize(series, point, {\n        x: midRect.x,\n        y: topRect.y,\n        width: midWidth - midRect.x,\n        height: 0\n      }, true);\n      this.updateTipSize(series, point, {\n        x: midRect.x,\n        y: topHeight,\n        width: midWidth - midRect.x,\n        height: 0\n      }, true);\n      direction += 'M ' + midRect.x + ' ' + topRect.y + ' ' + ' L ' + midWidth + ' ' + topRect.y;\n      direction += ' M ' + center + ' ' + topRect.y + ' ' + ' L ' + center + ' ' + midRect.y;\n      direction += ' M ' + midRect.x + ' ' + midRect.y + ' ' + ' L ' + midWidth + ' ' + midRect.y + ' L ' + midWidth + ' ' + midHeight + ' L ' + midRect.x + ' ' + midHeight + ' Z';\n      direction += ' M ' + center + ' ' + midHeight + ' L ' + center + ' ' + topHeight;\n      direction += ' M ' + midRect.x + ' ' + topHeight + ' L ' + midWidth + ' ' + topHeight;\n      direction += ' M ' + midRect.x + ' ' + median.y + ' L ' + midWidth + ' ' + median.y;\n      direction += series.showMean ? ' M ' + (average.x - 5) + ' ' + (average.y - 5) + ' L ' + (average.x + 5) + ' ' + (average.y + 5) + ' M ' + (average.x + 5) + ' ' + (average.y - 5) + ' L ' + (average.x - 5) + ' ' + (average.y + 5) : '';\n    } else {\n      this.updateTipSize(series, point, {\n        x: topRect.x,\n        y: midRect.y,\n        width: 0,\n        height: midHeight - midRect.y\n      }, false);\n      this.updateTipSize(series, point, {\n        x: topWidth,\n        y: midRect.y,\n        width: 0,\n        height: midHeight - midRect.y\n      }, true);\n      direction += 'M ' + topRect.x + ' ' + midRect.y + ' L ' + topRect.x + ' ' + midHeight;\n      direction += 'M ' + topRect.x + ' ' + center + ' ' + ' L ' + midRect.x + ' ' + center;\n      direction += ' M ' + midRect.x + ' ' + midRect.y + ' ' + ' L ' + midWidth + ' ' + midRect.y + ' L ' + midWidth + ' ' + midHeight + ' L ' + midRect.x + ' ' + midHeight + ' Z';\n      direction += ' M ' + midWidth + ' ' + center + ' L ' + topWidth + ' ' + center;\n      direction += ' M ' + topWidth + ' ' + midRect.y + ' L ' + topWidth + ' ' + midHeight;\n      direction += ' M ' + median.x + ' ' + midRect.y + ' ' + ' L ' + median.x + ' ' + midHeight;\n      direction += series.showMean ? 'M ' + (average.x + 5) + ' ' + (average.y - 5) + ' L ' + (average.x - 5) + ' ' + (average.y + 5) + 'M ' + (average.x - 5) + ' ' + (average.y - 5) + ' L ' + (average.x + 5) + ' ' + (average.y + 5) : '';\n    }\n\n    return direction;\n  };\n  /**\n   * Rendering for box and whisker append here.\n   * @param series\n   * @param point\n   * @param rect\n   * @param argsData\n   * @param direction\n   */\n\n\n  BoxAndWhiskerSeries.prototype.renderBoxAndWhisker = function (series, point, rect, argsData, direction, median) {\n    var location;\n    var size;\n    var symbolId = series.chart.element.id + '_Series_' + series.index + '_Point_' + point.index;\n    var element = series.chart.renderer.drawPath(new PathOption(symbolId + '_BoxPath', argsData.fill, argsData.border.width, argsData.border.color, series.opacity, series.dashArray, direction));\n    element.setAttribute('aria-label', point.x.toString() + ':' + point.maximum.toString() + ':' + point.minimum.toString() + ':' + point.lowerQuartile.toString() + ':' + point.upperQuartile.toString());\n    var parentElement = series.chart.renderer.createGroup({\n      'id': symbolId\n    });\n    parentElement.appendChild(element);\n\n    for (var i = 0; i < point.outliers.length; i++) {\n      location = getPoint(point.xValue + median, point.outliers[i], series.xAxis, series.yAxis, series.chart.requireInvertedAxis);\n      size = new Size(series.marker.width, series.marker.height);\n      point.symbolLocations.push(location);\n      this.updateTipSize(series, point, {\n        x: location.x - size.width / 2,\n        y: location.y - size.height / 2,\n        width: size.width,\n        height: size.height\n      }, true);\n    }\n\n    series.seriesElement.appendChild(parentElement);\n  };\n  /**\n   * To find the box plot values\n   * @param yValues\n   * @param point\n   * @param mode\n   */\n\n\n  BoxAndWhiskerSeries.prototype.findBoxPlotValues = function (yValues, point, mode) {\n    var yCount = yValues.length;\n    var quartile = {\n      average: sum(yValues) / yCount,\n      lowerQuartile: 0,\n      upperQuartile: 0,\n      maximum: 0,\n      minimum: 0,\n      median: 0,\n      outliers: []\n    };\n\n    if (mode === 'Exclusive') {\n      quartile.lowerQuartile = this.getExclusiveQuartileValue(yValues, yCount, 0.25);\n      quartile.upperQuartile = this.getExclusiveQuartileValue(yValues, yCount, 0.75);\n      quartile.median = this.getExclusiveQuartileValue(yValues, yCount, 0.5);\n    } else if (mode === 'Inclusive') {\n      quartile.lowerQuartile = this.getInclusiveQuartileValue(yValues, yCount, 0.25);\n      quartile.upperQuartile = this.getInclusiveQuartileValue(yValues, yCount, 0.75);\n      quartile.median = this.getInclusiveQuartileValue(yValues, yCount, 0.5);\n    } else {\n      quartile.median = getMedian(yValues);\n      this.getQuartileValues(yValues, yCount, quartile);\n    }\n\n    this.getMinMaxOutlier(yValues, yCount, quartile);\n    point.minimum = quartile.minimum;\n    point.maximum = quartile.maximum;\n    point.lowerQuartile = quartile.lowerQuartile;\n    point.upperQuartile = quartile.upperQuartile;\n    point.median = quartile.median;\n    point.outliers = quartile.outliers;\n    point.average = quartile.average;\n  };\n  /**\n   * to find the exclusive quartile values\n   * @param yValues\n   * @param count\n   * @param percentile\n   */\n\n\n  BoxAndWhiskerSeries.prototype.getExclusiveQuartileValue = function (yValues, count, percentile) {\n    if (count === 0) {\n      return 0;\n    } else if (count === 1) {\n      return yValues[0];\n    }\n\n    var value = 0;\n    var rank = percentile * (count + 1);\n    var integerRank = Math.floor(Math.abs(rank));\n    var fractionRank = rank - integerRank;\n\n    if (integerRank === 0) {\n      value = yValues[0];\n    } else if (integerRank > count - 1) {\n      value = yValues[count - 1];\n    } else {\n      value = fractionRank * (yValues[integerRank] - yValues[integerRank - 1]) + yValues[integerRank - 1];\n    }\n\n    return value;\n  };\n  /**\n   * to find the inclusive quartile values\n   * @param yValues\n   * @param count\n   * @param percentile\n   */\n\n\n  BoxAndWhiskerSeries.prototype.getInclusiveQuartileValue = function (yValues, count, percentile) {\n    if (count === 0) {\n      return 0;\n    } else if (count === 1) {\n      return yValues[0];\n    }\n\n    var value = 0;\n    var rank = percentile * (count - 1);\n    var integerRank = Math.floor(Math.abs(rank));\n    var fractionRank = rank - integerRank;\n    value = fractionRank * (yValues[integerRank + 1] - yValues[integerRank]) + yValues[integerRank];\n    return value;\n  };\n  /**\n   * To find the quartile values\n   * @param yValues\n   * @param count\n   * @param lowerQuartile\n   * @param upperQuartile\n   */\n\n\n  BoxAndWhiskerSeries.prototype.getQuartileValues = function (yValues, count, quartile) {\n    if (count === 1) {\n      quartile.lowerQuartile = yValues[0];\n      quartile.upperQuartile = yValues[0];\n      return null;\n    }\n\n    var isEvenList = count % 2 === 0;\n    var halfLength = count / 2;\n    var lowerQuartileArray = yValues.slice(0, halfLength);\n    var upperQuartileArray = yValues.slice(isEvenList ? halfLength : halfLength + 1, count);\n    quartile.lowerQuartile = getMedian(lowerQuartileArray);\n    quartile.upperQuartile = getMedian(upperQuartileArray);\n  };\n  /**\n   * To find the min, max and outlier values\n   * @param yValues\n   * @param lowerQuartile\n   * @param upperQuartile\n   * @param minimum\n   * @param maximum\n   * @param outliers\n   */\n\n\n  BoxAndWhiskerSeries.prototype.getMinMaxOutlier = function (yValues, count, quartile) {\n    var interquartile = quartile.upperQuartile - quartile.lowerQuartile;\n    var rangeIQR = 1.5 * interquartile;\n\n    for (var i = 0; i < count; i++) {\n      if (yValues[i] < quartile.lowerQuartile - rangeIQR) {\n        quartile.outliers.push(yValues[i]);\n      } else {\n        quartile.minimum = yValues[i];\n        break;\n      }\n    }\n\n    for (var i = count - 1; i >= 0; i--) {\n      if (yValues[i] > quartile.upperQuartile + rangeIQR) {\n        quartile.outliers.push(yValues[i]);\n      } else {\n        quartile.maximum = yValues[i];\n        break;\n      }\n    }\n  };\n  /**\n   * Animates the series.\n   * @param  {Series} series - Defines the series to animate.\n   * @return {void}\n   */\n\n\n  BoxAndWhiskerSeries.prototype.doAnimation = function (series) {\n    this.animate(series);\n  };\n  /**\n   * Get module name.\n   */\n\n\n  BoxAndWhiskerSeries.prototype.getModuleName = function () {\n    return 'BoxAndWhiskerSeries';\n    /**\n     * return the module name\n     */\n  };\n  /**\n   * To destroy the candle series.\n   * @return {void}\n   * @private\n   */\n\n\n  BoxAndWhiskerSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroys the candle series.\n     */\n  };\n\n  return BoxAndWhiskerSeries;\n}(ColumnBase);\n\nexport { BoxAndWhiskerSeries };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-charts/src/chart/series/box-and-whisker-series.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","withInRange","sum","getSaturationColor","getPoint","Size","PathOption","isNullOrUndefined","ColumnBase","getMedian","BoxAndWhiskerSeries","_super","apply","arguments","render","series","xAxis","yAxis","isInverted","sideBySideInfo","getSideBySideInfo","argsData","_i","_a","points","length","point","symbolLocations","regions","centerRegion","visible","index","findBoxPlotValues","y","boxPlotMode","updateTipRegion","getRectangle","xValue","start","upperQuartile","end","lowerQuartile","push","triggerEvent","interior","color","border","width","cancel","renderBoxAndWhisker","getPathString","median","average","marker","chart","markerRender","tipRegion","maximum","minimum","updateTipSize","requireInvertedAxis","region","borderWidth","x","height","topRect","midRect","direction","center","midWidth","midHeight","topWidth","topHeight","showMean","rect","location","size","symbolId","element","id","renderer","drawPath","fill","opacity","dashArray","setAttribute","toString","parentElement","createGroup","appendChild","i","outliers","seriesElement","yValues","mode","yCount","quartile","getExclusiveQuartileValue","getInclusiveQuartileValue","getQuartileValues","getMinMaxOutlier","count","percentile","value","rank","integerRank","Math","floor","abs","fractionRank","isEvenList","halfLength","lowerQuartileArray","slice","upperQuartileArray","interquartile","rangeIQR","doAnimation","animate","getModuleName","destroy"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,SAASI,WAAT,EAAsBC,GAAtB,QAAiC,2BAAjC;AACA,SAASC,kBAAT,EAA6BC,QAA7B,QAA6C,2BAA7C;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,0BAAjC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACvDxB,EAAAA,SAAS,CAACuB,mBAAD,EAAsBC,MAAtB,CAAT;;AACA,WAASD,mBAAT,GAA+B;AAC3B,WAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIH,EAAAA,mBAAmB,CAACX,SAApB,CAA8Be,MAA9B,GAAuC,UAAUC,MAAV,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,UAAhC,EAA4C;AAC/E,QAAIC,cAAc,GAAG,KAAKC,iBAAL,CAAuBL,MAAvB,CAArB;AACA,QAAIM,QAAJ;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGR,MAAM,CAACS,MAA7B,EAAqCF,EAAE,GAAGC,EAAE,CAACE,MAA7C,EAAqDH,EAAE,EAAvD,EAA2D;AACvD,UAAII,KAAK,GAAGH,EAAE,CAACD,EAAD,CAAd;AACAI,MAAAA,KAAK,CAACC,eAAN,GAAwB,EAAxB;AACAD,MAAAA,KAAK,CAACE,OAAN,GAAgB,EAAhB;AACA,UAAIC,YAAY,GAAG,KAAK,CAAxB;;AACA,UAAIH,KAAK,CAACI,OAAN,IAAiB7B,WAAW,CAACc,MAAM,CAACS,MAAP,CAAcE,KAAK,CAACK,KAAN,GAAc,CAA5B,CAAD,EAAiCL,KAAjC,EAAwCX,MAAM,CAACS,MAAP,CAAcE,KAAK,CAACK,KAAN,GAAc,CAA5B,CAAxC,EAAwEhB,MAAxE,CAAhC,EAAiH;AAC7G,aAAKiB,iBAAL,CAAuBN,KAAK,CAACO,CAA7B,EAAgCP,KAAhC,EAAuCX,MAAM,CAACmB,WAA9C,EAD6G,CAE7G;;AACA,aAAKC,eAAL,CAAqBpB,MAArB,EAA6BW,KAA7B,EAAoCP,cAApC,EAH6G,CAI7G;;AACAU,QAAAA,YAAY,GAAG,KAAKO,YAAL,CAAmBV,KAAK,CAACW,MAAN,GAAelB,cAAc,CAACmB,KAAjD,EAAyDZ,KAAK,CAACa,aAA/D,EAA+Eb,KAAK,CAACW,MAAN,GAAelB,cAAc,CAACqB,GAA7G,EAAmHd,KAAK,CAACe,aAAzH,EAAwI1B,MAAxI,CAAf;AACAW,QAAAA,KAAK,CAACE,OAAN,CAAcc,IAAd,CAAmBb,YAAnB;AACAR,QAAAA,QAAQ,GAAG,KAAKsB,YAAL,CAAkB5B,MAAlB,EAA0BW,KAA1B,EAAiCX,MAAM,CAAC6B,QAAxC,EAAkD;AACzDC,UAAAA,KAAK,EAAG,CAACtC,iBAAiB,CAACQ,MAAM,CAAC+B,MAAP,CAAcD,KAAf,CAAlB,IAA2C9B,MAAM,CAAC+B,MAAP,CAAcD,KAAd,KAAwB,aAApE,GAAqF9B,MAAM,CAAC+B,MAAP,CAAcD,KAAnG,GACH1C,kBAAkB,CAACY,MAAM,CAAC6B,QAAR,EAAkB,CAAC,GAAnB,CAFmC;AAGzDG,UAAAA,KAAK,EAAEhC,MAAM,CAAC+B,MAAP,CAAcC,KAAd,GAAsBhC,MAAM,CAAC+B,MAAP,CAAcC,KAApC,GAA4C;AAHM,SAAlD,CAAX;;AAKA,YAAI,CAAC1B,QAAQ,CAAC2B,MAAd,EAAsB;AAClB,eAAKC,mBAAL,CAAyBlC,MAAzB,EAAiCW,KAAjC,EAAwCG,YAAxC,EAAsDR,QAAtD,EAAgE,KAAK6B,aAAL,CAAmBxB,KAAnB,EAA0BX,MAA1B,EAAkCX,QAAQ,CAACsB,KAAK,CAACW,MAAP,EAAeX,KAAK,CAACyB,MAArB,EAA6BnC,KAA7B,EAAoCC,KAApC,EAA2CC,UAA3C,CAA1C,EAAkGd,QAAQ,CAACsB,KAAK,CAACW,MAAN,GAAelB,cAAc,CAACgC,MAA/B,EAAuCzB,KAAK,CAAC0B,OAA7C,EAAsDpC,KAAtD,EAA6DC,KAA7D,EAAoEC,UAApE,CAA1G,CAAhE,EAA4PC,cAAc,CAACgC,MAA3Q;AACH;AACJ;AACJ;;AACD,QAAIpC,MAAM,CAACsC,MAAP,CAAcvB,OAAlB,EAA2B;AACvBf,MAAAA,MAAM,CAACuC,KAAP,CAAaC,YAAb,CAA0BzC,MAA1B,CAAiCC,MAAjC;AACH;AACJ,GA5BD;AA6BA;AACJ;AACA;AACA;AACA;AACA;;;AACIL,EAAAA,mBAAmB,CAACX,SAApB,CAA8BoC,eAA9B,GAAgD,UAAUpB,MAAV,EAAkBW,KAAlB,EAAyBP,cAAzB,EAAyC;AACrF,QAAIqC,SAAS,GAAG,KAAKpB,YAAL,CAAmBV,KAAK,CAACW,MAAN,GAAelB,cAAc,CAACgC,MAAjD,EAA0DzB,KAAK,CAAC+B,OAAhE,EAA0E/B,KAAK,CAACW,MAAN,GAAelB,cAAc,CAACgC,MAAxG,EAAiHzB,KAAK,CAACgC,OAAvH,EAAgI3C,MAAhI,CAAhB;AACA,SAAK4C,aAAL,CAAmB5C,MAAnB,EAA2BW,KAA3B,EAAkC8B,SAAlC,EAA6CzC,MAAM,CAACuC,KAAP,CAAaM,mBAA1D;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIlD,EAAAA,mBAAmB,CAACX,SAApB,CAA8B4D,aAA9B,GAA8C,UAAU5C,MAAV,EAAkBW,KAAlB,EAAyBmC,MAAzB,EAAiC3C,UAAjC,EAA6C;AACvF,QAAI4C,WAAW,GAAG/C,MAAM,CAAC+B,MAAP,CAAcC,KAAd,IAAuB,CAAzC;;AACA,QAAI,CAAC7B,UAAL,EAAiB;AACb2C,MAAAA,MAAM,CAACE,CAAP,IAAYD,WAAW,GAAG,CAA1B;AACAD,MAAAA,MAAM,CAACd,KAAP,GAAec,MAAM,CAACd,KAAP,IAAgBe,WAA/B;AACH,KAHD,MAIK;AACDD,MAAAA,MAAM,CAAC5B,CAAP,IAAY6B,WAAW,GAAG,CAA1B;AACAD,MAAAA,MAAM,CAACG,MAAP,GAAgBH,MAAM,CAACG,MAAP,IAAiBF,WAAjC;AACH;;AACDpC,IAAAA,KAAK,CAACE,OAAN,CAAcc,IAAd,CAAmBmB,MAAnB;AACH,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACInD,EAAAA,mBAAmB,CAACX,SAApB,CAA8BmD,aAA9B,GAA8C,UAAUxB,KAAV,EAAiBX,MAAjB,EAAyBoC,MAAzB,EAAiCC,OAAjC,EAA0C;AACpF,QAAIa,OAAO,GAAGvC,KAAK,CAACE,OAAN,CAAc,CAAd,CAAd;AACA,QAAIsC,OAAO,GAAGxC,KAAK,CAACE,OAAN,CAAc,CAAd,CAAd;AACA,QAAIuC,SAAS,GAAG,EAAhB;AACA,QAAIpB,KAAK,GAAGhC,MAAM,CAACuC,KAAP,CAAaM,mBAAb,GAAmCK,OAAO,CAACD,MAA3C,GAAoDC,OAAO,CAAClB,KAAxE;AACA,QAAIqB,MAAM,GAAGrD,MAAM,CAACuC,KAAP,CAAaM,mBAAb,GAAmCK,OAAO,CAAChC,CAAR,GAAYgC,OAAO,CAACD,MAAR,GAAiB,CAAhE,GACTC,OAAO,CAACF,CAAR,GAAYE,OAAO,CAAClB,KAAR,GAAgB,CADhC;AAEA,QAAIsB,QAAQ,GAAGH,OAAO,CAACH,CAAR,GAAYG,OAAO,CAACnB,KAAnC;AACA,QAAIuB,SAAS,GAAGJ,OAAO,CAACjC,CAAR,GAAYiC,OAAO,CAACF,MAApC;AACA,QAAIO,QAAQ,GAAGN,OAAO,CAACF,CAAR,GAAYE,OAAO,CAAClB,KAAnC;AACA,QAAIyB,SAAS,GAAGP,OAAO,CAAChC,CAAR,GAAYgC,OAAO,CAACD,MAApC;;AACA,QAAI,CAACjD,MAAM,CAACuC,KAAP,CAAaM,mBAAlB,EAAuC;AACnC,WAAKD,aAAL,CAAmB5C,MAAnB,EAA2BW,KAA3B,EAAkC;AAAEqC,QAAAA,CAAC,EAAEG,OAAO,CAACH,CAAb;AAAgB9B,QAAAA,CAAC,EAAEgC,OAAO,CAAChC,CAA3B;AAA8Bc,QAAAA,KAAK,EAAEsB,QAAQ,GAAGH,OAAO,CAACH,CAAxD;AAA2DC,QAAAA,MAAM,EAAE;AAAnE,OAAlC,EAA0G,IAA1G;AACA,WAAKL,aAAL,CAAmB5C,MAAnB,EAA2BW,KAA3B,EAAkC;AAAEqC,QAAAA,CAAC,EAAEG,OAAO,CAACH,CAAb;AAAgB9B,QAAAA,CAAC,EAAEuC,SAAnB;AAA8BzB,QAAAA,KAAK,EAAEsB,QAAQ,GAAGH,OAAO,CAACH,CAAxD;AAA2DC,QAAAA,MAAM,EAAE;AAAnE,OAAlC,EAA0G,IAA1G;AACAG,MAAAA,SAAS,IAAI,OAAOD,OAAO,CAACH,CAAf,GAAmB,GAAnB,GAAyBE,OAAO,CAAChC,CAAjC,GAAqC,GAArC,GAA2C,KAA3C,GAAmDoC,QAAnD,GAA8D,GAA9D,GAAoEJ,OAAO,CAAChC,CAAzF;AACAkC,MAAAA,SAAS,IAAI,QAAQC,MAAR,GAAiB,GAAjB,GAAuBH,OAAO,CAAChC,CAA/B,GAAmC,GAAnC,GAAyC,KAAzC,GAAiDmC,MAAjD,GAA0D,GAA1D,GAAgEF,OAAO,CAACjC,CAArF;AACAkC,MAAAA,SAAS,IAAI,QAAQD,OAAO,CAACH,CAAhB,GAAoB,GAApB,GAA0BG,OAAO,CAACjC,CAAlC,GAAsC,GAAtC,GAA4C,KAA5C,GAAoDoC,QAApD,GAA+D,GAA/D,GAAqEH,OAAO,CAACjC,CAA7E,GACT,KADS,GACDoC,QADC,GACU,GADV,GACgBC,SADhB,GAC4B,KAD5B,GACoCJ,OAAO,CAACH,CAD5C,GACgD,GADhD,GACsDO,SADtD,GACkE,IAD/E;AAEAH,MAAAA,SAAS,IAAI,QAAQC,MAAR,GAAiB,GAAjB,GAAuBE,SAAvB,GAAmC,KAAnC,GAA2CF,MAA3C,GAAoD,GAApD,GAA0DI,SAAvE;AACAL,MAAAA,SAAS,IAAI,QAAQD,OAAO,CAACH,CAAhB,GAAoB,GAApB,GAA0BS,SAA1B,GAAsC,KAAtC,GAA8CH,QAA9C,GAAyD,GAAzD,GAA+DG,SAA5E;AACAL,MAAAA,SAAS,IAAI,QAAQD,OAAO,CAACH,CAAhB,GAAoB,GAApB,GAA0BZ,MAAM,CAAClB,CAAjC,GAAqC,KAArC,GAA6CoC,QAA7C,GAAwD,GAAxD,GAA8DlB,MAAM,CAAClB,CAAlF;AACAkC,MAAAA,SAAS,IAAIpD,MAAM,CAAC0D,QAAP,GACT,SAASrB,OAAO,CAACW,CAAR,GAAY,CAArB,IAA0B,GAA1B,IAAiCX,OAAO,CAACnB,CAAR,GAAY,CAA7C,IAAkD,KAAlD,IAA2DmB,OAAO,CAACW,CAAR,GAAY,CAAvE,IAA4E,GAA5E,IAAmFX,OAAO,CAACnB,CAAR,GAAY,CAA/F,IACI,KADJ,IACamB,OAAO,CAACW,CAAR,GAAY,CADzB,IAC8B,GAD9B,IACqCX,OAAO,CAACnB,CAAR,GAAY,CADjD,IACsD,KADtD,IAC+DmB,OAAO,CAACW,CAAR,GAAY,CAD3E,IACgF,GADhF,IACuFX,OAAO,CAACnB,CAAR,GAAY,CADnG,CADS,GAE+F,EAF5G;AAGH,KAbD,MAcK;AACD,WAAK0B,aAAL,CAAmB5C,MAAnB,EAA2BW,KAA3B,EAAkC;AAAEqC,QAAAA,CAAC,EAAEE,OAAO,CAACF,CAAb;AAAgB9B,QAAAA,CAAC,EAAEiC,OAAO,CAACjC,CAA3B;AAA8Bc,QAAAA,KAAK,EAAE,CAArC;AAAwCiB,QAAAA,MAAM,EAAEM,SAAS,GAAGJ,OAAO,CAACjC;AAApE,OAAlC,EAA2G,KAA3G;AACA,WAAK0B,aAAL,CAAmB5C,MAAnB,EAA2BW,KAA3B,EAAkC;AAAEqC,QAAAA,CAAC,EAAEQ,QAAL;AAAetC,QAAAA,CAAC,EAAEiC,OAAO,CAACjC,CAA1B;AAA6Bc,QAAAA,KAAK,EAAE,CAApC;AAAuCiB,QAAAA,MAAM,EAAEM,SAAS,GAAGJ,OAAO,CAACjC;AAAnE,OAAlC,EAA0G,IAA1G;AACAkC,MAAAA,SAAS,IAAI,OAAOF,OAAO,CAACF,CAAf,GAAmB,GAAnB,GAAyBG,OAAO,CAACjC,CAAjC,GAAqC,KAArC,GAA6CgC,OAAO,CAACF,CAArD,GAAyD,GAAzD,GAA+DO,SAA5E;AACAH,MAAAA,SAAS,IAAI,OAAOF,OAAO,CAACF,CAAf,GAAmB,GAAnB,GAAyBK,MAAzB,GAAkC,GAAlC,GAAwC,KAAxC,GAAgDF,OAAO,CAACH,CAAxD,GAA4D,GAA5D,GAAkEK,MAA/E;AACAD,MAAAA,SAAS,IAAI,QAAQD,OAAO,CAACH,CAAhB,GAAoB,GAApB,GAA0BG,OAAO,CAACjC,CAAlC,GAAsC,GAAtC,GAA4C,KAA5C,GAAoDoC,QAApD,GAA+D,GAA/D,GAAqEH,OAAO,CAACjC,CAA7E,GACT,KADS,GACDoC,QADC,GACU,GADV,GACgBC,SADhB,GAC4B,KAD5B,GACoCJ,OAAO,CAACH,CAD5C,GACgD,GADhD,GACsDO,SADtD,GACkE,IAD/E;AAEAH,MAAAA,SAAS,IAAI,QAAQE,QAAR,GAAmB,GAAnB,GAAyBD,MAAzB,GAAkC,KAAlC,GAA0CG,QAA1C,GAAqD,GAArD,GAA2DH,MAAxE;AACAD,MAAAA,SAAS,IAAI,QAAQI,QAAR,GAAmB,GAAnB,GAAyBL,OAAO,CAACjC,CAAjC,GAAqC,KAArC,GAA6CsC,QAA7C,GAAwD,GAAxD,GAA8DD,SAA3E;AACAH,MAAAA,SAAS,IAAI,QAAQhB,MAAM,CAACY,CAAf,GAAmB,GAAnB,GAAyBG,OAAO,CAACjC,CAAjC,GAAqC,GAArC,GAA2C,KAA3C,GAAmDkB,MAAM,CAACY,CAA1D,GAA8D,GAA9D,GAAoEO,SAAjF;AACAH,MAAAA,SAAS,IAAIpD,MAAM,CAAC0D,QAAP,GACT,QAAQrB,OAAO,CAACW,CAAR,GAAY,CAApB,IAAyB,GAAzB,IAAgCX,OAAO,CAACnB,CAAR,GAAY,CAA5C,IAAiD,KAAjD,IAA0DmB,OAAO,CAACW,CAAR,GAAY,CAAtE,IAA2E,GAA3E,IAAkFX,OAAO,CAACnB,CAAR,GAAY,CAA9F,IACI,IADJ,IACYmB,OAAO,CAACW,CAAR,GAAY,CADxB,IAC6B,GAD7B,IACoCX,OAAO,CAACnB,CAAR,GAAY,CADhD,IACqD,KADrD,IAC8DmB,OAAO,CAACW,CAAR,GAAY,CAD1E,IAC+E,GAD/E,IACsFX,OAAO,CAACnB,CAAR,GAAY,CADlG,CADS,GAE8F,EAF3G;AAGH;;AACD,WAAOkC,SAAP;AACH,GAxCD;AAyCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzD,EAAAA,mBAAmB,CAACX,SAApB,CAA8BkD,mBAA9B,GAAoD,UAAUlC,MAAV,EAAkBW,KAAlB,EAAyBgD,IAAzB,EAA+BrD,QAA/B,EAAyC8C,SAAzC,EAAoDhB,MAApD,EAA4D;AAC5G,QAAIwB,QAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,QAAQ,GAAG9D,MAAM,CAACuC,KAAP,CAAawB,OAAb,CAAqBC,EAArB,GAA0B,UAA1B,GAAuChE,MAAM,CAACgB,KAA9C,GAAsD,SAAtD,GAAkEL,KAAK,CAACK,KAAvF;AACA,QAAI+C,OAAO,GAAG/D,MAAM,CAACuC,KAAP,CAAa0B,QAAb,CAAsBC,QAAtB,CAA+B,IAAI3E,UAAJ,CAAeuE,QAAQ,GAAG,UAA1B,EAAsCxD,QAAQ,CAAC6D,IAA/C,EAAqD7D,QAAQ,CAACyB,MAAT,CAAgBC,KAArE,EAA4E1B,QAAQ,CAACyB,MAAT,CAAgBD,KAA5F,EAAmG9B,MAAM,CAACoE,OAA1G,EAAmHpE,MAAM,CAACqE,SAA1H,EAAqIjB,SAArI,CAA/B,CAAd;AACAW,IAAAA,OAAO,CAACO,YAAR,CAAqB,YAArB,EAAmC3D,KAAK,CAACqC,CAAN,CAAQuB,QAAR,KAAqB,GAArB,GAA2B5D,KAAK,CAAC+B,OAAN,CAAc6B,QAAd,EAA3B,GAC7B,GAD6B,GACvB5D,KAAK,CAACgC,OAAN,CAAc4B,QAAd,EADuB,GACI,GADJ,GACU5D,KAAK,CAACe,aAAN,CAAoB6C,QAApB,EADV,GAC2C,GAD3C,GACiD5D,KAAK,CAACa,aAAN,CAAoB+C,QAApB,EADpF;AAEA,QAAIC,aAAa,GAAGxE,MAAM,CAACuC,KAAP,CAAa0B,QAAb,CAAsBQ,WAAtB,CAAkC;AAClD,YAAMX;AAD4C,KAAlC,CAApB;AAGAU,IAAAA,aAAa,CAACE,WAAd,CAA0BX,OAA1B;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhE,KAAK,CAACiE,QAAN,CAAelE,MAAnC,EAA2CiE,CAAC,EAA5C,EAAgD;AAC5Cf,MAAAA,QAAQ,GAAGvE,QAAQ,CAAEsB,KAAK,CAACW,MAAN,GAAec,MAAjB,EAA0BzB,KAAK,CAACiE,QAAN,CAAeD,CAAf,CAA1B,EAA6C3E,MAAM,CAACC,KAApD,EAA2DD,MAAM,CAACE,KAAlE,EAAyEF,MAAM,CAACuC,KAAP,CAAaM,mBAAtF,CAAnB;AACAgB,MAAAA,IAAI,GAAG,IAAIvE,IAAJ,CAASU,MAAM,CAACsC,MAAP,CAAcN,KAAvB,EAA8BhC,MAAM,CAACsC,MAAP,CAAcW,MAA5C,CAAP;AACAtC,MAAAA,KAAK,CAACC,eAAN,CAAsBe,IAAtB,CAA2BiC,QAA3B;AACA,WAAKhB,aAAL,CAAmB5C,MAAnB,EAA2BW,KAA3B,EAAkC;AAC9BqC,QAAAA,CAAC,EAAEY,QAAQ,CAACZ,CAAT,GAAca,IAAI,CAAC7B,KAAL,GAAa,CADA;AACId,QAAAA,CAAC,EAAE0C,QAAQ,CAAC1C,CAAT,GAAc2C,IAAI,CAACZ,MAAL,GAAc,CADnC;AAE9BjB,QAAAA,KAAK,EAAE6B,IAAI,CAAC7B,KAFkB;AAEXiB,QAAAA,MAAM,EAAEY,IAAI,CAACZ;AAFF,OAAlC,EAGG,IAHH;AAIH;;AACDjD,IAAAA,MAAM,CAAC6E,aAAP,CAAqBH,WAArB,CAAiCF,aAAjC;AACH,GArBD;AAsBA;AACJ;AACA;AACA;AACA;AACA;;;AACI7E,EAAAA,mBAAmB,CAACX,SAApB,CAA8BiC,iBAA9B,GAAkD,UAAU6D,OAAV,EAAmBnE,KAAnB,EAA0BoE,IAA1B,EAAgC;AAC9E,QAAIC,MAAM,GAAGF,OAAO,CAACpE,MAArB;AACA,QAAIuE,QAAQ,GAAG;AACX5C,MAAAA,OAAO,EAAElD,GAAG,CAAC2F,OAAD,CAAH,GAAeE,MADb;AAEXtD,MAAAA,aAAa,EAAE,CAFJ;AAEOF,MAAAA,aAAa,EAAE,CAFtB;AAGXkB,MAAAA,OAAO,EAAE,CAHE;AAGCC,MAAAA,OAAO,EAAE,CAHV;AAIXP,MAAAA,MAAM,EAAE,CAJG;AAIAwC,MAAAA,QAAQ,EAAE;AAJV,KAAf;;AAMA,QAAIG,IAAI,KAAK,WAAb,EAA0B;AACtBE,MAAAA,QAAQ,CAACvD,aAAT,GAAyB,KAAKwD,yBAAL,CAA+BJ,OAA/B,EAAwCE,MAAxC,EAAgD,IAAhD,CAAzB;AACAC,MAAAA,QAAQ,CAACzD,aAAT,GAAyB,KAAK0D,yBAAL,CAA+BJ,OAA/B,EAAwCE,MAAxC,EAAgD,IAAhD,CAAzB;AACAC,MAAAA,QAAQ,CAAC7C,MAAT,GAAkB,KAAK8C,yBAAL,CAA+BJ,OAA/B,EAAwCE,MAAxC,EAAgD,GAAhD,CAAlB;AACH,KAJD,MAKK,IAAID,IAAI,KAAK,WAAb,EAA0B;AAC3BE,MAAAA,QAAQ,CAACvD,aAAT,GAAyB,KAAKyD,yBAAL,CAA+BL,OAA/B,EAAwCE,MAAxC,EAAgD,IAAhD,CAAzB;AACAC,MAAAA,QAAQ,CAACzD,aAAT,GAAyB,KAAK2D,yBAAL,CAA+BL,OAA/B,EAAwCE,MAAxC,EAAgD,IAAhD,CAAzB;AACAC,MAAAA,QAAQ,CAAC7C,MAAT,GAAkB,KAAK+C,yBAAL,CAA+BL,OAA/B,EAAwCE,MAAxC,EAAgD,GAAhD,CAAlB;AACH,KAJI,MAKA;AACDC,MAAAA,QAAQ,CAAC7C,MAAT,GAAkB1C,SAAS,CAACoF,OAAD,CAA3B;AACA,WAAKM,iBAAL,CAAuBN,OAAvB,EAAgCE,MAAhC,EAAwCC,QAAxC;AACH;;AACD,SAAKI,gBAAL,CAAsBP,OAAtB,EAA+BE,MAA/B,EAAuCC,QAAvC;AACAtE,IAAAA,KAAK,CAACgC,OAAN,GAAgBsC,QAAQ,CAACtC,OAAzB;AACAhC,IAAAA,KAAK,CAAC+B,OAAN,GAAgBuC,QAAQ,CAACvC,OAAzB;AACA/B,IAAAA,KAAK,CAACe,aAAN,GAAsBuD,QAAQ,CAACvD,aAA/B;AACAf,IAAAA,KAAK,CAACa,aAAN,GAAsByD,QAAQ,CAACzD,aAA/B;AACAb,IAAAA,KAAK,CAACyB,MAAN,GAAe6C,QAAQ,CAAC7C,MAAxB;AACAzB,IAAAA,KAAK,CAACiE,QAAN,GAAiBK,QAAQ,CAACL,QAA1B;AACAjE,IAAAA,KAAK,CAAC0B,OAAN,GAAgB4C,QAAQ,CAAC5C,OAAzB;AACH,GA9BD;AA+BA;AACJ;AACA;AACA;AACA;AACA;;;AACI1C,EAAAA,mBAAmB,CAACX,SAApB,CAA8BkG,yBAA9B,GAA0D,UAAUJ,OAAV,EAAmBQ,KAAnB,EAA0BC,UAA1B,EAAsC;AAC5F,QAAID,KAAK,KAAK,CAAd,EAAiB;AACb,aAAO,CAAP;AACH,KAFD,MAGK,IAAIA,KAAK,KAAK,CAAd,EAAiB;AAClB,aAAOR,OAAO,CAAC,CAAD,CAAd;AACH;;AACD,QAAIU,KAAK,GAAG,CAAZ;AACA,QAAIC,IAAI,GAAGF,UAAU,IAAID,KAAK,GAAG,CAAZ,CAArB;AACA,QAAII,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASJ,IAAT,CAAX,CAAlB;AACA,QAAIK,YAAY,GAAGL,IAAI,GAAGC,WAA1B;;AACA,QAAIA,WAAW,KAAK,CAApB,EAAuB;AACnBF,MAAAA,KAAK,GAAGV,OAAO,CAAC,CAAD,CAAf;AACH,KAFD,MAGK,IAAIY,WAAW,GAAGJ,KAAK,GAAG,CAA1B,EAA6B;AAC9BE,MAAAA,KAAK,GAAGV,OAAO,CAACQ,KAAK,GAAG,CAAT,CAAf;AACH,KAFI,MAGA;AACDE,MAAAA,KAAK,GAAGM,YAAY,IAAIhB,OAAO,CAACY,WAAD,CAAP,GAAuBZ,OAAO,CAACY,WAAW,GAAG,CAAf,CAAlC,CAAZ,GAAmEZ,OAAO,CAACY,WAAW,GAAG,CAAf,CAAlF;AACH;;AACD,WAAOF,KAAP;AACH,GArBD;AAsBA;AACJ;AACA;AACA;AACA;AACA;;;AACI7F,EAAAA,mBAAmB,CAACX,SAApB,CAA8BmG,yBAA9B,GAA0D,UAAUL,OAAV,EAAmBQ,KAAnB,EAA0BC,UAA1B,EAAsC;AAC5F,QAAID,KAAK,KAAK,CAAd,EAAiB;AACb,aAAO,CAAP;AACH,KAFD,MAGK,IAAIA,KAAK,KAAK,CAAd,EAAiB;AAClB,aAAOR,OAAO,CAAC,CAAD,CAAd;AACH;;AACD,QAAIU,KAAK,GAAG,CAAZ;AACA,QAAIC,IAAI,GAAGF,UAAU,IAAID,KAAK,GAAG,CAAZ,CAArB;AACA,QAAII,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASJ,IAAT,CAAX,CAAlB;AACA,QAAIK,YAAY,GAAGL,IAAI,GAAGC,WAA1B;AACAF,IAAAA,KAAK,GAAGM,YAAY,IAAIhB,OAAO,CAACY,WAAW,GAAG,CAAf,CAAP,GAA2BZ,OAAO,CAACY,WAAD,CAAtC,CAAZ,GAAmEZ,OAAO,CAACY,WAAD,CAAlF;AACA,WAAOF,KAAP;AACH,GAbD;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI7F,EAAAA,mBAAmB,CAACX,SAApB,CAA8BoG,iBAA9B,GAAkD,UAAUN,OAAV,EAAmBQ,KAAnB,EAA0BL,QAA1B,EAAoC;AAClF,QAAIK,KAAK,KAAK,CAAd,EAAiB;AACbL,MAAAA,QAAQ,CAACvD,aAAT,GAAyBoD,OAAO,CAAC,CAAD,CAAhC;AACAG,MAAAA,QAAQ,CAACzD,aAAT,GAAyBsD,OAAO,CAAC,CAAD,CAAhC;AACA,aAAO,IAAP;AACH;;AACD,QAAIiB,UAAU,GAAGT,KAAK,GAAG,CAAR,KAAc,CAA/B;AACA,QAAIU,UAAU,GAAGV,KAAK,GAAG,CAAzB;AACA,QAAIW,kBAAkB,GAAGnB,OAAO,CAACoB,KAAR,CAAc,CAAd,EAAiBF,UAAjB,CAAzB;AACA,QAAIG,kBAAkB,GAAGrB,OAAO,CAACoB,KAAR,CAAcH,UAAU,GAAGC,UAAH,GAAgBA,UAAU,GAAG,CAArD,EAAwDV,KAAxD,CAAzB;AACAL,IAAAA,QAAQ,CAACvD,aAAT,GAAyBhC,SAAS,CAACuG,kBAAD,CAAlC;AACAhB,IAAAA,QAAQ,CAACzD,aAAT,GAAyB9B,SAAS,CAACyG,kBAAD,CAAlC;AACH,GAZD;AAaA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIxG,EAAAA,mBAAmB,CAACX,SAApB,CAA8BqG,gBAA9B,GAAiD,UAAUP,OAAV,EAAmBQ,KAAnB,EAA0BL,QAA1B,EAAoC;AACjF,QAAImB,aAAa,GAAGnB,QAAQ,CAACzD,aAAT,GAAyByD,QAAQ,CAACvD,aAAtD;AACA,QAAI2E,QAAQ,GAAG,MAAMD,aAArB;;AACA,SAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,KAApB,EAA2BX,CAAC,EAA5B,EAAgC;AAC5B,UAAIG,OAAO,CAACH,CAAD,CAAP,GAAaM,QAAQ,CAACvD,aAAT,GAAyB2E,QAA1C,EAAoD;AAChDpB,QAAAA,QAAQ,CAACL,QAAT,CAAkBjD,IAAlB,CAAuBmD,OAAO,CAACH,CAAD,CAA9B;AACH,OAFD,MAGK;AACDM,QAAAA,QAAQ,CAACtC,OAAT,GAAmBmC,OAAO,CAACH,CAAD,CAA1B;AACA;AACH;AACJ;;AACD,SAAK,IAAIA,CAAC,GAAGW,KAAK,GAAG,CAArB,EAAwBX,CAAC,IAAI,CAA7B,EAAgCA,CAAC,EAAjC,EAAqC;AACjC,UAAIG,OAAO,CAACH,CAAD,CAAP,GAAaM,QAAQ,CAACzD,aAAT,GAAyB6E,QAA1C,EAAoD;AAChDpB,QAAAA,QAAQ,CAACL,QAAT,CAAkBjD,IAAlB,CAAuBmD,OAAO,CAACH,CAAD,CAA9B;AACH,OAFD,MAGK;AACDM,QAAAA,QAAQ,CAACvC,OAAT,GAAmBoC,OAAO,CAACH,CAAD,CAA1B;AACA;AACH;AACJ;AACJ,GArBD;AAsBA;AACJ;AACA;AACA;AACA;;;AACIhF,EAAAA,mBAAmB,CAACX,SAApB,CAA8BsH,WAA9B,GAA4C,UAAUtG,MAAV,EAAkB;AAC1D,SAAKuG,OAAL,CAAavG,MAAb;AACH,GAFD;AAGA;AACJ;AACA;;;AACIL,EAAAA,mBAAmB,CAACX,SAApB,CAA8BwH,aAA9B,GAA8C,YAAY;AACtD,WAAO,qBAAP;AACA;AACR;AACA;AACK,GALD;AAMA;AACJ;AACA;AACA;AACA;;;AACI7G,EAAAA,mBAAmB,CAACX,SAApB,CAA8ByH,OAA9B,GAAwC,UAAUlE,KAAV,EAAiB;AACrD;AACR;AACA;AACK,GAJD;;AAKA,SAAO5C,mBAAP;AACH,CAtTwC,CAsTvCF,UAtTuC,CAAzC;;AAuTA,SAASE,mBAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { withInRange, sum } from '../../common/utils/helper';\nimport { getSaturationColor, getPoint } from '../../common/utils/helper';\nimport { Size, PathOption } from '@syncfusion/ej2-svg-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ColumnBase } from './column-base';\nimport { getMedian } from '../../common/utils/helper';\n/**\n * `BoxAndWhiskerSeries` module is used to render the box and whisker series.\n */\nvar BoxAndWhiskerSeries = /** @class */ (function (_super) {\n    __extends(BoxAndWhiskerSeries, _super);\n    function BoxAndWhiskerSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render BoxAndWhisker series.\n     * @return {void}\n     * @private\n     */\n    BoxAndWhiskerSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n        var sideBySideInfo = this.getSideBySideInfo(series);\n        var argsData;\n        for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n            var point = _a[_i];\n            point.symbolLocations = [];\n            point.regions = [];\n            var centerRegion = void 0;\n            if (point.visible && withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {\n                this.findBoxPlotValues(point.y, point, series.boxPlotMode);\n                //region to cover the top and bottom ticks\n                this.updateTipRegion(series, point, sideBySideInfo);\n                //get middle rect\n                centerRegion = this.getRectangle((point.xValue + sideBySideInfo.start), point.upperQuartile, (point.xValue + sideBySideInfo.end), point.lowerQuartile, series);\n                point.regions.push(centerRegion);\n                argsData = this.triggerEvent(series, point, series.interior, {\n                    color: (!isNullOrUndefined(series.border.color) && series.border.color !== 'transparent') ? series.border.color :\n                        getSaturationColor(series.interior, -0.6),\n                    width: series.border.width ? series.border.width : 1\n                });\n                if (!argsData.cancel) {\n                    this.renderBoxAndWhisker(series, point, centerRegion, argsData, this.getPathString(point, series, getPoint(point.xValue, point.median, xAxis, yAxis, isInverted), getPoint(point.xValue + sideBySideInfo.median, point.average, xAxis, yAxis, isInverted)), sideBySideInfo.median);\n                }\n            }\n        }\n        if (series.marker.visible) {\n            series.chart.markerRender.render(series);\n        }\n    };\n    /**\n     * update the tip region fo box plot\n     * @param series\n     * @param point\n     * @param sideBySideInfo\n     */\n    BoxAndWhiskerSeries.prototype.updateTipRegion = function (series, point, sideBySideInfo) {\n        var tipRegion = this.getRectangle((point.xValue + sideBySideInfo.median), point.maximum, (point.xValue + sideBySideInfo.median), point.minimum, series);\n        this.updateTipSize(series, point, tipRegion, series.chart.requireInvertedAxis);\n    };\n    /**\n     * Update tip size to tip regions\n     * @param series\n     * @param point\n     * @param region\n     * @param isInverted\n     */\n    BoxAndWhiskerSeries.prototype.updateTipSize = function (series, point, region, isInverted) {\n        var borderWidth = series.border.width || 1;\n        if (!isInverted) {\n            region.x -= borderWidth / 2;\n            region.width = region.width || borderWidth;\n        }\n        else {\n            region.y -= borderWidth / 2;\n            region.height = region.height || borderWidth;\n        }\n        point.regions.push(region);\n    };\n    /**\n     * Calculation for path direction performed here\n     * @param point\n     * @param series\n     * @param median\n     * @param average\n     */\n    BoxAndWhiskerSeries.prototype.getPathString = function (point, series, median, average) {\n        var topRect = point.regions[0];\n        var midRect = point.regions[1];\n        var direction = '';\n        var width = series.chart.requireInvertedAxis ? topRect.height : topRect.width;\n        var center = series.chart.requireInvertedAxis ? topRect.y + topRect.height / 2 :\n            topRect.x + topRect.width / 2;\n        var midWidth = midRect.x + midRect.width;\n        var midHeight = midRect.y + midRect.height;\n        var topWidth = topRect.x + topRect.width;\n        var topHeight = topRect.y + topRect.height;\n        if (!series.chart.requireInvertedAxis) {\n            this.updateTipSize(series, point, { x: midRect.x, y: topRect.y, width: midWidth - midRect.x, height: 0 }, true);\n            this.updateTipSize(series, point, { x: midRect.x, y: topHeight, width: midWidth - midRect.x, height: 0 }, true);\n            direction += 'M ' + midRect.x + ' ' + topRect.y + ' ' + ' L ' + midWidth + ' ' + topRect.y;\n            direction += ' M ' + center + ' ' + topRect.y + ' ' + ' L ' + center + ' ' + midRect.y;\n            direction += ' M ' + midRect.x + ' ' + midRect.y + ' ' + ' L ' + midWidth + ' ' + midRect.y +\n                ' L ' + midWidth + ' ' + midHeight + ' L ' + midRect.x + ' ' + midHeight + ' Z';\n            direction += ' M ' + center + ' ' + midHeight + ' L ' + center + ' ' + topHeight;\n            direction += ' M ' + midRect.x + ' ' + topHeight + ' L ' + midWidth + ' ' + topHeight;\n            direction += ' M ' + midRect.x + ' ' + median.y + ' L ' + midWidth + ' ' + median.y;\n            direction += series.showMean ?\n                ' M ' + (average.x - 5) + ' ' + (average.y - 5) + ' L ' + (average.x + 5) + ' ' + (average.y + 5) +\n                    ' M ' + (average.x + 5) + ' ' + (average.y - 5) + ' L ' + (average.x - 5) + ' ' + (average.y + 5) : '';\n        }\n        else {\n            this.updateTipSize(series, point, { x: topRect.x, y: midRect.y, width: 0, height: midHeight - midRect.y }, false);\n            this.updateTipSize(series, point, { x: topWidth, y: midRect.y, width: 0, height: midHeight - midRect.y }, true);\n            direction += 'M ' + topRect.x + ' ' + midRect.y + ' L ' + topRect.x + ' ' + midHeight;\n            direction += 'M ' + topRect.x + ' ' + center + ' ' + ' L ' + midRect.x + ' ' + center;\n            direction += ' M ' + midRect.x + ' ' + midRect.y + ' ' + ' L ' + midWidth + ' ' + midRect.y +\n                ' L ' + midWidth + ' ' + midHeight + ' L ' + midRect.x + ' ' + midHeight + ' Z';\n            direction += ' M ' + midWidth + ' ' + center + ' L ' + topWidth + ' ' + center;\n            direction += ' M ' + topWidth + ' ' + midRect.y + ' L ' + topWidth + ' ' + midHeight;\n            direction += ' M ' + median.x + ' ' + midRect.y + ' ' + ' L ' + median.x + ' ' + midHeight;\n            direction += series.showMean ?\n                'M ' + (average.x + 5) + ' ' + (average.y - 5) + ' L ' + (average.x - 5) + ' ' + (average.y + 5) +\n                    'M ' + (average.x - 5) + ' ' + (average.y - 5) + ' L ' + (average.x + 5) + ' ' + (average.y + 5) : '';\n        }\n        return direction;\n    };\n    /**\n     * Rendering for box and whisker append here.\n     * @param series\n     * @param point\n     * @param rect\n     * @param argsData\n     * @param direction\n     */\n    BoxAndWhiskerSeries.prototype.renderBoxAndWhisker = function (series, point, rect, argsData, direction, median) {\n        var location;\n        var size;\n        var symbolId = series.chart.element.id + '_Series_' + series.index + '_Point_' + point.index;\n        var element = series.chart.renderer.drawPath(new PathOption(symbolId + '_BoxPath', argsData.fill, argsData.border.width, argsData.border.color, series.opacity, series.dashArray, direction));\n        element.setAttribute('aria-label', point.x.toString() + ':' + point.maximum.toString()\n            + ':' + point.minimum.toString() + ':' + point.lowerQuartile.toString() + ':' + point.upperQuartile.toString());\n        var parentElement = series.chart.renderer.createGroup({\n            'id': symbolId\n        });\n        parentElement.appendChild(element);\n        for (var i = 0; i < point.outliers.length; i++) {\n            location = getPoint((point.xValue + median), point.outliers[i], series.xAxis, series.yAxis, series.chart.requireInvertedAxis);\n            size = new Size(series.marker.width, series.marker.height);\n            point.symbolLocations.push(location);\n            this.updateTipSize(series, point, {\n                x: location.x - (size.width / 2), y: location.y - (size.height / 2),\n                width: size.width, height: size.height\n            }, true);\n        }\n        series.seriesElement.appendChild(parentElement);\n    };\n    /**\n     * To find the box plot values\n     * @param yValues\n     * @param point\n     * @param mode\n     */\n    BoxAndWhiskerSeries.prototype.findBoxPlotValues = function (yValues, point, mode) {\n        var yCount = yValues.length;\n        var quartile = {\n            average: sum(yValues) / yCount,\n            lowerQuartile: 0, upperQuartile: 0,\n            maximum: 0, minimum: 0,\n            median: 0, outliers: []\n        };\n        if (mode === 'Exclusive') {\n            quartile.lowerQuartile = this.getExclusiveQuartileValue(yValues, yCount, 0.25);\n            quartile.upperQuartile = this.getExclusiveQuartileValue(yValues, yCount, 0.75);\n            quartile.median = this.getExclusiveQuartileValue(yValues, yCount, 0.5);\n        }\n        else if (mode === 'Inclusive') {\n            quartile.lowerQuartile = this.getInclusiveQuartileValue(yValues, yCount, 0.25);\n            quartile.upperQuartile = this.getInclusiveQuartileValue(yValues, yCount, 0.75);\n            quartile.median = this.getInclusiveQuartileValue(yValues, yCount, 0.5);\n        }\n        else {\n            quartile.median = getMedian(yValues);\n            this.getQuartileValues(yValues, yCount, quartile);\n        }\n        this.getMinMaxOutlier(yValues, yCount, quartile);\n        point.minimum = quartile.minimum;\n        point.maximum = quartile.maximum;\n        point.lowerQuartile = quartile.lowerQuartile;\n        point.upperQuartile = quartile.upperQuartile;\n        point.median = quartile.median;\n        point.outliers = quartile.outliers;\n        point.average = quartile.average;\n    };\n    /**\n     * to find the exclusive quartile values\n     * @param yValues\n     * @param count\n     * @param percentile\n     */\n    BoxAndWhiskerSeries.prototype.getExclusiveQuartileValue = function (yValues, count, percentile) {\n        if (count === 0) {\n            return 0;\n        }\n        else if (count === 1) {\n            return yValues[0];\n        }\n        var value = 0;\n        var rank = percentile * (count + 1);\n        var integerRank = Math.floor(Math.abs(rank));\n        var fractionRank = rank - integerRank;\n        if (integerRank === 0) {\n            value = yValues[0];\n        }\n        else if (integerRank > count - 1) {\n            value = yValues[count - 1];\n        }\n        else {\n            value = fractionRank * (yValues[integerRank] - yValues[integerRank - 1]) + yValues[integerRank - 1];\n        }\n        return value;\n    };\n    /**\n     * to find the inclusive quartile values\n     * @param yValues\n     * @param count\n     * @param percentile\n     */\n    BoxAndWhiskerSeries.prototype.getInclusiveQuartileValue = function (yValues, count, percentile) {\n        if (count === 0) {\n            return 0;\n        }\n        else if (count === 1) {\n            return yValues[0];\n        }\n        var value = 0;\n        var rank = percentile * (count - 1);\n        var integerRank = Math.floor(Math.abs(rank));\n        var fractionRank = rank - integerRank;\n        value = fractionRank * (yValues[integerRank + 1] - yValues[integerRank]) + yValues[integerRank];\n        return value;\n    };\n    /**\n     * To find the quartile values\n     * @param yValues\n     * @param count\n     * @param lowerQuartile\n     * @param upperQuartile\n     */\n    BoxAndWhiskerSeries.prototype.getQuartileValues = function (yValues, count, quartile) {\n        if (count === 1) {\n            quartile.lowerQuartile = yValues[0];\n            quartile.upperQuartile = yValues[0];\n            return null;\n        }\n        var isEvenList = count % 2 === 0;\n        var halfLength = count / 2;\n        var lowerQuartileArray = yValues.slice(0, halfLength);\n        var upperQuartileArray = yValues.slice(isEvenList ? halfLength : halfLength + 1, count);\n        quartile.lowerQuartile = getMedian(lowerQuartileArray);\n        quartile.upperQuartile = getMedian(upperQuartileArray);\n    };\n    /**\n     * To find the min, max and outlier values\n     * @param yValues\n     * @param lowerQuartile\n     * @param upperQuartile\n     * @param minimum\n     * @param maximum\n     * @param outliers\n     */\n    BoxAndWhiskerSeries.prototype.getMinMaxOutlier = function (yValues, count, quartile) {\n        var interquartile = quartile.upperQuartile - quartile.lowerQuartile;\n        var rangeIQR = 1.5 * interquartile;\n        for (var i = 0; i < count; i++) {\n            if (yValues[i] < quartile.lowerQuartile - rangeIQR) {\n                quartile.outliers.push(yValues[i]);\n            }\n            else {\n                quartile.minimum = yValues[i];\n                break;\n            }\n        }\n        for (var i = count - 1; i >= 0; i--) {\n            if (yValues[i] > quartile.upperQuartile + rangeIQR) {\n                quartile.outliers.push(yValues[i]);\n            }\n            else {\n                quartile.maximum = yValues[i];\n                break;\n            }\n        }\n    };\n    /**\n     * Animates the series.\n     * @param  {Series} series - Defines the series to animate.\n     * @return {void}\n     */\n    BoxAndWhiskerSeries.prototype.doAnimation = function (series) {\n        this.animate(series);\n    };\n    /**\n     * Get module name.\n     */\n    BoxAndWhiskerSeries.prototype.getModuleName = function () {\n        return 'BoxAndWhiskerSeries';\n        /**\n         * return the module name\n         */\n    };\n    /**\n     * To destroy the candle series.\n     * @return {void}\n     * @private\n     */\n    BoxAndWhiskerSeries.prototype.destroy = function (chart) {\n        /**\n         * Destroys the candle series.\n         */\n    };\n    return BoxAndWhiskerSeries;\n}(ColumnBase));\nexport { BoxAndWhiskerSeries };\n"]},"metadata":{},"sourceType":"module"}