{"ast":null,"code":"/**\n * PdfStringFormat.ts class for EJ2-PDF\n */\nimport { PdfVerticalAlignment } from './../../graphics/enum';\nimport { PdfSubSuperScript, PdfWordWrapType } from './../../graphics/fonts/enum';\n/**\n * `PdfStringFormat` class represents the text layout information on PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a pages to the document\n * let page1 : PdfPage = document.pages.add();\n * // set font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // set brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * // set the format for string\n * let stringFormat : PdfStringFormat = new PdfStringFormat();\n * // set the text alignment\n * stringFormat.alignment = PdfTextAlignment.Center;\n * // set the vertical alignment\n * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n * //\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\n\nvar PdfStringFormat =\n/** @class */\nfunction () {\n  function PdfStringFormat(arg1, arg2) {\n    /**\n     * The `scaling factor` of the text being drawn.\n     * @private\n     */\n    this.scalingFactor = 100.0;\n    /**\n     * Indicates text `wrapping` type.\n     * @private\n     */\n\n    this.wordWrapType = PdfWordWrapType.Word;\n    this.internalLineLimit = true;\n    this.wordWrapType = PdfWordWrapType.Word;\n\n    if (typeof arg1 !== 'undefined' && typeof arg1 !== 'string') {\n      this.textAlignment = arg1;\n    }\n\n    if (typeof arg2 !== 'undefined') {\n      this.verticalAlignment = arg2;\n    }\n  }\n\n  Object.defineProperty(PdfStringFormat.prototype, \"alignment\", {\n    //Properties\n\n    /**\n     * Gets or sets the `horizontal` text alignment\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set the text alignment\n     * stringFormat.alignment = PdfTextAlignment.Center;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this.textAlignment;\n    },\n    set: function (value) {\n      this.textAlignment = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"textDirection\", {\n    get: function () {\n      return this.direction;\n    },\n    set: function (value) {\n      this.direction = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"lineAlignment\", {\n    /**\n     * Gets or sets the `vertical` text alignment.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set the vertical alignment\n     * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this.verticalAlignment === 'undefined' || this.verticalAlignment == null) {\n        return PdfVerticalAlignment.Top;\n      } else {\n        return this.verticalAlignment;\n      }\n    },\n    set: function (value) {\n      this.verticalAlignment = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"rightToLeft\", {\n    /**\n     * Gets or sets the value that indicates text `direction` mode.\n     * @private\n     */\n    get: function () {\n      if (typeof this.isRightToLeft === 'undefined' || this.isRightToLeft == null) {\n        return false;\n      } else {\n        return this.isRightToLeft;\n      }\n    },\n    set: function (value) {\n      this.isRightToLeft = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"characterSpacing\", {\n    /**\n     * Gets or sets value that indicates a `size` among the characters in the text.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set character spacing\n     * stringFormat.characterSpacing = 10;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this.internalCharacterSpacing === 'undefined' || this.internalCharacterSpacing == null) {\n        return 0;\n      } else {\n        return this.internalCharacterSpacing;\n      }\n    },\n    set: function (value) {\n      this.internalCharacterSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"wordSpacing\", {\n    /**\n     * Gets or sets value that indicates a `size` among the words in the text.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set word spacing\n     * stringFormat.wordSpacing = 10;\n     * //\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this.internalWordSpacing === 'undefined' || this.internalWordSpacing == null) {\n        return 0;\n      } else {\n        return this.internalWordSpacing;\n      }\n    },\n    set: function (value) {\n      this.internalWordSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"lineSpacing\", {\n    /**\n     * Gets or sets value that indicates the `vertical distance` between the baselines of adjacent lines of text.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // set string\n     * let text : string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n     * incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitati';\n     * // set rectangle bounds\n     * let rectangle : RectangleF = new RectangleF({x : 0, y : 0}, {width : 300, height : 100})\n     * //\n     * // set the format for string\n     * let stringFormat : PdfStringFormat = new PdfStringFormat();\n     * // set line spacing\n     * stringFormat.lineSpacing = 10;\n     * //\n     * // draw the text\n     * page1.graphics.drawString(text, font, blackBrush, rectangle, stringFormat);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      if (typeof this.leading === 'undefined' || this.leading == null) {\n        return 0;\n      } else {\n        return this.leading;\n      }\n    },\n    set: function (value) {\n      this.leading = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"clipPath\", {\n    /**\n     * Gets or sets a value indicating whether the text is `clipped` or not.\n     * @private\n     */\n    get: function () {\n      if (typeof this.clip === 'undefined' || this.clip == null) {\n        return false;\n      } else {\n        return this.clip;\n      }\n    },\n    set: function (value) {\n      this.clip = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"subSuperScript\", {\n    /**\n     * Gets or sets value indicating whether the text is in `subscript or superscript` mode.\n     * @private\n     */\n    get: function () {\n      if (typeof this.pdfSubSuperScript === 'undefined' || this.pdfSubSuperScript == null) {\n        return PdfSubSuperScript.None;\n      } else {\n        return this.pdfSubSuperScript;\n      }\n    },\n    set: function (value) {\n      this.pdfSubSuperScript = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"paragraphIndent\", {\n    /**\n     * Gets or sets the `indent` of the first line in the paragraph.\n     * @private\n     */\n    get: function () {\n      if (typeof this.internalParagraphIndent === 'undefined' || this.internalParagraphIndent == null) {\n        return 0;\n      } else {\n        return this.internalParagraphIndent;\n      }\n    },\n    set: function (value) {\n      this.internalParagraphIndent = value;\n      this.firstLineIndent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"lineLimit\", {\n    /**\n     * Gets or sets a value indicating whether [`line limit`].\n     * @private\n     */\n    get: function () {\n      return this.internalLineLimit;\n    },\n    set: function (value) {\n      this.internalLineLimit = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"measureTrailingSpaces\", {\n    /**\n     * Gets or sets a value indicating whether [`measure trailing spaces`].\n     * @private\n     */\n    get: function () {\n      if (typeof this.trailingSpaces === 'undefined' || this.trailingSpaces == null) {\n        return false;\n      } else {\n        return this.trailingSpaces;\n      }\n    },\n    set: function (value) {\n      this.trailingSpaces = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"noClip\", {\n    /**\n     * Gets or sets a value indicating whether [`no clip`].\n     * @private\n     */\n    get: function () {\n      if (typeof this.isNoClip === 'undefined' || this.isNoClip == null) {\n        return false;\n      } else {\n        return this.isNoClip;\n      }\n    },\n    set: function (value) {\n      this.isNoClip = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"wordWrap\", {\n    /**\n     * Gets or sets value indicating type of the text `wrapping`.\n     * @private\n     */\n    get: function () {\n      // if (typeof this.wrapType === 'undefined' || this.wrapType == null) {\n      //     return PdfWordWrapType.Word;\n      // } else {\n      return this.wordWrapType; // }\n    },\n    set: function (value) {\n      this.wordWrapType = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"horizontalScalingFactor\", {\n    /**\n     * Gets or sets the `scaling factor`.\n     * @private\n     */\n    get: function () {\n      // if (typeof this.scalingFactor === 'undefined' || this.scalingFactor == null) {\n      //     return 100;\n      // } else {\n      return this.scalingFactor; // }\n    },\n    set: function (value) {\n      if (value <= 0) {\n        throw new Error('ArgumentOutOfRangeException:The scaling factor cant be less of equal to zero, ScalingFactor');\n      }\n\n      this.scalingFactor = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfStringFormat.prototype, \"firstLineIndent\", {\n    /**\n     * Gets or sets the `indent` of the first line in the text.\n     * @private\n     */\n    get: function () {\n      if (typeof this.initialLineIndent === 'undefined' || this.initialLineIndent == null) {\n        return 0;\n      } else {\n        return this.initialLineIndent;\n      }\n    },\n    set: function (value) {\n      this.initialLineIndent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Clones` the object.\n   * @private\n   */\n  //IClonable implementation\n\n  PdfStringFormat.prototype.clone = function () {\n    var format = this;\n    return format;\n  };\n\n  return PdfStringFormat;\n}();\n\nexport { PdfStringFormat };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-string-format.js"],"names":["PdfVerticalAlignment","PdfSubSuperScript","PdfWordWrapType","PdfStringFormat","arg1","arg2","scalingFactor","wordWrapType","Word","internalLineLimit","textAlignment","verticalAlignment","Object","defineProperty","prototype","get","set","value","enumerable","configurable","direction","Top","isRightToLeft","internalCharacterSpacing","internalWordSpacing","leading","clip","pdfSubSuperScript","None","internalParagraphIndent","firstLineIndent","trailingSpaces","isNoClip","Error","initialLineIndent","clone","format"],"mappings":"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","sourcesContent":["/**\n * PdfStringFormat.ts class for EJ2-PDF\n */\nimport { PdfVerticalAlignment } from './../../graphics/enum';\nimport { PdfSubSuperScript, PdfWordWrapType } from './../../graphics/fonts/enum';\n/**\n * `PdfStringFormat` class represents the text layout information on PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a pages to the document\n * let page1 : PdfPage = document.pages.add();\n * // set font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // set brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * // set the format for string\n * let stringFormat : PdfStringFormat = new PdfStringFormat();\n * // set the text alignment\n * stringFormat.alignment = PdfTextAlignment.Center;\n * // set the vertical alignment\n * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n * //\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfStringFormat = /** @class */ (function () {\n    function PdfStringFormat(arg1, arg2) {\n        /**\n         * The `scaling factor` of the text being drawn.\n         * @private\n         */\n        this.scalingFactor = 100.0;\n        /**\n         * Indicates text `wrapping` type.\n         * @private\n         */\n        this.wordWrapType = PdfWordWrapType.Word;\n        this.internalLineLimit = true;\n        this.wordWrapType = PdfWordWrapType.Word;\n        if ((typeof arg1 !== 'undefined') && (typeof arg1 !== 'string')) {\n            this.textAlignment = arg1;\n        }\n        if (typeof arg2 !== 'undefined') {\n            this.verticalAlignment = arg2;\n        }\n    }\n    Object.defineProperty(PdfStringFormat.prototype, \"alignment\", {\n        //Properties\n        /**\n         * Gets or sets the `horizontal` text alignment\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set the text alignment\n         * stringFormat.alignment = PdfTextAlignment.Center;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.textAlignment;\n        },\n        set: function (value) {\n            this.textAlignment = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"textDirection\", {\n        get: function () {\n            return this.direction;\n        },\n        set: function (value) {\n            this.direction = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"lineAlignment\", {\n        /**\n         * Gets or sets the `vertical` text alignment.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set the vertical alignment\n         * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.verticalAlignment === 'undefined' || this.verticalAlignment == null) {\n                return PdfVerticalAlignment.Top;\n            }\n            else {\n                return this.verticalAlignment;\n            }\n        },\n        set: function (value) {\n            this.verticalAlignment = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"rightToLeft\", {\n        /**\n         * Gets or sets the value that indicates text `direction` mode.\n         * @private\n         */\n        get: function () {\n            if (typeof this.isRightToLeft === 'undefined' || this.isRightToLeft == null) {\n                return false;\n            }\n            else {\n                return this.isRightToLeft;\n            }\n        },\n        set: function (value) {\n            this.isRightToLeft = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"characterSpacing\", {\n        /**\n         * Gets or sets value that indicates a `size` among the characters in the text.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set character spacing\n         * stringFormat.characterSpacing = 10;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.internalCharacterSpacing === 'undefined' || this.internalCharacterSpacing == null) {\n                return 0;\n            }\n            else {\n                return this.internalCharacterSpacing;\n            }\n        },\n        set: function (value) {\n            this.internalCharacterSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"wordSpacing\", {\n        /**\n         * Gets or sets value that indicates a `size` among the words in the text.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set word spacing\n         * stringFormat.wordSpacing = 10;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.internalWordSpacing === 'undefined' || this.internalWordSpacing == null) {\n                return 0;\n            }\n            else {\n                return this.internalWordSpacing;\n            }\n        },\n        set: function (value) {\n            this.internalWordSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"lineSpacing\", {\n        /**\n         * Gets or sets value that indicates the `vertical distance` between the baselines of adjacent lines of text.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * // set string\n         * let text : string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n         * incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitati';\n         * // set rectangle bounds\n         * let rectangle : RectangleF = new RectangleF({x : 0, y : 0}, {width : 300, height : 100})\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set line spacing\n         * stringFormat.lineSpacing = 10;\n         * //\n         * // draw the text\n         * page1.graphics.drawString(text, font, blackBrush, rectangle, stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.leading === 'undefined' || this.leading == null) {\n                return 0;\n            }\n            else {\n                return this.leading;\n            }\n        },\n        set: function (value) {\n            this.leading = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"clipPath\", {\n        /**\n         * Gets or sets a value indicating whether the text is `clipped` or not.\n         * @private\n         */\n        get: function () {\n            if (typeof this.clip === 'undefined' || this.clip == null) {\n                return false;\n            }\n            else {\n                return this.clip;\n            }\n        },\n        set: function (value) {\n            this.clip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"subSuperScript\", {\n        /**\n         * Gets or sets value indicating whether the text is in `subscript or superscript` mode.\n         * @private\n         */\n        get: function () {\n            if (typeof this.pdfSubSuperScript === 'undefined' || this.pdfSubSuperScript == null) {\n                return PdfSubSuperScript.None;\n            }\n            else {\n                return this.pdfSubSuperScript;\n            }\n        },\n        set: function (value) {\n            this.pdfSubSuperScript = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"paragraphIndent\", {\n        /**\n         * Gets or sets the `indent` of the first line in the paragraph.\n         * @private\n         */\n        get: function () {\n            if (typeof this.internalParagraphIndent === 'undefined' || this.internalParagraphIndent == null) {\n                return 0;\n            }\n            else {\n                return this.internalParagraphIndent;\n            }\n        },\n        set: function (value) {\n            this.internalParagraphIndent = value;\n            this.firstLineIndent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"lineLimit\", {\n        /**\n         * Gets or sets a value indicating whether [`line limit`].\n         * @private\n         */\n        get: function () {\n            return this.internalLineLimit;\n        },\n        set: function (value) {\n            this.internalLineLimit = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"measureTrailingSpaces\", {\n        /**\n         * Gets or sets a value indicating whether [`measure trailing spaces`].\n         * @private\n         */\n        get: function () {\n            if (typeof this.trailingSpaces === 'undefined' || this.trailingSpaces == null) {\n                return false;\n            }\n            else {\n                return this.trailingSpaces;\n            }\n        },\n        set: function (value) {\n            this.trailingSpaces = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"noClip\", {\n        /**\n         * Gets or sets a value indicating whether [`no clip`].\n         * @private\n         */\n        get: function () {\n            if (typeof this.isNoClip === 'undefined' || this.isNoClip == null) {\n                return false;\n            }\n            else {\n                return this.isNoClip;\n            }\n        },\n        set: function (value) {\n            this.isNoClip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"wordWrap\", {\n        /**\n         * Gets or sets value indicating type of the text `wrapping`.\n         * @private\n         */\n        get: function () {\n            // if (typeof this.wrapType === 'undefined' || this.wrapType == null) {\n            //     return PdfWordWrapType.Word;\n            // } else {\n            return this.wordWrapType;\n            // }\n        },\n        set: function (value) {\n            this.wordWrapType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"horizontalScalingFactor\", {\n        /**\n         * Gets or sets the `scaling factor`.\n         * @private\n         */\n        get: function () {\n            // if (typeof this.scalingFactor === 'undefined' || this.scalingFactor == null) {\n            //     return 100;\n            // } else {\n            return this.scalingFactor;\n            // }\n        },\n        set: function (value) {\n            if (value <= 0) {\n                throw new Error('ArgumentOutOfRangeException:The scaling factor cant be less of equal to zero, ScalingFactor');\n            }\n            this.scalingFactor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"firstLineIndent\", {\n        /**\n         * Gets or sets the `indent` of the first line in the text.\n         * @private\n         */\n        get: function () {\n            if (typeof this.initialLineIndent === 'undefined' || this.initialLineIndent == null) {\n                return 0;\n            }\n            else {\n                return this.initialLineIndent;\n            }\n        },\n        set: function (value) {\n            this.initialLineIndent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Clones` the object.\n     * @private\n     */\n    //IClonable implementation\n    PdfStringFormat.prototype.clone = function () {\n        var format = this;\n        return format;\n    };\n    return PdfStringFormat;\n}());\nexport { PdfStringFormat };\n"]},"metadata":{},"sourceType":"module"}