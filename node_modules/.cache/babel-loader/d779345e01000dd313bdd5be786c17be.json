{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfFontFamily, PdfFontStyle, FontEncoding } from './enum';\nimport { PdfFont } from './pdf-font';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStandardFontMetricsFactory } from './pdf-standard-font-metrics-factory';\nimport { PdfDictionary } from './../../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfName } from './../../primitives/pdf-name';\n/**\n * Represents one of the 14 standard fonts.\n * It's used to create a standard PDF font to draw the text in to the PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * //\n * // create new standard font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\n\nvar PdfStandardFont =\n/** @class */\nfunction (_super) {\n  __extends(PdfStandardFont, _super);\n\n  function PdfStandardFont(fontFamilyPrototype, size, style) {\n    var _this = _super.call(this, size, typeof style === 'undefined' ? fontFamilyPrototype instanceof PdfStandardFont ? fontFamilyPrototype.style : PdfFontStyle.Regular : style) || this;\n    /**\n     * Gets `ascent` of the font.\n     * @private\n     */\n\n\n    _this.dictionaryProperties = new DictionaryProperties();\n    /**\n     * Gets `encodings` for internal class use.\n     * @hidden\n     * @private\n     */\n\n    _this.encodings = ['Unknown', 'StandardEncoding', 'MacRomanEncoding', 'MacExpertEncoding', 'WinAnsiEncoding', 'PDFDocEncoding', 'IdentityH'];\n\n    if (typeof fontFamilyPrototype === 'undefined') {\n      _this.pdfFontFamily = PdfFontFamily.Helvetica;\n    } else if (fontFamilyPrototype instanceof PdfStandardFont) {\n      _this.pdfFontFamily = fontFamilyPrototype.fontFamily;\n    } else {\n      _this.pdfFontFamily = fontFamilyPrototype;\n    }\n\n    _this.checkStyle();\n\n    _this.initializeInternals();\n\n    return _this;\n  }\n\n  Object.defineProperty(PdfStandardFont.prototype, \"fontFamily\", {\n    /* tslint:enable */\n    //Properties\n\n    /**\n     * Gets the `FontFamily`.\n     * @private\n     */\n    get: function () {\n      return this.pdfFontFamily;\n    },\n    enumerable: true,\n    configurable: true\n  }); //methods\n\n  /**\n   * Checks font `style` of the font.\n   * @private\n   */\n\n  PdfStandardFont.prototype.checkStyle = function () {\n    if (this.fontFamily === PdfFontFamily.Symbol || this.fontFamily === PdfFontFamily.ZapfDingbats) {\n      var style = this.style;\n      style &= ~(PdfFontStyle.Bold | PdfFontStyle.Italic);\n      this.setStyle(style);\n    }\n  };\n  /**\n   * Returns `width` of the line.\n   * @public\n   */\n\n\n  PdfStandardFont.prototype.getLineWidth = function (line, format) {\n    if (line == null) {\n      throw new Error('ArgumentNullException:line');\n    }\n\n    var width = 0;\n    var name = this.name;\n    line = PdfStandardFont.convert(line);\n\n    for (var i = 0, len = line.length; i < len; i++) {\n      var ch = line[i];\n      var charWidth = this.getCharWidthInternal(ch, format);\n      width += charWidth;\n    }\n\n    var size = this.metrics.getSize(format);\n    width *= PdfFont.charSizeMultiplier * size;\n    width = this.applyFormatSettings(line, format, width);\n    return width;\n  };\n  /**\n   * Checks whether fonts are `equals`.\n   * @private\n   */\n\n\n  PdfStandardFont.prototype.equalsToFont = function (font) {\n    var equal = false;\n    var stFont = font;\n\n    if (stFont != null) {\n      var fontFamilyEqual = this.fontFamily === stFont.fontFamily;\n      var lineReducer = ~(PdfFontStyle.Underline | PdfFontStyle.Strikeout);\n      var styleEqual = (this.style & lineReducer) === (stFont.style & lineReducer);\n      equal = fontFamilyEqual && styleEqual;\n    }\n\n    return equal;\n  };\n  /**\n   * `Initializes` font internals..\n   * @private\n   */\n\n\n  PdfStandardFont.prototype.initializeInternals = function () {\n    var equalFont = null; // if (PdfDocument.EnableCache) {\n\n    equalFont = PdfDocument.cache.search(this); // }\n\n    var internals = null; // if (equalFont == null) {\n    // Create font metrics.\n\n    var metrics = PdfStandardFontMetricsFactory.getMetrics(this.pdfFontFamily, this.style, this.size);\n    this.metrics = metrics;\n    internals = this.createInternals();\n    this.setInternals(internals);\n  };\n  /**\n   * `Creates` font`s dictionary.\n   * @private\n   */\n\n\n  PdfStandardFont.prototype.createInternals = function () {\n    var dictionary = new PdfDictionary();\n    dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n    dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type1));\n    dictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.metrics.postScriptName));\n\n    if (this.fontFamily !== PdfFontFamily.Symbol && this.fontFamily !== PdfFontFamily.ZapfDingbats) {\n      var encoding = this.encodings[FontEncoding.WinAnsiEncoding];\n      dictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(encoding));\n    }\n\n    return dictionary;\n  };\n  /**\n   * Returns `width` of the char. This methods doesn`t takes into consideration font`s size.\n   * @private\n   */\n\n\n  PdfStandardFont.prototype.getCharWidthInternal = function (charCode, format) {\n    var width = 0;\n    var code = 0;\n    code = charCode.charCodeAt(0);\n\n    if (this.name === '0' || this.name === '1' || this.name === '2' || this.name === '3' || this.name === '4') {\n      code = code - PdfStandardFont.charOffset;\n    }\n\n    code = code >= 0 && code !== 128 ? code : 0;\n    var metrics = this.metrics;\n    var widthTable = metrics.widthTable;\n    width = widthTable.items(code);\n    return width;\n  };\n  /**\n   * `Converts` the specified text.\n   * @private\n   */\n\n\n  PdfStandardFont.convert = function (text) {\n    return text;\n  }; //Constants\n\n  /**\n   * First character `position`.\n   * @private\n   */\n\n\n  PdfStandardFont.charOffset = 32;\n  return PdfStandardFont;\n}(PdfFont);\n\nexport { PdfStandardFont };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-standard-font.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfFontFamily","PdfFontStyle","FontEncoding","PdfFont","PdfDocument","PdfStandardFontMetricsFactory","PdfDictionary","DictionaryProperties","PdfName","PdfStandardFont","_super","fontFamilyPrototype","size","style","_this","call","Regular","dictionaryProperties","encodings","pdfFontFamily","Helvetica","fontFamily","checkStyle","initializeInternals","defineProperty","get","enumerable","configurable","Symbol","ZapfDingbats","Bold","Italic","setStyle","getLineWidth","line","format","Error","width","name","convert","i","len","length","ch","charWidth","getCharWidthInternal","metrics","getSize","charSizeMultiplier","applyFormatSettings","equalsToFont","font","equal","stFont","fontFamilyEqual","lineReducer","Underline","Strikeout","styleEqual","equalFont","cache","search","internals","getMetrics","createInternals","setInternals","dictionary","items","setValue","type","subtype","type1","baseFont","postScriptName","encoding","WinAnsiEncoding","charCode","code","charCodeAt","charOffset","widthTable","text"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfFontFamily, PdfFontStyle, FontEncoding } from './enum';\nimport { PdfFont } from './pdf-font';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStandardFontMetricsFactory } from './pdf-standard-font-metrics-factory';\nimport { PdfDictionary } from './../../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfName } from './../../primitives/pdf-name';\n/**\n * Represents one of the 14 standard fonts.\n * It's used to create a standard PDF font to draw the text in to the PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * //\n * // create new standard font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfStandardFont = /** @class */ (function (_super) {\n    __extends(PdfStandardFont, _super);\n    function PdfStandardFont(fontFamilyPrototype, size, style) {\n        var _this = _super.call(this, size, (typeof style === 'undefined') ? ((fontFamilyPrototype instanceof PdfStandardFont) ? fontFamilyPrototype.style : PdfFontStyle.Regular) : style) || this;\n        /**\n         * Gets `ascent` of the font.\n         * @private\n         */\n        _this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Gets `encodings` for internal class use.\n         * @hidden\n         * @private\n         */\n        _this.encodings = ['Unknown', 'StandardEncoding', 'MacRomanEncoding', 'MacExpertEncoding',\n            'WinAnsiEncoding', 'PDFDocEncoding', 'IdentityH'];\n        if (typeof fontFamilyPrototype === 'undefined') {\n            _this.pdfFontFamily = PdfFontFamily.Helvetica;\n        }\n        else if ((fontFamilyPrototype instanceof PdfStandardFont)) {\n            _this.pdfFontFamily = fontFamilyPrototype.fontFamily;\n        }\n        else {\n            _this.pdfFontFamily = fontFamilyPrototype;\n        }\n        _this.checkStyle();\n        _this.initializeInternals();\n        return _this;\n    }\n    Object.defineProperty(PdfStandardFont.prototype, \"fontFamily\", {\n        /* tslint:enable */\n        //Properties\n        /**\n         * Gets the `FontFamily`.\n         * @private\n         */\n        get: function () {\n            return this.pdfFontFamily;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //methods\n    /**\n     * Checks font `style` of the font.\n     * @private\n     */\n    PdfStandardFont.prototype.checkStyle = function () {\n        if (this.fontFamily === PdfFontFamily.Symbol || this.fontFamily === PdfFontFamily.ZapfDingbats) {\n            var style = this.style;\n            style &= ~(PdfFontStyle.Bold | PdfFontStyle.Italic);\n            this.setStyle(style);\n        }\n    };\n    /**\n     * Returns `width` of the line.\n     * @public\n     */\n    PdfStandardFont.prototype.getLineWidth = function (line, format) {\n        if (line == null) {\n            throw new Error('ArgumentNullException:line');\n        }\n        var width = 0;\n        var name = this.name;\n        line = PdfStandardFont.convert(line);\n        for (var i = 0, len = line.length; i < len; i++) {\n            var ch = line[i];\n            var charWidth = this.getCharWidthInternal(ch, format);\n            width += charWidth;\n        }\n        var size = this.metrics.getSize(format);\n        width *= (PdfFont.charSizeMultiplier * size);\n        width = this.applyFormatSettings(line, format, width);\n        return width;\n    };\n    /**\n     * Checks whether fonts are `equals`.\n     * @private\n     */\n    PdfStandardFont.prototype.equalsToFont = function (font) {\n        var equal = false;\n        var stFont = font;\n        if (stFont != null) {\n            var fontFamilyEqual = (this.fontFamily === stFont.fontFamily);\n            var lineReducer = (~(PdfFontStyle.Underline | PdfFontStyle.Strikeout));\n            var styleEqual = (this.style & lineReducer) === (stFont.style & lineReducer);\n            equal = (fontFamilyEqual && styleEqual);\n        }\n        return equal;\n    };\n    /**\n     * `Initializes` font internals..\n     * @private\n     */\n    PdfStandardFont.prototype.initializeInternals = function () {\n        var equalFont = null;\n        // if (PdfDocument.EnableCache) {\n        equalFont = PdfDocument.cache.search(this);\n        // }\n        var internals = null;\n        // if (equalFont == null) {\n        // Create font metrics.\n        var metrics = PdfStandardFontMetricsFactory.getMetrics(this.pdfFontFamily, this.style, this.size);\n        this.metrics = metrics;\n        internals = this.createInternals();\n        this.setInternals(internals);\n    };\n    /**\n     * `Creates` font`s dictionary.\n     * @private\n     */\n    PdfStandardFont.prototype.createInternals = function () {\n        var dictionary = new PdfDictionary();\n        dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n        dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type1));\n        dictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.metrics.postScriptName));\n        if (this.fontFamily !== PdfFontFamily.Symbol && this.fontFamily !== PdfFontFamily.ZapfDingbats) {\n            var encoding = this.encodings[FontEncoding.WinAnsiEncoding];\n            dictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(encoding));\n        }\n        return dictionary;\n    };\n    /**\n     * Returns `width` of the char. This methods doesn`t takes into consideration font`s size.\n     * @private\n     */\n    PdfStandardFont.prototype.getCharWidthInternal = function (charCode, format) {\n        var width = 0;\n        var code = 0;\n        code = charCode.charCodeAt(0);\n        if (this.name === '0' || this.name === '1' || this.name === '2' ||\n            this.name === '3' || this.name === '4') {\n            code = code - PdfStandardFont.charOffset;\n        }\n        code = (code >= 0 && code !== 128) ? code : 0;\n        var metrics = this.metrics;\n        var widthTable = metrics.widthTable;\n        width = widthTable.items(code);\n        return width;\n    };\n    /**\n     * `Converts` the specified text.\n     * @private\n     */\n    PdfStandardFont.convert = function (text) {\n        return text;\n    };\n    //Constants\n    /**\n     * First character `position`.\n     * @private\n     */\n    PdfStandardFont.charOffset = 32;\n    return PdfStandardFont;\n}(PdfFont));\nexport { PdfStandardFont };\n"]},"metadata":{},"sourceType":"module"}