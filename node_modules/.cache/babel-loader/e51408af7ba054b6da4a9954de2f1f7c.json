{"ast":null,"code":"import { ObjectStatus } from './../input-output/enum';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './pdf-dictionary-properties';\nimport { Operators } from './pdf-operators';\nimport { Dictionary } from './../collections/dictionary';\nimport { PdfReference } from './../primitives/pdf-reference';\nimport { ObjectType } from './cross-table';\nimport { PdfStream } from './../primitives/pdf-stream';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfCatalog } from './../document/pdf-catalog';\n/**\n * `PdfCrossTable` is responsible for intermediate level parsing\n * and savingof a PDF document.\n * @private\n */\n\nvar PdfCrossTable =\n/** @class */\nfunction () {\n  function PdfCrossTable() {\n    /**\n     * The modified `objects` that should be saved.\n     * @private\n     */\n    this.objects = new Dictionary();\n    /**\n     * Holds `maximal generation number` or offset to object.\n     * @default 0\n     * @private\n     */\n\n    this.maxGenNumIndex = 0;\n    /**\n     * The `number of the objects`.\n     * @default 0\n     * @private\n     */\n\n    this.objectCount = 0;\n    /**\n     * Internal variable for accessing fields from `DictionryProperties` class.\n     * @default new PdfDictionaryProperties()\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties();\n  }\n\n  Object.defineProperty(PdfCrossTable.prototype, \"isMerging\", {\n    //Properties\n\n    /**\n     * Gets or sets if the document `is merged`.\n     * @private\n     */\n    get: function () {\n      return this.merging;\n    },\n    set: function (value) {\n      this.merging = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCrossTable.prototype, \"trailer\", {\n    /**\n     * Gets the `trailer`.\n     * @private\n     */\n    get: function () {\n      if (this.internalTrailer == null) {\n        this.internalTrailer = new PdfStream();\n      }\n\n      return this.internalTrailer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCrossTable.prototype, \"document\", {\n    /**\n     * Gets or sets the main `PdfDocument` class instance.\n     * @private\n     */\n    get: function () {\n      return this.pdfDocument;\n    },\n    set: function (value) {\n      this.pdfDocument = value;\n      this.items = this.pdfDocument.pdfObjects;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCrossTable.prototype, \"pdfObjects\", {\n    /**\n     * Gets the catched `PDF object` main collection.\n     * @private\n     */\n    get: function () {\n      return this.items;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCrossTable.prototype, \"objectCollection\", {\n    /**\n     * Gets the `object collection`.\n     * @private\n     */\n    get: function () {\n      return this.pdfDocument.pdfObjects;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCrossTable.prototype, \"count\", {\n    /**\n     * Gets or sets the `number of the objects` within the document.\n     * @private\n     */\n    get: function () {\n      return this.objectCount;\n    },\n    set: function (value) {\n      this.objectCount = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfCrossTable.prototype, \"nextObjNumber\", {\n    /**\n     * Returns `next available object number`.\n     * @private\n     */\n    get: function () {\n      this.count = this.count + 1;\n      return this.count;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfCrossTable.prototype.save = function (writer, filename) {\n    this.saveHead(writer);\n    var state = false;\n    this.mappedReferences = null;\n    this.objects.clear();\n    this.markTrailerReferences();\n    this.saveObjects(writer);\n    var saveCount = this.count;\n    var xrefPos = writer.position;\n    this.registerObject(0, new PdfReference(0, -1), true);\n    var prevXRef = 0;\n    writer.write(Operators.xref);\n    writer.write(Operators.newLine);\n    this.saveSections(writer);\n    this.saveTrailer(writer, this.count, prevXRef);\n    this.saveTheEndess(writer, xrefPos);\n    this.count = saveCount;\n\n    for (var i = 0; i < this.objectCollection.count; ++i) {\n      var oi = this.objectCollection.items(i);\n      oi.object.isSaving = false;\n    }\n\n    if (typeof filename === 'undefined') {\n      return writer.stream.buffer;\n    } else {\n      writer.stream.save(filename);\n    }\n  };\n  /**\n   * `Saves the endess` of the file.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveTheEndess = function (writer, xrefPos) {\n    writer.write(Operators.newLine + Operators.startxref + Operators.newLine);\n    writer.write(xrefPos.toString() + Operators.newLine);\n    writer.write(Operators.eof + Operators.newLine);\n  };\n  /**\n   * `Saves the new trailer` dictionary.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveTrailer = function (writer, count, prevXRef) {\n    writer.write(Operators.trailer + Operators.newLine); // Save the dictionary.\n\n    var trailer = this.trailer;\n    trailer.items.setValue(this.dictionaryProperties.size, new PdfNumber(this.objectCount + 1));\n    trailer = new PdfDictionary(trailer); // Make it real dictionary.\n\n    trailer.setEncrypt(false);\n    trailer.save(writer);\n  };\n  /**\n   * `Saves the xref section`.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveSections = function (writer) {\n    var objectNum = 0;\n    var count = 0;\n\n    do {\n      count = this.prepareSubsection(objectNum);\n      this.saveSubsection(writer, objectNum, count);\n      objectNum += count;\n    } while (count !== 0);\n  };\n  /**\n   * `Saves a subsection`.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveSubsection = function (writer, objectNum, count) {\n    if (count <= 0 || objectNum >= this.count) {\n      return;\n    }\n\n    var subsectionHead = '{0} {1}{2}';\n    writer.write(objectNum + ' ' + (count + 1) + Operators.newLine);\n\n    for (var i = objectNum; i <= objectNum + count; ++i) {\n      var obj = this.objects.getValue(i);\n      var str = '';\n\n      if (obj.type === ObjectType.Free) {\n        str = this.getItem(obj.offset, 65535, true);\n      } else {\n        str = this.getItem(obj.offset, obj.generation, false);\n      }\n\n      writer.write(str);\n    }\n  };\n  /**\n   * Generates string for `xref table item`.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.getItem = function (offset, genNumber, isFree) {\n    var returnString = '';\n    var addOffsetLength = 10 - offset.toString().length;\n\n    if (genNumber <= 0) {\n      genNumber = 0;\n    }\n\n    var addGenNumberLength = 5 - genNumber.toString().length <= 0 ? 0 : 5 - genNumber.toString().length;\n\n    for (var index = 0; index < addOffsetLength; index++) {\n      returnString = returnString + '0';\n    }\n\n    returnString = returnString + offset.toString() + ' ';\n\n    for (var index = 0; index < addGenNumberLength; index++) {\n      returnString = returnString + '0';\n    }\n\n    returnString = returnString + genNumber.toString() + ' ';\n    returnString = returnString + (isFree ? Operators.f : Operators.n) + Operators.newLine;\n    return returnString;\n  };\n  /**\n   * `Prepares a subsection` of the current section within the cross-reference table.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.prepareSubsection = function (objectNum) {\n    var count = 0;\n    var i;\n    var total = this.count;\n\n    for (var k = 0; k < this.document.pdfObjects.count; k++) {\n      var reference = this.document.pdfObjects.items(k).reference;\n      var refString = reference.toString();\n      var refArray = refString.split(' ');\n    }\n\n    if (objectNum >= total) {\n      return count;\n    } // search for first changed indirect object.\n\n\n    for (i = objectNum; i < total; ++i) {\n      break;\n    }\n\n    objectNum = i; // look up for all indirect objects in one subsection.\n\n    for (; i < total; ++i) {\n      ++count;\n    }\n\n    return count;\n  };\n  /**\n   * `Marks the trailer references` being saved.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.markTrailerReferences = function () {\n    var tempArray;\n    var keys = this.trailer.items.keys();\n    var values = this.trailer.items.values();\n  };\n  /**\n   * `Saves the head`.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveHead = function (writer) {\n    var version = this.generateFileVersion(writer.document);\n    writer.write('%PDF-' + version);\n    writer.write(Operators.newLine);\n  };\n  /**\n   * Generates the `version` of the file.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.generateFileVersion = function (document) {\n    var iVersion = 4;\n    var version = '1.' + iVersion.toString();\n    return version;\n  };\n\n  PdfCrossTable.prototype.getReference = function (obj, bNew) {\n    if (typeof bNew === 'undefined') {\n      var wasNew = false;\n      return this.getReference(obj, wasNew);\n    } else {\n      //code splitted for reducing lines of code exceeds 100.\n      return this.getSubReference(obj, bNew);\n    }\n  };\n  /**\n   * Retrieves the `reference` of the object given.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.getSubReference = function (obj, bNew) {\n    var isNew = false;\n    var wasNew;\n    var reference = null; // if (obj.IsSaving) {\n\n    if (this.items.count > 0 && obj.objectCollectionIndex > 0 && this.items.count > obj.objectCollectionIndex - 1) {\n      var tempObj = this.document.pdfObjects.getReference(obj, wasNew);\n      reference = tempObj.reference;\n      wasNew = tempObj.wasNew;\n    }\n\n    if (reference == null) {\n      if (obj.status === ObjectStatus.Registered) {\n        wasNew = false;\n      } else {\n        wasNew = true;\n      }\n    } else {\n      wasNew = false;\n    } // need to add mapped reference code\n\n\n    if (reference == null) {\n      var objnumber = this.nextObjNumber;\n      reference = new PdfReference(objnumber, 0);\n      var found = void 0;\n\n      if (wasNew) {\n        this.document.pdfObjects.add(obj);\n        this.document.pdfObjects.trySetReference(obj, reference, found);\n        var tempIndex = this.document.pdfObjects.count - 1;\n        var tempkey = this.document.pdfObjects.objectCollections[tempIndex].reference.objNumber;\n        var tempvalue = this.document.pdfObjects.objectCollections[this.document.pdfObjects.count - 1];\n        this.document.pdfObjects.mainObjectCollection.setValue(tempkey, tempvalue);\n        obj.position = -1;\n      } else {\n        this.document.pdfObjects.trySetReference(obj, reference, found);\n      }\n\n      obj.objectCollectionIndex = reference.objNumber;\n      obj.status = ObjectStatus.None;\n      isNew = true;\n    }\n\n    bNew = isNew || this.bForceNew;\n    return reference;\n  };\n  /**\n   * `Saves all objects` in the collection.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveObjects = function (writer) {\n    var objectCollection = this.objectCollection;\n\n    for (var i = 0; i < objectCollection.count; ++i) {\n      var oi = objectCollection.items(i);\n      var obj = oi.object;\n      obj.isSaving = true;\n      this.saveIndirectObject(obj, writer);\n    }\n  };\n  /**\n   * `Saves indirect object`.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.saveIndirectObject = function (obj, writer) {\n    var reference = this.getReference(obj);\n\n    if (obj instanceof PdfCatalog) {\n      this.trailer.items.setValue(this.dictionaryProperties.root, reference);\n    } // NOTE :  This is needed for correct string objects encryption.\n\n\n    this.pdfDocument.currentSavingObj = reference;\n    var tempArchive = false;\n    tempArchive = obj.getArchive();\n    var allowedType = !(obj instanceof PdfStream || !tempArchive || obj instanceof PdfCatalog);\n    var sigFlag = false;\n    this.registerObject(writer.position, reference);\n    this.doSaveObject(obj, reference, writer);\n  };\n  /**\n   * Performs `real saving` of the save object.\n   * @private\n   */\n\n\n  PdfCrossTable.prototype.doSaveObject = function (obj, reference, writer) {\n    var correctPosition = writer.length;\n    writer.write(reference.objNumber.toString());\n    writer.write(Operators.whiteSpace);\n    writer.write(reference.genNumber.toString());\n    writer.write(Operators.whiteSpace);\n    writer.write(Operators.obj);\n    writer.write(Operators.newLine);\n    obj.save(writer);\n    var stream = writer.stream;\n    writer.write(Operators.endObj);\n    writer.write(Operators.newLine);\n  };\n\n  PdfCrossTable.prototype.registerObject = function (offset, reference, free) {\n    if (typeof free === 'boolean') {\n      // Register the object by its number.\n      this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference, free));\n      this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);\n    } else if (typeof free === 'undefined') {\n      // Register the object by its number.\n      this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference));\n      this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);\n    }\n  };\n  /**\n   * `Dereferences` the specified primitive object.\n   * @private\n   */\n\n\n  PdfCrossTable.dereference = function (obj) {\n    var rh = obj;\n\n    if (rh != null) {\n      obj = rh.object;\n    }\n\n    return obj;\n  };\n\n  return PdfCrossTable;\n}();\n\nexport { PdfCrossTable };\n\nvar RegisteredObject =\n/** @class */\nfunction () {\n  function RegisteredObject(offset, reference, free) {\n    var tempOffset = offset;\n    this.offsetNumber = tempOffset;\n    var tempReference = reference;\n    this.generation = tempReference.genNumber;\n    this.object = tempReference.objNumber;\n\n    if (typeof free === 'undefined') {\n      this.type = ObjectType.Normal;\n    } else {\n      this.type = ObjectType.Free;\n    }\n  }\n\n  Object.defineProperty(RegisteredObject.prototype, \"objectNumber\", {\n    //Properties\n\n    /**\n     * Gets the `object number`.\n     * @private\n     */\n    get: function () {\n      return this.object;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RegisteredObject.prototype, \"offset\", {\n    /**\n     * Gets the `offset`.\n     * @private\n     */\n    get: function () {\n      var result;\n      result = this.offsetNumber;\n      return result;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RegisteredObject;\n}();\n\nexport { RegisteredObject };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-cross-table.js"],"names":["ObjectStatus","PdfDictionary","DictionaryProperties","Operators","Dictionary","PdfReference","ObjectType","PdfStream","PdfNumber","PdfCatalog","PdfCrossTable","objects","maxGenNumIndex","objectCount","dictionaryProperties","Object","defineProperty","prototype","get","merging","set","value","enumerable","configurable","internalTrailer","pdfDocument","items","pdfObjects","count","save","writer","filename","saveHead","state","mappedReferences","clear","markTrailerReferences","saveObjects","saveCount","xrefPos","position","registerObject","prevXRef","write","xref","newLine","saveSections","saveTrailer","saveTheEndess","i","objectCollection","oi","object","isSaving","stream","buffer","startxref","toString","eof","trailer","setValue","size","setEncrypt","objectNum","prepareSubsection","saveSubsection","subsectionHead","obj","getValue","str","type","Free","getItem","offset","generation","genNumber","isFree","returnString","addOffsetLength","length","addGenNumberLength","index","f","n","total","k","document","reference","refString","refArray","split","tempArray","keys","values","version","generateFileVersion","iVersion","getReference","bNew","wasNew","getSubReference","isNew","objectCollectionIndex","tempObj","status","Registered","objnumber","nextObjNumber","found","add","trySetReference","tempIndex","tempkey","objectCollections","objNumber","tempvalue","mainObjectCollection","None","bForceNew","saveIndirectObject","root","currentSavingObj","tempArchive","getArchive","allowedType","sigFlag","doSaveObject","correctPosition","whiteSpace","endObj","free","RegisteredObject","Math","max","dereference","rh","tempOffset","offsetNumber","tempReference","Normal","result"],"mappings":"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","sourcesContent":["import { ObjectStatus } from './../input-output/enum';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './pdf-dictionary-properties';\nimport { Operators } from './pdf-operators';\nimport { Dictionary } from './../collections/dictionary';\nimport { PdfReference } from './../primitives/pdf-reference';\nimport { ObjectType } from './cross-table';\nimport { PdfStream } from './../primitives/pdf-stream';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfCatalog } from './../document/pdf-catalog';\n/**\n * `PdfCrossTable` is responsible for intermediate level parsing\n * and savingof a PDF document.\n * @private\n */\nvar PdfCrossTable = /** @class */ (function () {\n    function PdfCrossTable() {\n        /**\n         * The modified `objects` that should be saved.\n         * @private\n         */\n        this.objects = new Dictionary();\n        /**\n         * Holds `maximal generation number` or offset to object.\n         * @default 0\n         * @private\n         */\n        this.maxGenNumIndex = 0;\n        /**\n         * The `number of the objects`.\n         * @default 0\n         * @private\n         */\n        this.objectCount = 0;\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @default new PdfDictionaryProperties()\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n    }\n    Object.defineProperty(PdfCrossTable.prototype, \"isMerging\", {\n        //Properties\n        /**\n         * Gets or sets if the document `is merged`.\n         * @private\n         */\n        get: function () {\n            return this.merging;\n        },\n        set: function (value) {\n            this.merging = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCrossTable.prototype, \"trailer\", {\n        /**\n         * Gets the `trailer`.\n         * @private\n         */\n        get: function () {\n            if (this.internalTrailer == null) {\n                this.internalTrailer = new PdfStream();\n            }\n            return this.internalTrailer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCrossTable.prototype, \"document\", {\n        /**\n         * Gets or sets the main `PdfDocument` class instance.\n         * @private\n         */\n        get: function () {\n            return this.pdfDocument;\n        },\n        set: function (value) {\n            this.pdfDocument = value;\n            this.items = this.pdfDocument.pdfObjects;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCrossTable.prototype, \"pdfObjects\", {\n        /**\n         * Gets the catched `PDF object` main collection.\n         * @private\n         */\n        get: function () {\n            return this.items;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCrossTable.prototype, \"objectCollection\", {\n        /**\n         * Gets the `object collection`.\n         * @private\n         */\n        get: function () {\n            return this.pdfDocument.pdfObjects;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCrossTable.prototype, \"count\", {\n        /**\n         * Gets or sets the `number of the objects` within the document.\n         * @private\n         */\n        get: function () {\n            return this.objectCount;\n        },\n        set: function (value) {\n            this.objectCount = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCrossTable.prototype, \"nextObjNumber\", {\n        /**\n         * Returns `next available object number`.\n         * @private\n         */\n        get: function () {\n            this.count = this.count + 1;\n            return this.count;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfCrossTable.prototype.save = function (writer, filename) {\n        this.saveHead(writer);\n        var state = false;\n        this.mappedReferences = null;\n        this.objects.clear();\n        this.markTrailerReferences();\n        this.saveObjects(writer);\n        var saveCount = this.count;\n        var xrefPos = writer.position;\n        this.registerObject(0, new PdfReference(0, -1), true);\n        var prevXRef = 0;\n        writer.write(Operators.xref);\n        writer.write(Operators.newLine);\n        this.saveSections(writer);\n        this.saveTrailer(writer, this.count, prevXRef);\n        this.saveTheEndess(writer, xrefPos);\n        this.count = saveCount;\n        for (var i = 0; i < this.objectCollection.count; ++i) {\n            var oi = this.objectCollection.items(i);\n            oi.object.isSaving = false;\n        }\n        if (typeof filename === 'undefined') {\n            return writer.stream.buffer;\n        }\n        else {\n            writer.stream.save(filename);\n        }\n    };\n    /**\n     * `Saves the endess` of the file.\n     * @private\n     */\n    PdfCrossTable.prototype.saveTheEndess = function (writer, xrefPos) {\n        writer.write(Operators.newLine + Operators.startxref + Operators.newLine);\n        writer.write(xrefPos.toString() + Operators.newLine);\n        writer.write(Operators.eof + Operators.newLine);\n    };\n    /**\n     * `Saves the new trailer` dictionary.\n     * @private\n     */\n    PdfCrossTable.prototype.saveTrailer = function (writer, count, prevXRef) {\n        writer.write(Operators.trailer + Operators.newLine);\n        // Save the dictionary.\n        var trailer = this.trailer;\n        trailer.items.setValue(this.dictionaryProperties.size, new PdfNumber(this.objectCount + 1));\n        trailer = new PdfDictionary(trailer); // Make it real dictionary.\n        trailer.setEncrypt(false);\n        trailer.save(writer);\n    };\n    /**\n     * `Saves the xref section`.\n     * @private\n     */\n    PdfCrossTable.prototype.saveSections = function (writer) {\n        var objectNum = 0;\n        var count = 0;\n        do {\n            count = this.prepareSubsection(objectNum);\n            this.saveSubsection(writer, objectNum, count);\n            objectNum += count;\n        } while (count !== 0);\n    };\n    /**\n     * `Saves a subsection`.\n     * @private\n     */\n    PdfCrossTable.prototype.saveSubsection = function (writer, objectNum, count) {\n        if (count <= 0 || objectNum >= this.count) {\n            return;\n        }\n        var subsectionHead = '{0} {1}{2}';\n        writer.write(objectNum + ' ' + (count + 1) + Operators.newLine);\n        for (var i = objectNum; i <= objectNum + count; ++i) {\n            var obj = this.objects.getValue(i);\n            var str = '';\n            if (obj.type === ObjectType.Free) {\n                str = this.getItem(obj.offset, 65535, true);\n            }\n            else {\n                str = this.getItem(obj.offset, obj.generation, false);\n            }\n            writer.write(str);\n        }\n    };\n    /**\n     * Generates string for `xref table item`.\n     * @private\n     */\n    PdfCrossTable.prototype.getItem = function (offset, genNumber, isFree) {\n        var returnString = '';\n        var addOffsetLength = 10 - offset.toString().length;\n        if (genNumber <= 0) {\n            genNumber = 0;\n        }\n        var addGenNumberLength = (5 - genNumber.toString().length) <= 0 ? 0 : (5 - genNumber.toString().length);\n        for (var index = 0; index < addOffsetLength; index++) {\n            returnString = returnString + '0';\n        }\n        returnString = returnString + offset.toString() + ' ';\n        for (var index = 0; index < addGenNumberLength; index++) {\n            returnString = returnString + '0';\n        }\n        returnString = returnString + genNumber.toString() + ' ';\n        returnString = returnString + ((isFree) ? Operators.f : Operators.n) + Operators.newLine;\n        return returnString;\n    };\n    /**\n     * `Prepares a subsection` of the current section within the cross-reference table.\n     * @private\n     */\n    PdfCrossTable.prototype.prepareSubsection = function (objectNum) {\n        var count = 0;\n        var i;\n        var total = this.count;\n        for (var k = 0; k < this.document.pdfObjects.count; k++) {\n            var reference = this.document.pdfObjects.items(k).reference;\n            var refString = reference.toString();\n            var refArray = refString.split(' ');\n        }\n        if (objectNum >= total) {\n            return count;\n        }\n        // search for first changed indirect object.\n        for (i = objectNum; i < total; ++i) {\n            break;\n        }\n        objectNum = i;\n        // look up for all indirect objects in one subsection.\n        for (; i < total; ++i) {\n            ++count;\n        }\n        return count;\n    };\n    /**\n     * `Marks the trailer references` being saved.\n     * @private\n     */\n    PdfCrossTable.prototype.markTrailerReferences = function () {\n        var tempArray;\n        var keys = this.trailer.items.keys();\n        var values = this.trailer.items.values();\n    };\n    /**\n     * `Saves the head`.\n     * @private\n     */\n    PdfCrossTable.prototype.saveHead = function (writer) {\n        var version = this.generateFileVersion(writer.document);\n        writer.write('%PDF-' + version);\n        writer.write(Operators.newLine);\n    };\n    /**\n     * Generates the `version` of the file.\n     * @private\n     */\n    PdfCrossTable.prototype.generateFileVersion = function (document) {\n        var iVersion = 4;\n        var version = '1.' + iVersion.toString();\n        return version;\n    };\n    PdfCrossTable.prototype.getReference = function (obj, bNew) {\n        if (typeof bNew === 'undefined') {\n            var wasNew = false;\n            return this.getReference(obj, wasNew);\n        }\n        else {\n            //code splitted for reducing lines of code exceeds 100.\n            return this.getSubReference(obj, bNew);\n        }\n    };\n    /**\n     * Retrieves the `reference` of the object given.\n     * @private\n     */\n    PdfCrossTable.prototype.getSubReference = function (obj, bNew) {\n        var isNew = false;\n        var wasNew;\n        var reference = null;\n        // if (obj.IsSaving) {\n        if (this.items.count > 0 && obj.objectCollectionIndex > 0 && this.items.count > obj.objectCollectionIndex - 1) {\n            var tempObj = this.document.pdfObjects.getReference(obj, wasNew);\n            reference = tempObj.reference;\n            wasNew = tempObj.wasNew;\n        }\n        if (reference == null) {\n            if (obj.status === ObjectStatus.Registered) {\n                wasNew = false;\n            }\n            else {\n                wasNew = true;\n            }\n        }\n        else {\n            wasNew = false;\n        }\n        // need to add mapped reference code\n        if (reference == null) {\n            var objnumber = this.nextObjNumber;\n            reference = new PdfReference(objnumber, 0);\n            var found = void 0;\n            if (wasNew) {\n                this.document.pdfObjects.add(obj);\n                this.document.pdfObjects.trySetReference(obj, reference, found);\n                var tempIndex = this.document.pdfObjects.count - 1;\n                var tempkey = this.document.pdfObjects.objectCollections[tempIndex].reference.objNumber;\n                var tempvalue = this.document.pdfObjects.objectCollections[this.document.pdfObjects.count - 1];\n                this.document.pdfObjects.mainObjectCollection.setValue(tempkey, tempvalue);\n                obj.position = -1;\n            }\n            else {\n                this.document.pdfObjects.trySetReference(obj, reference, found);\n            }\n            obj.objectCollectionIndex = reference.objNumber;\n            obj.status = ObjectStatus.None;\n            isNew = true;\n        }\n        bNew = isNew || this.bForceNew;\n        return reference;\n    };\n    /**\n     * `Saves all objects` in the collection.\n     * @private\n     */\n    PdfCrossTable.prototype.saveObjects = function (writer) {\n        var objectCollection = this.objectCollection;\n        for (var i = 0; i < objectCollection.count; ++i) {\n            var oi = objectCollection.items(i);\n            var obj = oi.object;\n            obj.isSaving = true;\n            this.saveIndirectObject(obj, writer);\n        }\n    };\n    /**\n     * `Saves indirect object`.\n     * @private\n     */\n    PdfCrossTable.prototype.saveIndirectObject = function (obj, writer) {\n        var reference = this.getReference(obj);\n        if (obj instanceof PdfCatalog) {\n            this.trailer.items.setValue(this.dictionaryProperties.root, reference);\n        }\n        // NOTE :  This is needed for correct string objects encryption.\n        this.pdfDocument.currentSavingObj = reference;\n        var tempArchive = false;\n        tempArchive = obj.getArchive();\n        var allowedType = !((obj instanceof PdfStream) || !tempArchive || (obj instanceof PdfCatalog));\n        var sigFlag = false;\n        this.registerObject(writer.position, reference);\n        this.doSaveObject(obj, reference, writer);\n    };\n    /**\n     * Performs `real saving` of the save object.\n     * @private\n     */\n    PdfCrossTable.prototype.doSaveObject = function (obj, reference, writer) {\n        var correctPosition = writer.length;\n        writer.write(reference.objNumber.toString());\n        writer.write(Operators.whiteSpace);\n        writer.write(reference.genNumber.toString());\n        writer.write(Operators.whiteSpace);\n        writer.write(Operators.obj);\n        writer.write(Operators.newLine);\n        obj.save(writer);\n        var stream = writer.stream;\n        writer.write(Operators.endObj);\n        writer.write(Operators.newLine);\n    };\n    PdfCrossTable.prototype.registerObject = function (offset, reference, free) {\n        if (typeof free === 'boolean') {\n            // Register the object by its number.\n            this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference, free));\n            this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);\n        }\n        else if (typeof free === 'undefined') {\n            // Register the object by its number.\n            this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference));\n            this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);\n        }\n    };\n    /**\n     * `Dereferences` the specified primitive object.\n     * @private\n     */\n    PdfCrossTable.dereference = function (obj) {\n        var rh = obj;\n        if (rh != null) {\n            obj = rh.object;\n        }\n        return obj;\n    };\n    return PdfCrossTable;\n}());\nexport { PdfCrossTable };\nvar RegisteredObject = /** @class */ (function () {\n    function RegisteredObject(offset, reference, free) {\n        var tempOffset = offset;\n        this.offsetNumber = tempOffset;\n        var tempReference = reference;\n        this.generation = tempReference.genNumber;\n        this.object = tempReference.objNumber;\n        if (typeof free === 'undefined') {\n            this.type = ObjectType.Normal;\n        }\n        else {\n            this.type = ObjectType.Free;\n        }\n    }\n    Object.defineProperty(RegisteredObject.prototype, \"objectNumber\", {\n        //Properties\n        /**\n         * Gets the `object number`.\n         * @private\n         */\n        get: function () {\n            return this.object;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RegisteredObject.prototype, \"offset\", {\n        /**\n         * Gets the `offset`.\n         * @private\n         */\n        get: function () {\n            var result;\n            result = this.offsetNumber;\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RegisteredObject;\n}());\nexport { RegisteredObject };\n"]},"metadata":{},"sourceType":"module"}