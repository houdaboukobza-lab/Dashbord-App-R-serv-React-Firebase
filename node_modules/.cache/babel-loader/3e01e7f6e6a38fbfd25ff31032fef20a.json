{"ast":null,"code":"import { Query, DataManager, Deferred } from '@syncfusion/ej2-data';\n/**\n * data module is used to generate query and dataSource\n */\n\nvar Data =\n/** @class */\nfunction () {\n  /**\n   * Constructor for data module\n   * @private\n   */\n  function Data(dataSource, query) {\n    this.initDataManager(dataSource, query);\n  }\n  /**\n   * The function used to initialize dataManager and query\n   * @return {void}\n   * @private\n   */\n\n\n  Data.prototype.initDataManager = function (dataSource, query) {\n    this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n    this.query = query instanceof Query ? query : new Query();\n  };\n  /**\n   * The function used to generate updated Query from chart model\n   * @return {void}\n   * @private\n   */\n\n\n  Data.prototype.generateQuery = function () {\n    var query = this.query.clone();\n    return query;\n  };\n  /**\n   * The function used to get dataSource by executing given Query\n   * @param  {Query} query - A Query that specifies to generate dataSource\n   * @return {void}\n   * @private\n   */\n\n\n  Data.prototype.getData = function (query) {\n    var _this = this;\n\n    if (this.dataManager.ready) {\n      var deferred_1 = new Deferred();\n      var ready = this.dataManager.ready;\n      ready.then(function (e) {\n        _this.dataManager.executeQuery(query).then(function (result) {\n          deferred_1.resolve(result);\n        });\n      }).catch(function (e) {\n        deferred_1.reject(e);\n      });\n      return deferred_1.promise;\n    } else {\n      return this.dataManager.executeQuery(query);\n    }\n  };\n\n  return Data;\n}();\n\nexport { Data };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-charts/src/common/model/data.js"],"names":["Query","DataManager","Deferred","Data","dataSource","query","initDataManager","prototype","dataManager","generateQuery","clone","getData","_this","ready","deferred_1","then","e","executeQuery","result","resolve","catch","reject","promise"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,sBAA7C;AACA;AACA;AACA;;AACA,IAAIC,IAAI;AAAG;AAAe,YAAY;AAClC;AACJ;AACA;AACA;AACI,WAASA,IAAT,CAAcC,UAAd,EAA0BC,KAA1B,EAAiC;AAC7B,SAAKC,eAAL,CAAqBF,UAArB,EAAiCC,KAAjC;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIF,EAAAA,IAAI,CAACI,SAAL,CAAeD,eAAf,GAAiC,UAAUF,UAAV,EAAsBC,KAAtB,EAA6B;AAC1D,SAAKG,WAAL,GAAmBJ,UAAU,YAAYH,WAAtB,GAAoCG,UAApC,GAAiD,IAAIH,WAAJ,CAAgBG,UAAhB,CAApE;AACA,SAAKC,KAAL,GAAaA,KAAK,YAAYL,KAAjB,GAAyBK,KAAzB,GAAiC,IAAIL,KAAJ,EAA9C;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,IAAI,CAACI,SAAL,CAAeE,aAAf,GAA+B,YAAY;AACvC,QAAIJ,KAAK,GAAG,KAAKA,KAAL,CAAWK,KAAX,EAAZ;AACA,WAAOL,KAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,IAAI,CAACI,SAAL,CAAeI,OAAf,GAAyB,UAAUN,KAAV,EAAiB;AACtC,QAAIO,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAKJ,WAAL,CAAiBK,KAArB,EAA4B;AACxB,UAAIC,UAAU,GAAG,IAAIZ,QAAJ,EAAjB;AACA,UAAIW,KAAK,GAAG,KAAKL,WAAL,CAAiBK,KAA7B;AACAA,MAAAA,KAAK,CAACE,IAAN,CAAW,UAAUC,CAAV,EAAa;AACpBJ,QAAAA,KAAK,CAACJ,WAAN,CAAkBS,YAAlB,CAA+BZ,KAA/B,EAAsCU,IAAtC,CAA2C,UAAUG,MAAV,EAAkB;AACzDJ,UAAAA,UAAU,CAACK,OAAX,CAAmBD,MAAnB;AACH,SAFD;AAGH,OAJD,EAIGE,KAJH,CAIS,UAAUJ,CAAV,EAAa;AAClBF,QAAAA,UAAU,CAACO,MAAX,CAAkBL,CAAlB;AACH,OAND;AAOA,aAAOF,UAAU,CAACQ,OAAlB;AACH,KAXD,MAYK;AACD,aAAO,KAAKd,WAAL,CAAiBS,YAAjB,CAA8BZ,KAA9B,CAAP;AACH;AACJ,GAjBD;;AAkBA,SAAOF,IAAP;AACH,CAnDyB,EAA1B;;AAoDA,SAASA,IAAT","sourcesContent":["import { Query, DataManager, Deferred } from '@syncfusion/ej2-data';\n/**\n * data module is used to generate query and dataSource\n */\nvar Data = /** @class */ (function () {\n    /**\n     * Constructor for data module\n     * @private\n     */\n    function Data(dataSource, query) {\n        this.initDataManager(dataSource, query);\n    }\n    /**\n     * The function used to initialize dataManager and query\n     * @return {void}\n     * @private\n     */\n    Data.prototype.initDataManager = function (dataSource, query) {\n        this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n        this.query = query instanceof Query ? query : new Query();\n    };\n    /**\n     * The function used to generate updated Query from chart model\n     * @return {void}\n     * @private\n     */\n    Data.prototype.generateQuery = function () {\n        var query = this.query.clone();\n        return query;\n    };\n    /**\n     * The function used to get dataSource by executing given Query\n     * @param  {Query} query - A Query that specifies to generate dataSource\n     * @return {void}\n     * @private\n     */\n    Data.prototype.getData = function (query) {\n        var _this = this;\n        if (this.dataManager.ready) {\n            var deferred_1 = new Deferred();\n            var ready = this.dataManager.ready;\n            ready.then(function (e) {\n                _this.dataManager.executeQuery(query).then(function (result) {\n                    deferred_1.resolve(result);\n                });\n            }).catch(function (e) {\n                deferred_1.reject(e);\n            });\n            return deferred_1.promise;\n        }\n        else {\n            return this.dataManager.executeQuery(query);\n        }\n    };\n    return Data;\n}());\nexport { Data };\n"]},"metadata":{},"sourceType":"module"}