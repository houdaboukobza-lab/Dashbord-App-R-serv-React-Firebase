{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { firstToLowerCase } from '../../common/utils/helper';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `SmaIndicator` module is used to render SMA indicator.\n */\n\nvar SmaIndicator =\n/** @class */\nfunction (_super) {\n  __extends(SmaIndicator, _super);\n\n  function SmaIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the predictions based on SMA approach\n   * @private\n   */\n\n\n  SmaIndicator.prototype.initDataSource = function (indicator, chart) {\n    var smaPoints = [];\n    var points = indicator.points;\n\n    if (points && points.length) {\n      //prepare data\n      var validData = points;\n      var field = firstToLowerCase(indicator.field);\n      var xField = 'x';\n      var signalSeries = indicator.targetSeries[0];\n\n      if (validData && validData.length && validData.length >= indicator.period) {\n        //find initial average\n        var average = 0;\n        var sum = 0;\n\n        for (var i = 0; i < indicator.period; i++) {\n          sum += validData[i][field];\n        }\n\n        average = sum / indicator.period;\n        smaPoints.push(this.getDataPoint(validData[indicator.period - 1][xField], average, validData[indicator.period - 1], signalSeries, smaPoints.length));\n        var index = indicator.period;\n\n        while (index < validData.length) {\n          sum -= validData[index - indicator.period][field];\n          sum += validData[index][field];\n          average = sum / indicator.period;\n          smaPoints.push(this.getDataPoint(validData[index][xField], average, validData[index], signalSeries, smaPoints.length));\n          index++;\n        }\n      }\n\n      this.setSeriesRange(smaPoints, indicator);\n    }\n  };\n  /**\n   * To destroy the SMA indicator\n   * @return {void}\n   * @private\n   */\n\n\n  SmaIndicator.prototype.destroy = function (chart) {\n    /**\n     * Destroys the SMA indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  SmaIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'SmaIndicator';\n  };\n\n  return SmaIndicator;\n}(TechnicalAnalysis);\n\nexport { SmaIndicator };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/sma-indicator.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","firstToLowerCase","TechnicalAnalysis","SmaIndicator","_super","apply","arguments","initDataSource","indicator","chart","smaPoints","points","length","validData","field","xField","signalSeries","targetSeries","period","average","sum","i","push","getDataPoint","index","setSeriesRange","destroy","getModuleName"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { firstToLowerCase } from '../../common/utils/helper';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `SmaIndicator` module is used to render SMA indicator.\n */\nvar SmaIndicator = /** @class */ (function (_super) {\n    __extends(SmaIndicator, _super);\n    function SmaIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the predictions based on SMA approach\n     * @private\n     */\n    SmaIndicator.prototype.initDataSource = function (indicator, chart) {\n        var smaPoints = [];\n        var points = indicator.points;\n        if (points && points.length) {\n            //prepare data\n            var validData = points;\n            var field = firstToLowerCase(indicator.field);\n            var xField = 'x';\n            var signalSeries = indicator.targetSeries[0];\n            if (validData && validData.length && validData.length >= indicator.period) {\n                //find initial average\n                var average = 0;\n                var sum = 0;\n                for (var i = 0; i < indicator.period; i++) {\n                    sum += validData[i][field];\n                }\n                average = sum / indicator.period;\n                smaPoints.push(this.getDataPoint(validData[indicator.period - 1][xField], average, validData[indicator.period - 1], signalSeries, smaPoints.length));\n                var index = indicator.period;\n                while (index < validData.length) {\n                    sum -= validData[index - indicator.period][field];\n                    sum += validData[index][field];\n                    average = sum / indicator.period;\n                    smaPoints.push(this.getDataPoint(validData[index][xField], average, validData[index], signalSeries, smaPoints.length));\n                    index++;\n                }\n            }\n            this.setSeriesRange(smaPoints, indicator);\n        }\n    };\n    /**\n     * To destroy the SMA indicator\n     * @return {void}\n     * @private\n     */\n    SmaIndicator.prototype.destroy = function (chart) {\n        /**\n         * Destroys the SMA indicator\n         */\n    };\n    /**\n     * Get module name.\n     */\n    SmaIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series\n         */\n        return 'SmaIndicator';\n    };\n    return SmaIndicator;\n}(TechnicalAnalysis));\nexport { SmaIndicator };\n"]},"metadata":{},"sourceType":"module"}