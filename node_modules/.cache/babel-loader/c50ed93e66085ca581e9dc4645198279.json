{"ast":null,"code":"/**\n * To import utils\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n\nvar SvgRenderer =\n/** @class */\nfunction () {\n  /* End-Properties */\n  function SvgRenderer(rootID) {\n    //Internal Variables \n    this.svgLink = 'http://www.w3.org/2000/svg';\n    this.rootId = rootID;\n  } // method to get the attributes value\n\n  /* tslint:disable */\n\n\n  SvgRenderer.prototype.getOptionValue = function (options, key) {\n    return options[key];\n  };\n  /* tslint:enable */\n\n  /**\n   * To create a Html5 SVG element\n   * @param {SVGAttributes} options - Options to create SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createSvg = function (options) {\n    if (isNullOrUndefined(options.id)) {\n      options.id = this.rootId + '_svg';\n    }\n\n    this.svgObj = document.getElementById(options.id);\n\n    if (isNullOrUndefined(document.getElementById(options.id))) {\n      this.svgObj = document.createElementNS(this.svgLink, 'svg');\n    }\n\n    this.svgObj = this.setElementAttributes(options, this.svgObj);\n    this.setSVGSize(options.width, options.height);\n    return this.svgObj;\n  }; // method to set the height and width for the SVG element\n\n\n  SvgRenderer.prototype.setSVGSize = function (width, height) {\n    var element = document.getElementById(this.rootId);\n    var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\n\n    if (isNullOrUndefined(this.width) || this.width <= 0) {\n      this.svgObj.setAttribute('width', width ? width.toString() : size.width.toString());\n    } else {\n      this.svgObj.setAttribute('width', this.width.toString());\n    }\n\n    if (isNullOrUndefined(this.height) || this.height <= 0) {\n      this.svgObj.setAttribute('height', height ? height.toString() : '450');\n    } else {\n      this.svgObj.setAttribute('height', this.height.toString());\n    }\n  };\n  /**\n   * To draw a path\n   * @param {PathAttributes} options - Options to draw a path in SVG\n   * @param {Int32Array} canvasTranslate - Used as dummy variable for canvas rendering\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawPath = function (options, canvasTranslate) {\n    var path = document.getElementById(options.id);\n\n    if (path === null) {\n      path = document.createElementNS(this.svgLink, 'path');\n    }\n\n    path = this.setElementAttributes(options, path);\n    return path;\n  };\n  /**\n   * To draw a line\n   * @param {LineAttributes} options - Options to draw a line in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawLine = function (options) {\n    var line = document.getElementById(options.id);\n\n    if (line === null) {\n      line = document.createElementNS(this.svgLink, 'line');\n    }\n\n    line = this.setElementAttributes(options, line);\n    return line;\n  };\n  /**\n   * To draw a rectangle\n   * @param {BaseAttibutes} options - Required options to draw a rectangle in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawRectangle = function (options, canvasTranslate) {\n    var rectangle = document.getElementById(options.id);\n\n    if (rectangle === null) {\n      rectangle = document.createElementNS(this.svgLink, 'rect');\n    }\n\n    rectangle = this.setElementAttributes(options, rectangle);\n    return rectangle;\n  };\n  /**\n   * To draw a circle\n   * @param {CircleAttributes} options - Required options to draw a circle in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawCircle = function (options) {\n    var circle = document.getElementById(options.id);\n\n    if (circle === null) {\n      circle = document.createElementNS(this.svgLink, 'circle');\n    }\n\n    circle = this.setElementAttributes(options, circle);\n    return circle;\n  };\n  /**\n   * To draw a polyline\n   * @param {PolylineAttributes} options - Options required to draw a polyline\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawPolyline = function (options) {\n    var polyline = document.getElementById(options.id);\n\n    if (polyline === null) {\n      polyline = document.createElementNS(this.svgLink, 'polyline');\n    }\n\n    polyline = this.setElementAttributes(options, polyline);\n    return polyline;\n  };\n  /**\n   * To draw an ellipse\n   * @param {EllipseAttributes} options - Options required to draw an ellipse\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawEllipse = function (options) {\n    var ellipse = document.getElementById(options.id);\n\n    if (ellipse === null) {\n      ellipse = document.createElementNS(this.svgLink, 'ellipse');\n    }\n\n    ellipse = this.setElementAttributes(options, ellipse);\n    return ellipse;\n  };\n  /**\n   * To draw a polygon\n   * @param {PolylineAttributes} options - Options needed to draw a polygon in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawPolygon = function (options) {\n    var polygon = document.getElementById(options.id);\n\n    if (polygon === null) {\n      polygon = document.createElementNS(this.svgLink, 'polygon');\n    }\n\n    polygon = this.setElementAttributes(options, polygon);\n    return polygon;\n  };\n  /**\n   * To draw an image\n   * @param {ImageAttributes} options - Required options to draw an image in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawImage = function (options) {\n    var img = document.createElementNS(this.svgLink, 'image');\n    img.setAttributeNS(null, 'height', options.height.toString());\n    img.setAttributeNS(null, 'width', options.width.toString());\n    img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', options.href);\n    img.setAttributeNS(null, 'x', options.x.toString());\n    img.setAttributeNS(null, 'y', options.y.toString());\n    img.setAttributeNS(null, 'id', options.id);\n    img.setAttributeNS(null, 'visibility', options.visibility);\n\n    if (!isNullOrUndefined(this.getOptionValue(options, 'clip-path'))) {\n      img.setAttributeNS(null, 'clip-path', this.getOptionValue(options, 'clip-path'));\n    }\n\n    if (!isNullOrUndefined(options.preserveAspectRatio)) {\n      img.setAttributeNS(null, 'preserveAspectRatio', options.preserveAspectRatio);\n    }\n\n    return img;\n  };\n  /**\n   * To draw a text\n   * @param {TextAttributes} options - Options needed to draw a text in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createText = function (options, label, transX, transY, dy, isTSpan) {\n    var text = document.createElementNS(this.svgLink, 'text');\n    text = this.setElementAttributes(options, text);\n\n    if (!isNullOrUndefined(label)) {\n      text.textContent = label;\n    }\n\n    return text;\n  };\n  /**\n   * To create a tSpan\n   * @param {TextAttributes} options - Options to create tSpan\n   * @param {string} label - The text content which is to be rendered in the tSpan\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createTSpan = function (options, label) {\n    var tSpan = document.createElementNS(this.svgLink, 'tspan');\n    tSpan = this.setElementAttributes(options, tSpan);\n\n    if (!isNullOrUndefined(label)) {\n      tSpan.textContent = label;\n    }\n\n    return tSpan;\n  };\n  /**\n   * To create a title\n   * @param {string} text - The text content which is to be rendered in the title\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createTitle = function (text) {\n    var title = document.createElementNS(this.svgLink, 'title');\n    title.textContent = text;\n    return title;\n  };\n  /**\n   * To create defs element in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createDefs = function () {\n    var defs = document.createElementNS(this.svgLink, 'defs');\n    return defs;\n  };\n  /**\n   * To create clip path in SVG\n   * @param {BaseAttibutes} options - Options needed to create clip path\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createClipPath = function (options) {\n    var clipPath = document.createElementNS(this.svgLink, 'clipPath');\n    clipPath = this.setElementAttributes(options, clipPath);\n    return clipPath;\n  };\n  /**\n   * To create foreign object in SVG\n   * @param {BaseAttibutes} options - Options needed to create foreign object\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createForeignObject = function (options) {\n    var foreignObject = document.createElementNS(this.svgLink, 'foreignObject');\n    foreignObject = this.setElementAttributes(options, foreignObject);\n    return foreignObject;\n  };\n  /**\n   * To create group element in SVG\n   * @param {BaseAttibutes} options - Options needed to create group\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createGroup = function (options) {\n    var group = document.createElementNS(this.svgLink, 'g');\n    group = this.setElementAttributes(options, group);\n    return group;\n  };\n  /**\n   * To create pattern in SVG\n   * @param {PatternAttributes} options - Required options to create pattern in SVG\n   * @param {string} type - Specifies the name of the pattern\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createPattern = function (options, element) {\n    var pattern = document.createElementNS(this.svgLink, element);\n    pattern = this.setElementAttributes(options, pattern);\n    return pattern;\n  };\n  /**\n   * To create radial gradient in SVG\n   * @param {string[]} colors - Specifies the colors required to create radial gradient\n   * @param {string[]} colorStop - Specifies the colorstop required to create radial gradient\n   * @param {string} name - Specifies the name of the gradient\n   * @param {RadialGradient} options - value for radial gradient\n   * @return {string}\n   */\n\n\n  SvgRenderer.prototype.createRadialGradient = function (colors, name, options) {\n    var colorName;\n\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      var newOptions = {\n        'id': this.rootId + '_' + name + 'radialGradient',\n        'cx': options.cx + '%',\n        'cy': options.cy + '%',\n        'r': options.r + '%',\n        'fx': options.fx + '%',\n        'fy': options.fy + '%'\n      };\n      this.drawGradient('radialGradient', newOptions, colors);\n      colorName = 'url(#' + this.rootId + '_' + name + 'radialGradient)';\n    } else {\n      colorName = colors[0].color.toString();\n    }\n\n    return colorName;\n  };\n  /**\n   * To create linear gradient in SVG\n   * @param {string[]} colors - Array of string specifies the values for color\n   * @param {string[]} colors - Array of string specifies the values for colorStop\n   * @param {string} name - Specifies the name of the gradient\n   * @param {LinearGradient} options - Specifies the options for gradient\n   * @return {string}\n   */\n\n\n  SvgRenderer.prototype.createLinearGradient = function (colors, name, options) {\n    var colorName;\n\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      var newOptions = {\n        'id': this.rootId + '_' + name + 'linearGradient',\n        'x1': options.x1 + '%',\n        'y1': options.y1 + '%',\n        'x2': options.x2 + '%',\n        'y2': options.y2 + '%'\n      };\n      this.drawGradient('linearGradient', newOptions, colors);\n      colorName = 'url(#' + this.rootId + '_' + name + 'linearGradient)';\n    } else {\n      colorName = colors[0].color.toString();\n    }\n\n    return colorName;\n  };\n  /**\n   * To render the gradient element in SVG\n   * @param {string} gradientType - Specifies the type of the gradient\n   * @param {RadialGradient | LinearGradient} options - Options required to render a gradient\n   * @param {string[]} colors - Array of string specifies the values for color\n   * @param {string[]} colorStop - Array of string specifies the values for colorStop\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawGradient = function (gradientType, options, colors) {\n    var defs = this.createDefs();\n    var gradient = document.createElementNS(this.svgLink, gradientType);\n    gradient = this.setElementAttributes(options, gradient);\n\n    for (var i = 0; i < colors.length; i++) {\n      var stop_1 = document.createElementNS(this.svgLink, 'stop');\n      stop_1.setAttribute('offset', colors[i].colorStop);\n      stop_1.setAttribute('stop-color', colors[i].color);\n      stop_1.setAttribute('stop-opacity', colors[i].opacity ? colors[i].opacity : '1');\n\n      if (!isNullOrUndefined(colors[i].style)) {\n        stop_1.setAttribute('style', colors[i].style);\n      }\n\n      gradient.appendChild(stop_1);\n    }\n\n    defs.appendChild(gradient);\n    return defs;\n  };\n  /**\n   * To render a clip path\n   * @param {BaseAttibutes} options - Options required to render a clip path\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawClipPath = function (options) {\n    var defs = this.createDefs();\n    var clipPath = this.createClipPath({\n      'id': options.id\n    });\n    options.id = options.id + '_Rect';\n    var rect = this.drawRectangle(options);\n    clipPath.appendChild(rect);\n    defs.appendChild(clipPath);\n    return defs;\n  };\n  /**\n   * To create circular clip path in SVG\n   * @param {CircleAttributes} options - Options required to create circular clip path\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawCircularClipPath = function (options) {\n    var defs = this.createDefs();\n    var clipPath = this.createClipPath({\n      'id': options.id\n    });\n    options.id = options.id + '_Circle';\n    var circle = this.drawCircle(options);\n    clipPath.appendChild(circle);\n    defs.appendChild(clipPath);\n    return defs;\n  };\n  /**\n   * To set the attributes to the element\n   * @param {SVGCanvasAttributes} options - Attributes to set for the element\n   * @param {Element} element - The element to which the attributes need to be set\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.setElementAttributes = function (options, element) {\n    var keys = Object.keys(options);\n\n    for (var i = 0; i < keys.length; i++) {\n      element.setAttribute(keys[i], options[keys[i]]);\n    }\n\n    return element;\n  };\n  /**\n   * To create a Html5 canvas element\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   * @param {BaseAttibutes} options - Options to create canvas\n   * @return {HTMLCanvasElement}\n   */\n\n\n  SvgRenderer.prototype.createCanvas = function (options) {\n    return null;\n  };\n\n  return SvgRenderer;\n}();\n\nexport { SvgRenderer };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-svg-base/src/svg-render/svg-renderer.js"],"names":["isNullOrUndefined","SvgRenderer","rootID","svgLink","rootId","prototype","getOptionValue","options","key","createSvg","id","svgObj","document","getElementById","createElementNS","setElementAttributes","setSVGSize","width","height","element","size","getBoundingClientRect","setAttribute","toString","drawPath","canvasTranslate","path","drawLine","line","drawRectangle","rectangle","drawCircle","circle","drawPolyline","polyline","drawEllipse","ellipse","drawPolygon","polygon","drawImage","img","setAttributeNS","href","x","y","visibility","preserveAspectRatio","createText","label","transX","transY","dy","isTSpan","text","textContent","createTSpan","tSpan","createTitle","title","createDefs","defs","createClipPath","clipPath","createForeignObject","foreignObject","createGroup","group","createPattern","pattern","createRadialGradient","colors","name","colorName","colorStop","newOptions","cx","cy","r","fx","fy","drawGradient","color","createLinearGradient","x1","y1","x2","y2","gradientType","gradient","i","length","stop_1","opacity","style","appendChild","drawClipPath","rect","drawCircularClipPath","keys","Object","createCanvas"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,iBAAT,QAAmC,sBAAnC;;AACA,IAAIC,WAAW;AAAG;AAAe,YAAY;AACzC;AACA,WAASA,WAAT,CAAqBC,MAArB,EAA6B;AACzB;AACA,SAAKC,OAAL,GAAe,4BAAf;AACA,SAAKC,MAAL,GAAcF,MAAd;AACH,GANwC,CAOzC;;AACA;;;AACAD,EAAAA,WAAW,CAACI,SAAZ,CAAsBC,cAAtB,GAAuC,UAAUC,OAAV,EAAmBC,GAAnB,EAAwB;AAC3D,WAAOD,OAAO,CAACC,GAAD,CAAd;AACH,GAFD;AAEG;;AACH;AACJ;AACA;AACA;AACA;;;AACIP,EAAAA,WAAW,CAACI,SAAZ,CAAsBI,SAAtB,GAAkC,UAAUF,OAAV,EAAmB;AACjD,QAAIP,iBAAiB,CAACO,OAAO,CAACG,EAAT,CAArB,EAAmC;AAC/BH,MAAAA,OAAO,CAACG,EAAR,GAAa,KAAKN,MAAL,GAAc,MAA3B;AACH;;AACD,SAAKO,MAAL,GAAcC,QAAQ,CAACC,cAAT,CAAwBN,OAAO,CAACG,EAAhC,CAAd;;AACA,QAAIV,iBAAiB,CAACY,QAAQ,CAACC,cAAT,CAAwBN,OAAO,CAACG,EAAhC,CAAD,CAArB,EAA4D;AACxD,WAAKC,MAAL,GAAcC,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,KAAvC,CAAd;AACH;;AACD,SAAKQ,MAAL,GAAc,KAAKI,oBAAL,CAA0BR,OAA1B,EAAmC,KAAKI,MAAxC,CAAd;AACA,SAAKK,UAAL,CAAgBT,OAAO,CAACU,KAAxB,EAA+BV,OAAO,CAACW,MAAvC;AACA,WAAO,KAAKP,MAAZ;AACH,GAXD,CAjByC,CA6BzC;;;AACAV,EAAAA,WAAW,CAACI,SAAZ,CAAsBW,UAAtB,GAAmC,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACxD,QAAIC,OAAO,GAAGP,QAAQ,CAACC,cAAT,CAAwB,KAAKT,MAA7B,CAAd;AACA,QAAIgB,IAAI,GAAG,CAACpB,iBAAiB,CAACmB,OAAD,CAAlB,GAA8BA,OAAO,CAACE,qBAAR,EAA9B,GAAgE,IAA3E;;AACA,QAAIrB,iBAAiB,CAAC,KAAKiB,KAAN,CAAjB,IAAiC,KAAKA,KAAL,IAAc,CAAnD,EAAsD;AAClD,WAAKN,MAAL,CAAYW,YAAZ,CAAyB,OAAzB,EAAkCL,KAAK,GAAGA,KAAK,CAACM,QAAN,EAAH,GAAsBH,IAAI,CAACH,KAAL,CAAWM,QAAX,EAA7D;AACH,KAFD,MAGK;AACD,WAAKZ,MAAL,CAAYW,YAAZ,CAAyB,OAAzB,EAAkC,KAAKL,KAAL,CAAWM,QAAX,EAAlC;AACH;;AACD,QAAIvB,iBAAiB,CAAC,KAAKkB,MAAN,CAAjB,IAAkC,KAAKA,MAAL,IAAe,CAArD,EAAwD;AACpD,WAAKP,MAAL,CAAYW,YAAZ,CAAyB,QAAzB,EAAmCJ,MAAM,GAAGA,MAAM,CAACK,QAAP,EAAH,GAAuB,KAAhE;AACH,KAFD,MAGK;AACD,WAAKZ,MAAL,CAAYW,YAAZ,CAAyB,QAAzB,EAAmC,KAAKJ,MAAL,CAAYK,QAAZ,EAAnC;AACH;AACJ,GAfD;AAgBA;AACJ;AACA;AACA;AACA;AACA;;;AACItB,EAAAA,WAAW,CAACI,SAAZ,CAAsBmB,QAAtB,GAAiC,UAAUjB,OAAV,EAAmBkB,eAAnB,EAAoC;AACjE,QAAIC,IAAI,GAAGd,QAAQ,CAACC,cAAT,CAAwBN,OAAO,CAACG,EAAhC,CAAX;;AACA,QAAIgB,IAAI,KAAK,IAAb,EAAmB;AACfA,MAAAA,IAAI,GAAGd,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,MAAvC,CAAP;AACH;;AACDuB,IAAAA,IAAI,GAAG,KAAKX,oBAAL,CAA0BR,OAA1B,EAAmCmB,IAAnC,CAAP;AACA,WAAOA,IAAP;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;;;AACIzB,EAAAA,WAAW,CAACI,SAAZ,CAAsBsB,QAAtB,GAAiC,UAAUpB,OAAV,EAAmB;AAChD,QAAIqB,IAAI,GAAGhB,QAAQ,CAACC,cAAT,CAAwBN,OAAO,CAACG,EAAhC,CAAX;;AACA,QAAIkB,IAAI,KAAK,IAAb,EAAmB;AACfA,MAAAA,IAAI,GAAGhB,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,MAAvC,CAAP;AACH;;AACDyB,IAAAA,IAAI,GAAG,KAAKb,oBAAL,CAA0BR,OAA1B,EAAmCqB,IAAnC,CAAP;AACA,WAAOA,IAAP;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;;;AACI3B,EAAAA,WAAW,CAACI,SAAZ,CAAsBwB,aAAtB,GAAsC,UAAUtB,OAAV,EAAmBkB,eAAnB,EAAoC;AACtE,QAAIK,SAAS,GAAGlB,QAAQ,CAACC,cAAT,CAAwBN,OAAO,CAACG,EAAhC,CAAhB;;AACA,QAAIoB,SAAS,KAAK,IAAlB,EAAwB;AACpBA,MAAAA,SAAS,GAAGlB,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,MAAvC,CAAZ;AACH;;AACD2B,IAAAA,SAAS,GAAG,KAAKf,oBAAL,CAA0BR,OAA1B,EAAmCuB,SAAnC,CAAZ;AACA,WAAOA,SAAP;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;;;AACI7B,EAAAA,WAAW,CAACI,SAAZ,CAAsB0B,UAAtB,GAAmC,UAAUxB,OAAV,EAAmB;AAClD,QAAIyB,MAAM,GAAGpB,QAAQ,CAACC,cAAT,CAAwBN,OAAO,CAACG,EAAhC,CAAb;;AACA,QAAIsB,MAAM,KAAK,IAAf,EAAqB;AACjBA,MAAAA,MAAM,GAAGpB,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,QAAvC,CAAT;AACH;;AACD6B,IAAAA,MAAM,GAAG,KAAKjB,oBAAL,CAA0BR,OAA1B,EAAmCyB,MAAnC,CAAT;AACA,WAAOA,MAAP;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;;;AACI/B,EAAAA,WAAW,CAACI,SAAZ,CAAsB4B,YAAtB,GAAqC,UAAU1B,OAAV,EAAmB;AACpD,QAAI2B,QAAQ,GAAGtB,QAAQ,CAACC,cAAT,CAAwBN,OAAO,CAACG,EAAhC,CAAf;;AACA,QAAIwB,QAAQ,KAAK,IAAjB,EAAuB;AACnBA,MAAAA,QAAQ,GAAGtB,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,UAAvC,CAAX;AACH;;AACD+B,IAAAA,QAAQ,GAAG,KAAKnB,oBAAL,CAA0BR,OAA1B,EAAmC2B,QAAnC,CAAX;AACA,WAAOA,QAAP;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;;;AACIjC,EAAAA,WAAW,CAACI,SAAZ,CAAsB8B,WAAtB,GAAoC,UAAU5B,OAAV,EAAmB;AACnD,QAAI6B,OAAO,GAAGxB,QAAQ,CAACC,cAAT,CAAwBN,OAAO,CAACG,EAAhC,CAAd;;AACA,QAAI0B,OAAO,KAAK,IAAhB,EAAsB;AAClBA,MAAAA,OAAO,GAAGxB,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,SAAvC,CAAV;AACH;;AACDiC,IAAAA,OAAO,GAAG,KAAKrB,oBAAL,CAA0BR,OAA1B,EAAmC6B,OAAnC,CAAV;AACA,WAAOA,OAAP;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;;;AACInC,EAAAA,WAAW,CAACI,SAAZ,CAAsBgC,WAAtB,GAAoC,UAAU9B,OAAV,EAAmB;AACnD,QAAI+B,OAAO,GAAG1B,QAAQ,CAACC,cAAT,CAAwBN,OAAO,CAACG,EAAhC,CAAd;;AACA,QAAI4B,OAAO,KAAK,IAAhB,EAAsB;AAClBA,MAAAA,OAAO,GAAG1B,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,SAAvC,CAAV;AACH;;AACDmC,IAAAA,OAAO,GAAG,KAAKvB,oBAAL,CAA0BR,OAA1B,EAAmC+B,OAAnC,CAAV;AACA,WAAOA,OAAP;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;;;AACIrC,EAAAA,WAAW,CAACI,SAAZ,CAAsBkC,SAAtB,GAAkC,UAAUhC,OAAV,EAAmB;AACjD,QAAIiC,GAAG,GAAG5B,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,OAAvC,CAAV;AACAqC,IAAAA,GAAG,CAACC,cAAJ,CAAmB,IAAnB,EAAyB,QAAzB,EAAmClC,OAAO,CAACW,MAAR,CAAeK,QAAf,EAAnC;AACAiB,IAAAA,GAAG,CAACC,cAAJ,CAAmB,IAAnB,EAAyB,OAAzB,EAAkClC,OAAO,CAACU,KAAR,CAAcM,QAAd,EAAlC;AACAiB,IAAAA,GAAG,CAACC,cAAJ,CAAmB,8BAAnB,EAAmD,MAAnD,EAA2DlC,OAAO,CAACmC,IAAnE;AACAF,IAAAA,GAAG,CAACC,cAAJ,CAAmB,IAAnB,EAAyB,GAAzB,EAA8BlC,OAAO,CAACoC,CAAR,CAAUpB,QAAV,EAA9B;AACAiB,IAAAA,GAAG,CAACC,cAAJ,CAAmB,IAAnB,EAAyB,GAAzB,EAA8BlC,OAAO,CAACqC,CAAR,CAAUrB,QAAV,EAA9B;AACAiB,IAAAA,GAAG,CAACC,cAAJ,CAAmB,IAAnB,EAAyB,IAAzB,EAA+BlC,OAAO,CAACG,EAAvC;AACA8B,IAAAA,GAAG,CAACC,cAAJ,CAAmB,IAAnB,EAAyB,YAAzB,EAAuClC,OAAO,CAACsC,UAA/C;;AACA,QAAI,CAAC7C,iBAAiB,CAAC,KAAKM,cAAL,CAAoBC,OAApB,EAA6B,WAA7B,CAAD,CAAtB,EAAmE;AAC/DiC,MAAAA,GAAG,CAACC,cAAJ,CAAmB,IAAnB,EAAyB,WAAzB,EAAsC,KAAKnC,cAAL,CAAoBC,OAApB,EAA6B,WAA7B,CAAtC;AACH;;AACD,QAAI,CAACP,iBAAiB,CAACO,OAAO,CAACuC,mBAAT,CAAtB,EAAqD;AACjDN,MAAAA,GAAG,CAACC,cAAJ,CAAmB,IAAnB,EAAyB,qBAAzB,EAAgDlC,OAAO,CAACuC,mBAAxD;AACH;;AACD,WAAON,GAAP;AACH,GAhBD;AAiBA;AACJ;AACA;AACA;AACA;;;AACIvC,EAAAA,WAAW,CAACI,SAAZ,CAAsB0C,UAAtB,GAAmC,UAAUxC,OAAV,EAAmByC,KAAnB,EAA0BC,MAA1B,EAAkCC,MAAlC,EAA0CC,EAA1C,EAA8CC,OAA9C,EAAuD;AACtF,QAAIC,IAAI,GAAGzC,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,MAAvC,CAAX;AACAkD,IAAAA,IAAI,GAAG,KAAKtC,oBAAL,CAA0BR,OAA1B,EAAmC8C,IAAnC,CAAP;;AACA,QAAI,CAACrD,iBAAiB,CAACgD,KAAD,CAAtB,EAA+B;AAC3BK,MAAAA,IAAI,CAACC,WAAL,GAAmBN,KAAnB;AACH;;AACD,WAAOK,IAAP;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACIpD,EAAAA,WAAW,CAACI,SAAZ,CAAsBkD,WAAtB,GAAoC,UAAUhD,OAAV,EAAmByC,KAAnB,EAA0B;AAC1D,QAAIQ,KAAK,GAAG5C,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,OAAvC,CAAZ;AACAqD,IAAAA,KAAK,GAAG,KAAKzC,oBAAL,CAA0BR,OAA1B,EAAmCiD,KAAnC,CAAR;;AACA,QAAI,CAACxD,iBAAiB,CAACgD,KAAD,CAAtB,EAA+B;AAC3BQ,MAAAA,KAAK,CAACF,WAAN,GAAoBN,KAApB;AACH;;AACD,WAAOQ,KAAP;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;;;AACIvD,EAAAA,WAAW,CAACI,SAAZ,CAAsBoD,WAAtB,GAAoC,UAAUJ,IAAV,EAAgB;AAChD,QAAIK,KAAK,GAAG9C,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,OAAvC,CAAZ;AACAuD,IAAAA,KAAK,CAACJ,WAAN,GAAoBD,IAApB;AACA,WAAOK,KAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;;;AACIzD,EAAAA,WAAW,CAACI,SAAZ,CAAsBsD,UAAtB,GAAmC,YAAY;AAC3C,QAAIC,IAAI,GAAGhD,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,MAAvC,CAAX;AACA,WAAOyD,IAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;;;AACI3D,EAAAA,WAAW,CAACI,SAAZ,CAAsBwD,cAAtB,GAAuC,UAAUtD,OAAV,EAAmB;AACtD,QAAIuD,QAAQ,GAAGlD,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,UAAvC,CAAf;AACA2D,IAAAA,QAAQ,GAAG,KAAK/C,oBAAL,CAA0BR,OAA1B,EAAmCuD,QAAnC,CAAX;AACA,WAAOA,QAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;;;AACI7D,EAAAA,WAAW,CAACI,SAAZ,CAAsB0D,mBAAtB,GAA4C,UAAUxD,OAAV,EAAmB;AAC3D,QAAIyD,aAAa,GAAGpD,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,eAAvC,CAApB;AACA6D,IAAAA,aAAa,GAAG,KAAKjD,oBAAL,CAA0BR,OAA1B,EAAmCyD,aAAnC,CAAhB;AACA,WAAOA,aAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;;;AACI/D,EAAAA,WAAW,CAACI,SAAZ,CAAsB4D,WAAtB,GAAoC,UAAU1D,OAAV,EAAmB;AACnD,QAAI2D,KAAK,GAAGtD,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,GAAvC,CAAZ;AACA+D,IAAAA,KAAK,GAAG,KAAKnD,oBAAL,CAA0BR,OAA1B,EAAmC2D,KAAnC,CAAR;AACA,WAAOA,KAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;;;AACIjE,EAAAA,WAAW,CAACI,SAAZ,CAAsB8D,aAAtB,GAAsC,UAAU5D,OAAV,EAAmBY,OAAnB,EAA4B;AAC9D,QAAIiD,OAAO,GAAGxD,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuCgB,OAAvC,CAAd;AACAiD,IAAAA,OAAO,GAAG,KAAKrD,oBAAL,CAA0BR,OAA1B,EAAmC6D,OAAnC,CAAV;AACA,WAAOA,OAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInE,EAAAA,WAAW,CAACI,SAAZ,CAAsBgE,oBAAtB,GAA6C,UAAUC,MAAV,EAAkBC,IAAlB,EAAwBhE,OAAxB,EAAiC;AAC1E,QAAIiE,SAAJ;;AACA,QAAI,CAACxE,iBAAiB,CAACsE,MAAM,CAAC,CAAD,CAAN,CAAUG,SAAX,CAAtB,EAA6C;AACzC,UAAIC,UAAU,GAAG;AACb,cAAM,KAAKtE,MAAL,GAAc,GAAd,GAAoBmE,IAApB,GAA2B,gBADpB;AAEb,cAAMhE,OAAO,CAACoE,EAAR,GAAa,GAFN;AAGb,cAAMpE,OAAO,CAACqE,EAAR,GAAa,GAHN;AAIb,aAAKrE,OAAO,CAACsE,CAAR,GAAY,GAJJ;AAKb,cAAMtE,OAAO,CAACuE,EAAR,GAAa,GALN;AAMb,cAAMvE,OAAO,CAACwE,EAAR,GAAa;AANN,OAAjB;AAQA,WAAKC,YAAL,CAAkB,gBAAlB,EAAoCN,UAApC,EAAgDJ,MAAhD;AACAE,MAAAA,SAAS,GAAG,UAAU,KAAKpE,MAAf,GAAwB,GAAxB,GAA8BmE,IAA9B,GAAqC,iBAAjD;AACH,KAXD,MAYK;AACDC,MAAAA,SAAS,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUW,KAAV,CAAgB1D,QAAhB,EAAZ;AACH;;AACD,WAAOiD,SAAP;AACH,GAlBD;AAmBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIvE,EAAAA,WAAW,CAACI,SAAZ,CAAsB6E,oBAAtB,GAA6C,UAAUZ,MAAV,EAAkBC,IAAlB,EAAwBhE,OAAxB,EAAiC;AAC1E,QAAIiE,SAAJ;;AACA,QAAI,CAACxE,iBAAiB,CAACsE,MAAM,CAAC,CAAD,CAAN,CAAUG,SAAX,CAAtB,EAA6C;AACzC,UAAIC,UAAU,GAAG;AACb,cAAM,KAAKtE,MAAL,GAAc,GAAd,GAAoBmE,IAApB,GAA2B,gBADpB;AAEb,cAAMhE,OAAO,CAAC4E,EAAR,GAAa,GAFN;AAGb,cAAM5E,OAAO,CAAC6E,EAAR,GAAa,GAHN;AAIb,cAAM7E,OAAO,CAAC8E,EAAR,GAAa,GAJN;AAKb,cAAM9E,OAAO,CAAC+E,EAAR,GAAa;AALN,OAAjB;AAOA,WAAKN,YAAL,CAAkB,gBAAlB,EAAoCN,UAApC,EAAgDJ,MAAhD;AACAE,MAAAA,SAAS,GAAG,UAAU,KAAKpE,MAAf,GAAwB,GAAxB,GAA8BmE,IAA9B,GAAqC,iBAAjD;AACH,KAVD,MAWK;AACDC,MAAAA,SAAS,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUW,KAAV,CAAgB1D,QAAhB,EAAZ;AACH;;AACD,WAAOiD,SAAP;AACH,GAjBD;AAkBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIvE,EAAAA,WAAW,CAACI,SAAZ,CAAsB2E,YAAtB,GAAqC,UAAUO,YAAV,EAAwBhF,OAAxB,EAAiC+D,MAAjC,EAAyC;AAC1E,QAAIV,IAAI,GAAG,KAAKD,UAAL,EAAX;AACA,QAAI6B,QAAQ,GAAG5E,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuCoF,YAAvC,CAAf;AACAC,IAAAA,QAAQ,GAAG,KAAKzE,oBAAL,CAA0BR,OAA1B,EAAmCiF,QAAnC,CAAX;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,MAAM,CAACoB,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,UAAIE,MAAM,GAAG/E,QAAQ,CAACE,eAAT,CAAyB,KAAKX,OAA9B,EAAuC,MAAvC,CAAb;AACAwF,MAAAA,MAAM,CAACrE,YAAP,CAAoB,QAApB,EAA8BgD,MAAM,CAACmB,CAAD,CAAN,CAAUhB,SAAxC;AACAkB,MAAAA,MAAM,CAACrE,YAAP,CAAoB,YAApB,EAAkCgD,MAAM,CAACmB,CAAD,CAAN,CAAUR,KAA5C;AACAU,MAAAA,MAAM,CAACrE,YAAP,CAAoB,cAApB,EAAoCgD,MAAM,CAACmB,CAAD,CAAN,CAAUG,OAAV,GAAqBtB,MAAM,CAACmB,CAAD,CAAN,CAAUG,OAA/B,GAA0C,GAA9E;;AACA,UAAI,CAAC5F,iBAAiB,CAACsE,MAAM,CAACmB,CAAD,CAAN,CAAUI,KAAX,CAAtB,EAAyC;AACrCF,QAAAA,MAAM,CAACrE,YAAP,CAAoB,OAApB,EAA6BgD,MAAM,CAACmB,CAAD,CAAN,CAAUI,KAAvC;AACH;;AACDL,MAAAA,QAAQ,CAACM,WAAT,CAAqBH,MAArB;AACH;;AACD/B,IAAAA,IAAI,CAACkC,WAAL,CAAiBN,QAAjB;AACA,WAAO5B,IAAP;AACH,GAhBD;AAiBA;AACJ;AACA;AACA;AACA;;;AACI3D,EAAAA,WAAW,CAACI,SAAZ,CAAsB0F,YAAtB,GAAqC,UAAUxF,OAAV,EAAmB;AACpD,QAAIqD,IAAI,GAAG,KAAKD,UAAL,EAAX;AACA,QAAIG,QAAQ,GAAG,KAAKD,cAAL,CAAoB;AAAE,YAAMtD,OAAO,CAACG;AAAhB,KAApB,CAAf;AACAH,IAAAA,OAAO,CAACG,EAAR,GAAaH,OAAO,CAACG,EAAR,GAAa,OAA1B;AACA,QAAIsF,IAAI,GAAG,KAAKnE,aAAL,CAAmBtB,OAAnB,CAAX;AACAuD,IAAAA,QAAQ,CAACgC,WAAT,CAAqBE,IAArB;AACApC,IAAAA,IAAI,CAACkC,WAAL,CAAiBhC,QAAjB;AACA,WAAOF,IAAP;AACH,GARD;AASA;AACJ;AACA;AACA;AACA;;;AACI3D,EAAAA,WAAW,CAACI,SAAZ,CAAsB4F,oBAAtB,GAA6C,UAAU1F,OAAV,EAAmB;AAC5D,QAAIqD,IAAI,GAAG,KAAKD,UAAL,EAAX;AACA,QAAIG,QAAQ,GAAG,KAAKD,cAAL,CAAoB;AAAE,YAAMtD,OAAO,CAACG;AAAhB,KAApB,CAAf;AACAH,IAAAA,OAAO,CAACG,EAAR,GAAaH,OAAO,CAACG,EAAR,GAAa,SAA1B;AACA,QAAIsB,MAAM,GAAG,KAAKD,UAAL,CAAgBxB,OAAhB,CAAb;AACAuD,IAAAA,QAAQ,CAACgC,WAAT,CAAqB9D,MAArB;AACA4B,IAAAA,IAAI,CAACkC,WAAL,CAAiBhC,QAAjB;AACA,WAAOF,IAAP;AACH,GARD;AASA;AACJ;AACA;AACA;AACA;AACA;;;AACI3D,EAAAA,WAAW,CAACI,SAAZ,CAAsBU,oBAAtB,GAA6C,UAAUR,OAAV,EAAmBY,OAAnB,EAA4B;AACrE,QAAI+E,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAY3F,OAAZ,CAAX;;AACA,SAAK,IAAIkF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,IAAI,CAACR,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClCtE,MAAAA,OAAO,CAACG,YAAR,CAAqB4E,IAAI,CAACT,CAAD,CAAzB,EAA8BlF,OAAO,CAAC2F,IAAI,CAACT,CAAD,CAAL,CAArC;AACH;;AACD,WAAOtE,OAAP;AACH,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;;;AACIlB,EAAAA,WAAW,CAACI,SAAZ,CAAsB+F,YAAtB,GAAqC,UAAU7F,OAAV,EAAmB;AACpD,WAAO,IAAP;AACH,GAFD;;AAGA,SAAON,WAAP;AACH,CAvXgC,EAAjC;;AAwXA,SAASA,WAAT","sourcesContent":["/**\n * To import utils\n */\nimport { isNullOrUndefined, } from '@syncfusion/ej2-base';\nvar SvgRenderer = /** @class */ (function () {\n    /* End-Properties */\n    function SvgRenderer(rootID) {\n        //Internal Variables \n        this.svgLink = 'http://www.w3.org/2000/svg';\n        this.rootId = rootID;\n    }\n    // method to get the attributes value\n    /* tslint:disable */\n    SvgRenderer.prototype.getOptionValue = function (options, key) {\n        return options[key];\n    }; /* tslint:enable */\n    /**\n     * To create a Html5 SVG element\n     * @param {SVGAttributes} options - Options to create SVG\n     * @return {Element}\n     */\n    SvgRenderer.prototype.createSvg = function (options) {\n        if (isNullOrUndefined(options.id)) {\n            options.id = this.rootId + '_svg';\n        }\n        this.svgObj = document.getElementById(options.id);\n        if (isNullOrUndefined(document.getElementById(options.id))) {\n            this.svgObj = document.createElementNS(this.svgLink, 'svg');\n        }\n        this.svgObj = this.setElementAttributes(options, this.svgObj);\n        this.setSVGSize(options.width, options.height);\n        return this.svgObj;\n    };\n    // method to set the height and width for the SVG element\n    SvgRenderer.prototype.setSVGSize = function (width, height) {\n        var element = document.getElementById(this.rootId);\n        var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\n        if (isNullOrUndefined(this.width) || this.width <= 0) {\n            this.svgObj.setAttribute('width', width ? width.toString() : size.width.toString());\n        }\n        else {\n            this.svgObj.setAttribute('width', this.width.toString());\n        }\n        if (isNullOrUndefined(this.height) || this.height <= 0) {\n            this.svgObj.setAttribute('height', height ? height.toString() : '450');\n        }\n        else {\n            this.svgObj.setAttribute('height', this.height.toString());\n        }\n    };\n    /**\n     * To draw a path\n     * @param {PathAttributes} options - Options to draw a path in SVG\n     * @param {Int32Array} canvasTranslate - Used as dummy variable for canvas rendering\n     * @return {Element}\n     */\n    SvgRenderer.prototype.drawPath = function (options, canvasTranslate) {\n        var path = document.getElementById(options.id);\n        if (path === null) {\n            path = document.createElementNS(this.svgLink, 'path');\n        }\n        path = this.setElementAttributes(options, path);\n        return path;\n    };\n    /**\n     * To draw a line\n     * @param {LineAttributes} options - Options to draw a line in SVG\n     * @return {Element}\n     */\n    SvgRenderer.prototype.drawLine = function (options) {\n        var line = document.getElementById(options.id);\n        if (line === null) {\n            line = document.createElementNS(this.svgLink, 'line');\n        }\n        line = this.setElementAttributes(options, line);\n        return line;\n    };\n    /**\n     * To draw a rectangle\n     * @param {BaseAttibutes} options - Required options to draw a rectangle in SVG\n     * @return {Element}\n     */\n    SvgRenderer.prototype.drawRectangle = function (options, canvasTranslate) {\n        var rectangle = document.getElementById(options.id);\n        if (rectangle === null) {\n            rectangle = document.createElementNS(this.svgLink, 'rect');\n        }\n        rectangle = this.setElementAttributes(options, rectangle);\n        return rectangle;\n    };\n    /**\n     * To draw a circle\n     * @param {CircleAttributes} options - Required options to draw a circle in SVG\n     * @return {Element}\n     */\n    SvgRenderer.prototype.drawCircle = function (options) {\n        var circle = document.getElementById(options.id);\n        if (circle === null) {\n            circle = document.createElementNS(this.svgLink, 'circle');\n        }\n        circle = this.setElementAttributes(options, circle);\n        return circle;\n    };\n    /**\n     * To draw a polyline\n     * @param {PolylineAttributes} options - Options required to draw a polyline\n     * @return {Element}\n     */\n    SvgRenderer.prototype.drawPolyline = function (options) {\n        var polyline = document.getElementById(options.id);\n        if (polyline === null) {\n            polyline = document.createElementNS(this.svgLink, 'polyline');\n        }\n        polyline = this.setElementAttributes(options, polyline);\n        return polyline;\n    };\n    /**\n     * To draw an ellipse\n     * @param {EllipseAttributes} options - Options required to draw an ellipse\n     * @return {Element}\n     */\n    SvgRenderer.prototype.drawEllipse = function (options) {\n        var ellipse = document.getElementById(options.id);\n        if (ellipse === null) {\n            ellipse = document.createElementNS(this.svgLink, 'ellipse');\n        }\n        ellipse = this.setElementAttributes(options, ellipse);\n        return ellipse;\n    };\n    /**\n     * To draw a polygon\n     * @param {PolylineAttributes} options - Options needed to draw a polygon in SVG\n     * @return {Element}\n     */\n    SvgRenderer.prototype.drawPolygon = function (options) {\n        var polygon = document.getElementById(options.id);\n        if (polygon === null) {\n            polygon = document.createElementNS(this.svgLink, 'polygon');\n        }\n        polygon = this.setElementAttributes(options, polygon);\n        return polygon;\n    };\n    /**\n     * To draw an image\n     * @param {ImageAttributes} options - Required options to draw an image in SVG\n     * @return {Element}\n     */\n    SvgRenderer.prototype.drawImage = function (options) {\n        var img = document.createElementNS(this.svgLink, 'image');\n        img.setAttributeNS(null, 'height', options.height.toString());\n        img.setAttributeNS(null, 'width', options.width.toString());\n        img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', options.href);\n        img.setAttributeNS(null, 'x', options.x.toString());\n        img.setAttributeNS(null, 'y', options.y.toString());\n        img.setAttributeNS(null, 'id', options.id);\n        img.setAttributeNS(null, 'visibility', options.visibility);\n        if (!isNullOrUndefined(this.getOptionValue(options, 'clip-path'))) {\n            img.setAttributeNS(null, 'clip-path', this.getOptionValue(options, 'clip-path'));\n        }\n        if (!isNullOrUndefined(options.preserveAspectRatio)) {\n            img.setAttributeNS(null, 'preserveAspectRatio', options.preserveAspectRatio);\n        }\n        return img;\n    };\n    /**\n     * To draw a text\n     * @param {TextAttributes} options - Options needed to draw a text in SVG\n     * @return {Element}\n     */\n    SvgRenderer.prototype.createText = function (options, label, transX, transY, dy, isTSpan) {\n        var text = document.createElementNS(this.svgLink, 'text');\n        text = this.setElementAttributes(options, text);\n        if (!isNullOrUndefined(label)) {\n            text.textContent = label;\n        }\n        return text;\n    };\n    /**\n     * To create a tSpan\n     * @param {TextAttributes} options - Options to create tSpan\n     * @param {string} label - The text content which is to be rendered in the tSpan\n     * @return {Element}\n     */\n    SvgRenderer.prototype.createTSpan = function (options, label) {\n        var tSpan = document.createElementNS(this.svgLink, 'tspan');\n        tSpan = this.setElementAttributes(options, tSpan);\n        if (!isNullOrUndefined(label)) {\n            tSpan.textContent = label;\n        }\n        return tSpan;\n    };\n    /**\n     * To create a title\n     * @param {string} text - The text content which is to be rendered in the title\n     * @return {Element}\n     */\n    SvgRenderer.prototype.createTitle = function (text) {\n        var title = document.createElementNS(this.svgLink, 'title');\n        title.textContent = text;\n        return title;\n    };\n    /**\n     * To create defs element in SVG\n     * @return {Element}\n     */\n    SvgRenderer.prototype.createDefs = function () {\n        var defs = document.createElementNS(this.svgLink, 'defs');\n        return defs;\n    };\n    /**\n     * To create clip path in SVG\n     * @param {BaseAttibutes} options - Options needed to create clip path\n     * @return {Element}\n     */\n    SvgRenderer.prototype.createClipPath = function (options) {\n        var clipPath = document.createElementNS(this.svgLink, 'clipPath');\n        clipPath = this.setElementAttributes(options, clipPath);\n        return clipPath;\n    };\n    /**\n     * To create foreign object in SVG\n     * @param {BaseAttibutes} options - Options needed to create foreign object\n     * @return {Element}\n     */\n    SvgRenderer.prototype.createForeignObject = function (options) {\n        var foreignObject = document.createElementNS(this.svgLink, 'foreignObject');\n        foreignObject = this.setElementAttributes(options, foreignObject);\n        return foreignObject;\n    };\n    /**\n     * To create group element in SVG\n     * @param {BaseAttibutes} options - Options needed to create group\n     * @return {Element}\n     */\n    SvgRenderer.prototype.createGroup = function (options) {\n        var group = document.createElementNS(this.svgLink, 'g');\n        group = this.setElementAttributes(options, group);\n        return group;\n    };\n    /**\n     * To create pattern in SVG\n     * @param {PatternAttributes} options - Required options to create pattern in SVG\n     * @param {string} type - Specifies the name of the pattern\n     * @return {Element}\n     */\n    SvgRenderer.prototype.createPattern = function (options, element) {\n        var pattern = document.createElementNS(this.svgLink, element);\n        pattern = this.setElementAttributes(options, pattern);\n        return pattern;\n    };\n    /**\n     * To create radial gradient in SVG\n     * @param {string[]} colors - Specifies the colors required to create radial gradient\n     * @param {string[]} colorStop - Specifies the colorstop required to create radial gradient\n     * @param {string} name - Specifies the name of the gradient\n     * @param {RadialGradient} options - value for radial gradient\n     * @return {string}\n     */\n    SvgRenderer.prototype.createRadialGradient = function (colors, name, options) {\n        var colorName;\n        if (!isNullOrUndefined(colors[0].colorStop)) {\n            var newOptions = {\n                'id': this.rootId + '_' + name + 'radialGradient',\n                'cx': options.cx + '%',\n                'cy': options.cy + '%',\n                'r': options.r + '%',\n                'fx': options.fx + '%',\n                'fy': options.fy + '%'\n            };\n            this.drawGradient('radialGradient', newOptions, colors);\n            colorName = 'url(#' + this.rootId + '_' + name + 'radialGradient)';\n        }\n        else {\n            colorName = colors[0].color.toString();\n        }\n        return colorName;\n    };\n    /**\n     * To create linear gradient in SVG\n     * @param {string[]} colors - Array of string specifies the values for color\n     * @param {string[]} colors - Array of string specifies the values for colorStop\n     * @param {string} name - Specifies the name of the gradient\n     * @param {LinearGradient} options - Specifies the options for gradient\n     * @return {string}\n     */\n    SvgRenderer.prototype.createLinearGradient = function (colors, name, options) {\n        var colorName;\n        if (!isNullOrUndefined(colors[0].colorStop)) {\n            var newOptions = {\n                'id': this.rootId + '_' + name + 'linearGradient',\n                'x1': options.x1 + '%',\n                'y1': options.y1 + '%',\n                'x2': options.x2 + '%',\n                'y2': options.y2 + '%'\n            };\n            this.drawGradient('linearGradient', newOptions, colors);\n            colorName = 'url(#' + this.rootId + '_' + name + 'linearGradient)';\n        }\n        else {\n            colorName = colors[0].color.toString();\n        }\n        return colorName;\n    };\n    /**\n     * To render the gradient element in SVG\n     * @param {string} gradientType - Specifies the type of the gradient\n     * @param {RadialGradient | LinearGradient} options - Options required to render a gradient\n     * @param {string[]} colors - Array of string specifies the values for color\n     * @param {string[]} colorStop - Array of string specifies the values for colorStop\n     * @return {Element}\n     */\n    SvgRenderer.prototype.drawGradient = function (gradientType, options, colors) {\n        var defs = this.createDefs();\n        var gradient = document.createElementNS(this.svgLink, gradientType);\n        gradient = this.setElementAttributes(options, gradient);\n        for (var i = 0; i < colors.length; i++) {\n            var stop_1 = document.createElementNS(this.svgLink, 'stop');\n            stop_1.setAttribute('offset', colors[i].colorStop);\n            stop_1.setAttribute('stop-color', colors[i].color);\n            stop_1.setAttribute('stop-opacity', colors[i].opacity ? (colors[i].opacity) : '1');\n            if (!isNullOrUndefined(colors[i].style)) {\n                stop_1.setAttribute('style', colors[i].style);\n            }\n            gradient.appendChild(stop_1);\n        }\n        defs.appendChild(gradient);\n        return defs;\n    };\n    /**\n     * To render a clip path\n     * @param {BaseAttibutes} options - Options required to render a clip path\n     * @return {Element}\n     */\n    SvgRenderer.prototype.drawClipPath = function (options) {\n        var defs = this.createDefs();\n        var clipPath = this.createClipPath({ 'id': options.id });\n        options.id = options.id + '_Rect';\n        var rect = this.drawRectangle(options);\n        clipPath.appendChild(rect);\n        defs.appendChild(clipPath);\n        return defs;\n    };\n    /**\n     * To create circular clip path in SVG\n     * @param {CircleAttributes} options - Options required to create circular clip path\n     * @return {Element}\n     */\n    SvgRenderer.prototype.drawCircularClipPath = function (options) {\n        var defs = this.createDefs();\n        var clipPath = this.createClipPath({ 'id': options.id });\n        options.id = options.id + '_Circle';\n        var circle = this.drawCircle(options);\n        clipPath.appendChild(circle);\n        defs.appendChild(clipPath);\n        return defs;\n    };\n    /**\n     * To set the attributes to the element\n     * @param {SVGCanvasAttributes} options - Attributes to set for the element\n     * @param {Element} element - The element to which the attributes need to be set\n     * @return {Element}\n     */\n    SvgRenderer.prototype.setElementAttributes = function (options, element) {\n        var keys = Object.keys(options);\n        for (var i = 0; i < keys.length; i++) {\n            element.setAttribute(keys[i], options[keys[i]]);\n        }\n        return element;\n    };\n    /**\n     * To create a Html5 canvas element\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     * @param {BaseAttibutes} options - Options to create canvas\n     * @return {HTMLCanvasElement}\n     */\n    SvgRenderer.prototype.createCanvas = function (options) {\n        return null;\n    };\n    return SvgRenderer;\n}());\nexport { SvgRenderer };\n"]},"metadata":{},"sourceType":"module"}