{"ast":null,"code":"import { PdfColorSpace } from './enum';\nimport { Operators } from './../input-output/pdf-operators';\nimport { Dictionary } from './../collections/dictionary';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfArray } from './../primitives/pdf-array';\n/**\n * Implements structures and routines working with `color`.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // set color\n * let brushColor : PdfColor = new PdfColor(0, 0, 0);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(brushColor);\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n * @default black color\n */\n\nvar PdfColor =\n/** @class */\nfunction () {\n  function PdfColor(color1, color2, color3, color4) {\n    if (typeof color1 === 'undefined') {\n      if (typeof color2 !== 'undefined' && typeof color3 !== 'undefined' && typeof color4 !== 'undefined') {\n        this.assignRGB(color2, color3, color4);\n      } else {\n        this.filled = false;\n      }\n    } else if (color1 instanceof PdfColor) {\n      this.redColor = color1.r;\n      this.greenColor = color1.g;\n      this.blueColor = color1.b;\n      this.grayColor = color1.gray;\n      this.alpha = color1.alpha;\n      this.filled = this.alpha !== 0;\n      /* tslint:disable-next-line:max-line-length */\n    } else if (typeof color1 === 'number' && typeof color2 === 'undefined' && typeof color3 === 'undefined' && typeof color4 === 'undefined') {\n      if (color1 < 0) {\n        color1 = 0;\n      }\n\n      if (color1 > 1) {\n        color1 = 1;\n      }\n\n      this.redColor = color1 * PdfColor.maxColourChannelValue;\n      this.greenColor = color1 * PdfColor.maxColourChannelValue;\n      this.blueColor = color1 * PdfColor.maxColourChannelValue;\n      this.cyanColor = color1;\n      this.magentaColor = color1;\n      this.yellowColor = color1;\n      this.blackColor = color1;\n      this.grayColor = color1;\n      this.alpha = PdfColor.maxColourChannelValue;\n      this.filled = true;\n    } else if (typeof color4 === 'undefined') {\n      this.assignRGB(color1, color2, color3);\n    } else {\n      this.assignRGB(color2, color3, color4, color1);\n    }\n  }\n  /**\n   * `Assign` red, green, blue colors with alpha value..\n   * @private\n   */\n\n\n  PdfColor.prototype.assignRGB = function (r, g, b, a) {\n    if (typeof r === 'undefined' || typeof g === 'undefined' || typeof b === 'undefined') {\n      this.filled = false;\n    } else {\n      this.cyanColor = 0;\n      this.magentaColor = 0;\n      this.yellowColor = 0;\n      this.blackColor = 0;\n      this.grayColor = 0;\n      this.redColor = r;\n      this.greenColor = g;\n      this.blueColor = b;\n\n      if (typeof a === 'undefined') {\n        this.alpha = PdfColor.maxColourChannelValue;\n      } else {\n        this.alpha = a;\n      }\n\n      this.filled = true;\n      this.assignCMYK(r, g, b);\n    }\n  };\n  /**\n   * `Calculate and assign` cyan, megenta, yellow colors from rgb values..\n   * @private\n   */\n\n\n  PdfColor.prototype.assignCMYK = function (r, g, b) {\n    var red = r / PdfColor.maxColourChannelValue;\n    var green = g / PdfColor.maxColourChannelValue;\n    var blue = b / PdfColor.maxColourChannelValue;\n    var black = PdfNumber.min(1 - red, 1 - green, 1 - blue);\n    var cyan = black === 1.0 ? 0 : (1 - red - black) / (1 - black);\n    var magenta = black === 1.0 ? 0 : (1 - green - black) / (1 - black);\n    var yellow = black === 1.0 ? 0 : (1 - blue - black) / (1 - black);\n    this.blackColor = black;\n    this.cyanColor = cyan;\n    this.magentaColor = magenta;\n    this.yellowColor = yellow;\n  };\n\n  Object.defineProperty(PdfColor.prototype, \"r\", {\n    //Properties\n    // public static get Empty():PdfColor\n    // {\n    //     return this.s_emptyColor\n    // }\n\n    /**\n     * Gets or sets `Red` channel value.\n     * @private\n     */\n    get: function () {\n      return this.redColor;\n    },\n    set: function (value) {\n      this.redColor = value;\n      this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"red\", {\n    /**\n     * Gets the `Red` color\n     * @private\n     */\n    get: function () {\n      return this.r / PdfColor.maxColourChannelValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"b\", {\n    /**\n     * Gets or sets `Blue` channel value.\n     * @private\n     */\n    get: function () {\n      return this.blueColor;\n    },\n    set: function (value) {\n      this.blueColor = value;\n      this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"blue\", {\n    /**\n     * Gets the `blue` color.\n     * @private\n     */\n    get: function () {\n      return this.b / PdfColor.maxColourChannelValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"c\", {\n    /**\n     * Gets or sets `Cyan` channel value.\n     * @private\n     */\n    get: function () {\n      return this.cyanColor;\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.cyanColor = 0;\n      } else if (value > 1) {\n        this.cyanColor = 1;\n      } else {\n        this.cyanColor = value;\n      }\n\n      this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"k\", {\n    /**\n     * Gets or sets `Black` channel value.\n     * @private\n     */\n    get: function () {\n      return this.blackColor;\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.blackColor = 0;\n      } else if (value > 1) {\n        this.blackColor = 1;\n      } else {\n        this.blackColor = value;\n      }\n\n      this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"m\", {\n    /**\n     * Gets or sets `Magenta` channel value.\n     * @private\n     */\n    get: function () {\n      return this.magentaColor;\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.magentaColor = 0;\n      } else if (value > 1) {\n        this.magentaColor = 1;\n      } else {\n        this.magentaColor = value;\n      }\n\n      this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"y\", {\n    /**\n     * Gets or sets `Yellow` channel value.\n     * @private\n     */\n    get: function () {\n      return this.yellowColor;\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.yellowColor = 0;\n      } else if (value > 1) {\n        this.yellowColor = 1;\n      } else {\n        this.yellowColor = value;\n      }\n\n      this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"g\", {\n    /**\n     *  Gets or sets `Green` channel value.\n     * @private\n     */\n    get: function () {\n      return this.greenColor;\n    },\n    set: function (value) {\n      this.greenColor = value;\n      this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"green\", {\n    /**\n     * Gets the `Green` color.\n     * @private\n     */\n    get: function () {\n      return this.g / PdfColor.maxColourChannelValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"gray\", {\n    /**\n     * Gets or sets `Gray` channel value.\n     * @private\n     */\n    get: function () {\n      return (this.redColor + this.greenColor + this.blueColor) / (PdfColor.maxColourChannelValue * 3);\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.grayColor = 0;\n      } else if (value > 1) {\n        this.grayColor = 1;\n      } else {\n        this.grayColor = value;\n      }\n\n      this.r = this.grayColor * PdfColor.maxColourChannelValue;\n      this.g = this.grayColor * PdfColor.maxColourChannelValue;\n      this.b = this.grayColor * PdfColor.maxColourChannelValue;\n      this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"isEmpty\", {\n    /**\n     * Gets whether the PDFColor `is Empty` or not.\n     * @private\n     */\n    get: function () {\n      return !this.filled;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"a\", {\n    /**\n     * Gets or sets `Alpha` channel value.\n     * @private\n     */\n    get: function () {\n      return this.alpha;\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.alpha = 0;\n      } else {\n        // if (this.alpha !== value) {\n        this.alpha = value; // }\n      }\n\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Public methods\n\n  /**\n   * Converts `PDFColor to PDF string` representation.\n   * @private\n   */\n\n  PdfColor.prototype.toString = function (colorSpace, stroke) {\n    if (this.isEmpty) {\n      return '';\n    }\n\n    var str = '';\n\n    switch (colorSpace) {\n      case PdfColorSpace.Rgb:\n        str = this.rgbToString(stroke);\n        break;\n\n      case PdfColorSpace.GrayScale:\n        str = this.grayScaleToString(stroke);\n        break;\n\n      case PdfColorSpace.Cmyk:\n        str = this.cmykToString(stroke);\n        break;\n    }\n\n    return str;\n  };\n  /**\n   * Sets `GrayScale` color.\n   * @private\n   */\n\n\n  PdfColor.prototype.grayScaleToString = function (ifStroking) {\n    var gray = this.gray;\n    var colour = '';\n    var obj = null;\n    /* tslint:disable-next-line:max-line-length */\n\n    obj = ifStroking ? PdfColor.grayStringsSroke.containsKey(gray) ? PdfColor.grayStringsSroke.getValue(gray) : null : PdfColor.grayStringsFill.containsKey(gray) ? PdfColor.grayStringsFill.getValue(gray) : null;\n\n    if (obj == null) {\n      if (ifStroking) {\n        colour = gray.toString() + ' G';\n        PdfColor.grayStringsSroke.setValue(gray, colour);\n      }\n    } else {\n      colour = obj.toString();\n    }\n\n    return colour + Operators.newLine;\n  };\n  /**\n   * Sets `RGB` color.\n   * @private\n   */\n\n\n  PdfColor.prototype.rgbToString = function (ifStroking) {\n    var r = this.r;\n    var g = this.g;\n    var b = this.b;\n    var key = (r << 16) + (g << 8) + b;\n\n    if (ifStroking) {\n      key += 1 << 24;\n    }\n\n    var colour = '';\n    var obj = null;\n\n    if (PdfColor.rgbStrings.containsKey(key)) {\n      obj = PdfColor.rgbStrings.getValue(key);\n    }\n\n    if (obj == null) {\n      var red = r / PdfColor.maxColourChannelValue;\n      var green = g / PdfColor.maxColourChannelValue;\n      var blue = b / PdfColor.maxColourChannelValue;\n\n      if (ifStroking) {\n        colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' RG';\n      } else {\n        colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' rg';\n      }\n\n      PdfColor.rgbStrings.setValue(key, colour);\n    } else {\n      colour = obj.toString();\n    }\n\n    return colour + Operators.newLine;\n  };\n  /***\n   * Sets `CMYK` color.\n   * @private\n   */\n\n\n  PdfColor.prototype.cmykToString = function (ifStroking) {\n    var cyan = this.c;\n    var magenta = this.m;\n    var yellow = this.y;\n    var black = this.b;\n    var colour = '';\n    colour = cyan.toString() + ' ' + magenta.toString() + ' ' + yellow.toString() + ' ' + black.toString() + ' K';\n    return colour + Operators.newLine;\n  };\n  /**\n   * Converts `colour to a PDF array`.\n   * @private\n   */\n\n\n  PdfColor.prototype.toArray = function (colorSpace) {\n    var array = new PdfArray();\n\n    switch (colorSpace) {\n      case PdfColorSpace.Rgb:\n        array.add(new PdfNumber(this.red));\n        array.add(new PdfNumber(this.green));\n        array.add(new PdfNumber(this.blue));\n        break;\n    }\n\n    return array;\n  }; //Fields\n\n  /**\n   * Holds `RGB colors` converted into strings.\n   * @private\n   */\n\n\n  PdfColor.rgbStrings = new Dictionary();\n  /**\n   * Holds Gray scale colors converted into strings for `stroking`.\n   * @private\n   */\n\n  PdfColor.grayStringsSroke = new Dictionary();\n  /**\n   * Holds Gray scale colors converted into strings for `filling`.\n   * @private\n   */\n\n  PdfColor.grayStringsFill = new Dictionary();\n  /**\n   * `Max value` of color channel.\n   * @private\n   */\n\n  PdfColor.maxColourChannelValue = 255.0;\n  return PdfColor;\n}();\n\nexport { PdfColor };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-color.js"],"names":["PdfColorSpace","Operators","Dictionary","PdfNumber","PdfArray","PdfColor","color1","color2","color3","color4","assignRGB","filled","redColor","r","greenColor","g","blueColor","b","grayColor","gray","alpha","maxColourChannelValue","cyanColor","magentaColor","yellowColor","blackColor","prototype","a","assignCMYK","red","green","blue","black","min","cyan","magenta","yellow","Object","defineProperty","get","set","value","enumerable","configurable","toString","colorSpace","stroke","isEmpty","str","Rgb","rgbToString","GrayScale","grayScaleToString","Cmyk","cmykToString","ifStroking","colour","obj","grayStringsSroke","containsKey","getValue","grayStringsFill","setValue","newLine","key","rgbStrings","c","m","y","toArray","array","add"],"mappings":"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","sourcesContent":["import { PdfColorSpace } from './enum';\nimport { Operators } from './../input-output/pdf-operators';\nimport { Dictionary } from './../collections/dictionary';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfArray } from './../primitives/pdf-array';\n/**\n * Implements structures and routines working with `color`.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // set color\n * let brushColor : PdfColor = new PdfColor(0, 0, 0);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(brushColor);\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n * @default black color\n */\nvar PdfColor = /** @class */ (function () {\n    function PdfColor(color1, color2, color3, color4) {\n        if (typeof color1 === 'undefined') {\n            if (typeof color2 !== 'undefined' && typeof color3 !== 'undefined' && typeof color4 !== 'undefined') {\n                this.assignRGB(color2, color3, color4);\n            }\n            else {\n                this.filled = false;\n            }\n        }\n        else if (color1 instanceof PdfColor) {\n            this.redColor = color1.r;\n            this.greenColor = color1.g;\n            this.blueColor = color1.b;\n            this.grayColor = color1.gray;\n            this.alpha = color1.alpha;\n            this.filled = (this.alpha !== 0);\n            /* tslint:disable-next-line:max-line-length */\n        }\n        else if (typeof color1 === 'number' && typeof color2 === 'undefined' && typeof color3 === 'undefined' && typeof color4 === 'undefined') {\n            if (color1 < 0) {\n                color1 = 0;\n            }\n            if (color1 > 1) {\n                color1 = 1;\n            }\n            this.redColor = color1 * PdfColor.maxColourChannelValue;\n            this.greenColor = color1 * PdfColor.maxColourChannelValue;\n            this.blueColor = color1 * PdfColor.maxColourChannelValue;\n            this.cyanColor = color1;\n            this.magentaColor = color1;\n            this.yellowColor = color1;\n            this.blackColor = color1;\n            this.grayColor = color1;\n            this.alpha = PdfColor.maxColourChannelValue;\n            this.filled = true;\n        }\n        else if (typeof color4 === 'undefined') {\n            this.assignRGB(color1, color2, color3);\n        }\n        else {\n            this.assignRGB(color2, color3, color4, color1);\n        }\n    }\n    /**\n     * `Assign` red, green, blue colors with alpha value..\n     * @private\n     */\n    PdfColor.prototype.assignRGB = function (r, g, b, a) {\n        if (typeof r === 'undefined' || typeof g === 'undefined' || typeof b === 'undefined') {\n            this.filled = false;\n        }\n        else {\n            this.cyanColor = 0;\n            this.magentaColor = 0;\n            this.yellowColor = 0;\n            this.blackColor = 0;\n            this.grayColor = 0;\n            this.redColor = r;\n            this.greenColor = g;\n            this.blueColor = b;\n            if (typeof a === 'undefined') {\n                this.alpha = PdfColor.maxColourChannelValue;\n            }\n            else {\n                this.alpha = a;\n            }\n            this.filled = true;\n            this.assignCMYK(r, g, b);\n        }\n    };\n    /**\n     * `Calculate and assign` cyan, megenta, yellow colors from rgb values..\n     * @private\n     */\n    PdfColor.prototype.assignCMYK = function (r, g, b) {\n        var red = r / PdfColor.maxColourChannelValue;\n        var green = g / PdfColor.maxColourChannelValue;\n        var blue = b / PdfColor.maxColourChannelValue;\n        var black = PdfNumber.min(1 - red, 1 - green, 1 - blue);\n        var cyan = (black === 1.0) ? 0 : (1 - red - black) / (1 - black);\n        var magenta = (black === 1.0) ? 0 : (1 - green - black) / (1 - black);\n        var yellow = (black === 1.0) ? 0 : (1 - blue - black) / (1 - black);\n        this.blackColor = black;\n        this.cyanColor = cyan;\n        this.magentaColor = magenta;\n        this.yellowColor = yellow;\n    };\n    Object.defineProperty(PdfColor.prototype, \"r\", {\n        //Properties\n        // public static get Empty():PdfColor\n        // {\n        //     return this.s_emptyColor\n        // }\n        /**\n         * Gets or sets `Red` channel value.\n         * @private\n         */\n        get: function () {\n            return this.redColor;\n        },\n        set: function (value) {\n            this.redColor = value;\n            this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"red\", {\n        /**\n         * Gets the `Red` color\n         * @private\n         */\n        get: function () {\n            return (this.r / PdfColor.maxColourChannelValue);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"b\", {\n        /**\n         * Gets or sets `Blue` channel value.\n         * @private\n         */\n        get: function () {\n            return this.blueColor;\n        },\n        set: function (value) {\n            this.blueColor = value;\n            this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"blue\", {\n        /**\n         * Gets the `blue` color.\n         * @private\n         */\n        get: function () {\n            return (this.b / PdfColor.maxColourChannelValue);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"c\", {\n        /**\n         * Gets or sets `Cyan` channel value.\n         * @private\n         */\n        get: function () {\n            return this.cyanColor;\n        },\n        set: function (value) {\n            if (value < 0) {\n                this.cyanColor = 0;\n            }\n            else if (value > 1) {\n                this.cyanColor = 1;\n            }\n            else {\n                this.cyanColor = value;\n            }\n            this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"k\", {\n        /**\n         * Gets or sets `Black` channel value.\n         * @private\n         */\n        get: function () {\n            return this.blackColor;\n        },\n        set: function (value) {\n            if ((value < 0)) {\n                this.blackColor = 0;\n            }\n            else if ((value > 1)) {\n                this.blackColor = 1;\n            }\n            else {\n                this.blackColor = value;\n            }\n            this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"m\", {\n        /**\n         * Gets or sets `Magenta` channel value.\n         * @private\n         */\n        get: function () {\n            return this.magentaColor;\n        },\n        set: function (value) {\n            if ((value < 0)) {\n                this.magentaColor = 0;\n            }\n            else if ((value > 1)) {\n                this.magentaColor = 1;\n            }\n            else {\n                this.magentaColor = value;\n            }\n            this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"y\", {\n        /**\n         * Gets or sets `Yellow` channel value.\n         * @private\n         */\n        get: function () {\n            return this.yellowColor;\n        },\n        set: function (value) {\n            if ((value < 0)) {\n                this.yellowColor = 0;\n            }\n            else if ((value > 1)) {\n                this.yellowColor = 1;\n            }\n            else {\n                this.yellowColor = value;\n            }\n            this.assignRGB(this.cyanColor, this.magentaColor, this.yellowColor, this.blackColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"g\", {\n        /**\n         *  Gets or sets `Green` channel value.\n         * @private\n         */\n        get: function () {\n            return this.greenColor;\n        },\n        set: function (value) {\n            this.greenColor = value;\n            this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"green\", {\n        /**\n         * Gets the `Green` color.\n         * @private\n         */\n        get: function () {\n            return (this.g / PdfColor.maxColourChannelValue);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"gray\", {\n        /**\n         * Gets or sets `Gray` channel value.\n         * @private\n         */\n        get: function () {\n            return ((((this.redColor + this.greenColor) + this.blueColor)) / (PdfColor.maxColourChannelValue * 3));\n        },\n        set: function (value) {\n            if (value < 0) {\n                this.grayColor = 0;\n            }\n            else if (value > 1) {\n                this.grayColor = 1;\n            }\n            else {\n                this.grayColor = value;\n            }\n            this.r = (this.grayColor * PdfColor.maxColourChannelValue);\n            this.g = (this.grayColor * PdfColor.maxColourChannelValue);\n            this.b = (this.grayColor * PdfColor.maxColourChannelValue);\n            this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"isEmpty\", {\n        /**\n         * Gets whether the PDFColor `is Empty` or not.\n         * @private\n         */\n        get: function () {\n            return !this.filled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"a\", {\n        /**\n         * Gets or sets `Alpha` channel value.\n         * @private\n         */\n        get: function () {\n            return this.alpha;\n        },\n        set: function (value) {\n            if (value < 0) {\n                this.alpha = 0;\n            }\n            else {\n                // if (this.alpha !== value) {\n                this.alpha = value;\n                // }\n            }\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Public methods\n    /**\n     * Converts `PDFColor to PDF string` representation.\n     * @private\n     */\n    PdfColor.prototype.toString = function (colorSpace, stroke) {\n        if (this.isEmpty) {\n            return '';\n        }\n        var str = '';\n        switch (colorSpace) {\n            case PdfColorSpace.Rgb:\n                str = this.rgbToString(stroke);\n                break;\n            case PdfColorSpace.GrayScale:\n                str = this.grayScaleToString(stroke);\n                break;\n            case PdfColorSpace.Cmyk:\n                str = this.cmykToString(stroke);\n                break;\n        }\n        return str;\n    };\n    /**\n     * Sets `GrayScale` color.\n     * @private\n     */\n    PdfColor.prototype.grayScaleToString = function (ifStroking) {\n        var gray = this.gray;\n        var colour = '';\n        var obj = null;\n        /* tslint:disable-next-line:max-line-length */\n        obj = (ifStroking) ? PdfColor.grayStringsSroke.containsKey(gray) ? PdfColor.grayStringsSroke.getValue(gray) : null : PdfColor.grayStringsFill.containsKey(gray) ? PdfColor.grayStringsFill.getValue(gray) : null;\n        if (obj == null) {\n            if (ifStroking) {\n                colour = gray.toString() + ' G';\n                PdfColor.grayStringsSroke.setValue(gray, colour);\n            }\n        }\n        else {\n            colour = obj.toString();\n        }\n        return colour + Operators.newLine;\n    };\n    /**\n     * Sets `RGB` color.\n     * @private\n     */\n    PdfColor.prototype.rgbToString = function (ifStroking) {\n        var r = this.r;\n        var g = this.g;\n        var b = this.b;\n        var key = (r << 16) + (g << 8) + b;\n        if (ifStroking) {\n            key += 1 << 24;\n        }\n        var colour = '';\n        var obj = null;\n        if (PdfColor.rgbStrings.containsKey(key)) {\n            obj = PdfColor.rgbStrings.getValue(key);\n        }\n        if (obj == null) {\n            var red = r / PdfColor.maxColourChannelValue;\n            var green = g / PdfColor.maxColourChannelValue;\n            var blue = b / PdfColor.maxColourChannelValue;\n            if (ifStroking) {\n                colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' RG';\n            }\n            else {\n                colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' rg';\n            }\n            PdfColor.rgbStrings.setValue(key, colour);\n        }\n        else {\n            colour = obj.toString();\n        }\n        return colour + Operators.newLine;\n    };\n    /***\n     * Sets `CMYK` color.\n     * @private\n     */\n    PdfColor.prototype.cmykToString = function (ifStroking) {\n        var cyan = this.c;\n        var magenta = this.m;\n        var yellow = this.y;\n        var black = this.b;\n        var colour = '';\n        colour = cyan.toString() + ' ' + magenta.toString() + ' ' + yellow.toString() + ' ' + black.toString() + ' K';\n        return colour + Operators.newLine;\n    };\n    /**\n     * Converts `colour to a PDF array`.\n     * @private\n     */\n    PdfColor.prototype.toArray = function (colorSpace) {\n        var array = new PdfArray();\n        switch (colorSpace) {\n            case PdfColorSpace.Rgb:\n                array.add(new PdfNumber(this.red));\n                array.add(new PdfNumber(this.green));\n                array.add(new PdfNumber(this.blue));\n                break;\n        }\n        return array;\n    };\n    //Fields\n    /**\n     * Holds `RGB colors` converted into strings.\n     * @private\n     */\n    PdfColor.rgbStrings = new Dictionary();\n    /**\n     * Holds Gray scale colors converted into strings for `stroking`.\n     * @private\n     */\n    PdfColor.grayStringsSroke = new Dictionary();\n    /**\n     * Holds Gray scale colors converted into strings for `filling`.\n     * @private\n     */\n    PdfColor.grayStringsFill = new Dictionary();\n    /**\n     * `Max value` of color channel.\n     * @private\n     */\n    PdfColor.maxColourChannelValue = 255.0;\n    return PdfColor;\n}());\nexport { PdfColor };\n"]},"metadata":{},"sourceType":"module"}