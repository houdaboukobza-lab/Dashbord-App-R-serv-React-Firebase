{"ast":null,"code":"import { withInBounds, PointData, getValueXByPoint, getValueYByPoint } from '../../common/utils/helper';\nimport { Rect } from '@syncfusion/ej2-svg-base';\n/**\n * To get the data on mouse move.\n * @private\n */\n\nvar ChartData =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the data.\n   * @private\n   */\n  function ChartData(chart) {\n    /** @private */\n    this.currentPoints = [];\n    /** @private */\n\n    this.previousPoints = [];\n    this.insideRegion = false;\n    this.chart = chart;\n    this.lierIndex = 0;\n  }\n  /**\n   * Method to get the Data.\n   * @private\n   */\n\n\n  ChartData.prototype.getData = function () {\n    var chart = this.chart;\n    var point = null;\n    var series = null;\n    var width;\n    var height;\n    var mouseX;\n    var mouseY;\n\n    for (var len = chart.visibleSeries.length, i = len - 1; i >= 0; i--) {\n      series = chart.visibleSeries[i];\n      width = series.type === 'Scatter' || series.drawType === 'Scatter' || series.marker.visible ? (series.marker.height + 5) / 2 : 0;\n      height = series.type === 'Scatter' || series.drawType === 'Scatter' || series.marker.visible ? (series.marker.width + 5) / 2 : 0;\n      mouseX = chart.mouseX;\n      mouseY = chart.mouseY;\n\n      if (series.dragSettings.enable && series.isRectSeries) {\n        if (!(series.type === 'Bar' && chart.isTransposed) && (chart.isTransposed || series.type === 'Bar')) {\n          var markerWidth = series.marker.width / 2;\n          mouseX = series.yAxis.isInversed ? mouseX + markerWidth : mouseX - markerWidth;\n        } else {\n          var markerHeight = series.marker.height / 2;\n          mouseY = series.yAxis.isInversed ? mouseY - markerHeight : mouseY + markerHeight;\n        }\n      }\n\n      if (series.visible && withInBounds(mouseX, mouseY, series.clipRect, width, height)) {\n        point = this.getRectPoint(series, series.clipRect, mouseX, mouseY);\n      }\n\n      if (point) {\n        return new PointData(point, series);\n      }\n    }\n\n    return new PointData(point, series);\n  };\n\n  ChartData.prototype.isSelected = function (chart) {\n    return (chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode.indexOf('Lasso') > -1) && chart.selectionModule && chart.selectionModule.rectPoints !== null;\n  };\n\n  ChartData.prototype.getRectPoint = function (series, rect, x, y) {\n    var currentRect;\n    var chart = this.chart;\n    var fromCenterX;\n    var fromCenterY;\n    var clickAngle;\n    var arcAngle = 0;\n    var startAngle;\n    var endAngle;\n    var distanceFromCenter;\n\n    if (chart.isScrolling) {\n      return null;\n    }\n\n    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n\n      if (!point.regionData) {\n        if (!point.regions || !point.regions.length) {\n          continue;\n        }\n      }\n\n      if (point.regionData && this.chart.chartAreaType === 'PolarRadar' && series.drawType.indexOf('Column') > -1) {\n        fromCenterX = x - (series.clipRect.width / 2 + series.clipRect.x);\n        fromCenterY = y - (series.clipRect.height / 2 + series.clipRect.y);\n        arcAngle = 2 * Math.PI * (point.regionData.currentXPosition < 0 ? 1 + point.regionData.currentXPosition : point.regionData.currentXPosition);\n        clickAngle = (Math.atan2(fromCenterY, fromCenterX) + 0.5 * Math.PI - arcAngle) % (2 * Math.PI);\n        clickAngle = clickAngle < 0 ? 2 * Math.PI + clickAngle : clickAngle;\n        clickAngle = clickAngle + 2 * Math.PI * series.chart.primaryXAxis.startAngle;\n        startAngle = point.regionData.startAngle;\n        startAngle -= arcAngle;\n        startAngle = startAngle < 0 ? 2 * Math.PI + startAngle : startAngle;\n        endAngle = point.regionData.endAngle;\n        endAngle -= arcAngle;\n        endAngle = endAngle < 0 ? 2 * Math.PI + endAngle : endAngle;\n        distanceFromCenter = Math.sqrt(Math.pow(Math.abs(fromCenterX), 2) + Math.pow(Math.abs(fromCenterY), 2));\n\n        if (clickAngle >= startAngle && clickAngle <= endAngle && (distanceFromCenter >= point.regionData.innerRadius && distanceFromCenter <= point.regionData.radius || distanceFromCenter <= point.regionData.innerRadius && distanceFromCenter >= point.regionData.radius) && distanceFromCenter <= series.chart.radius) {\n          return point;\n        }\n      }\n\n      if (series.dragSettings.enable && series.isRectSeries || series.isRectSeries && series.marker.visible) {\n        if (this.isPointInThresholdRegion(x, y, point, rect, series)) {\n          this.insideRegion = true;\n          return point;\n        }\n      }\n\n      if (!this.insideRegion && this.checkRegionContainsPoint(point.regions, rect, x, y)) {\n        return point;\n      } else if (this.insideRegion && this.checkRegionContainsPoint(point.regions, rect, x, y)) {\n        return point;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Checks whether the region contains a point\n   */\n\n\n  ChartData.prototype.checkRegionContainsPoint = function (regionRect, rect, x, y) {\n    var _this = this;\n\n    return regionRect.some(function (region, index) {\n      _this.lierIndex = index;\n      return withInBounds(x, y, new Rect((_this.chart.chartAreaType === 'Cartesian' ? rect.x : 0) + region.x, (_this.chart.chartAreaType === 'Cartesian' ? rect.y : 0) + region.y, region.width, region.height));\n    });\n  };\n  /**\n   * To check the point in threshold region for column and bar series\n   * @param x\n   * @param y\n   * @param point\n   * @param rect\n   * @param series\n   */\n\n\n  ChartData.prototype.isPointInThresholdRegion = function (x, y, point, rect, series) {\n    var _this = this;\n\n    var isBar = series.type === 'Bar';\n    var isInversed = series.yAxis.isInversed;\n    var isTransposed = series.chart.isTransposed;\n    var heightValue = 10;\n    var yValue = 0;\n    var xValue = 0;\n    var width;\n    var height = width = 2 * heightValue;\n\n    if (isInversed && isTransposed) {\n      if (isBar) {\n        yValue = point.regions[0].height - heightValue;\n        width = point.regions[0].width;\n      } else {\n        xValue = -heightValue;\n        height = point.regions[0].height;\n      }\n    } else if (isInversed || point.yValue < 0) {\n      if (isBar) {\n        xValue = -heightValue;\n        height = point.regions[0].height;\n      } else {\n        yValue = point.regions[0].height - heightValue;\n        width = point.regions[0].width;\n      }\n    } else if (isTransposed) {\n      if (isBar) {\n        yValue = -heightValue;\n        width = point.regions[0].width;\n      } else {\n        xValue = point.regions[0].width - heightValue;\n        height = point.regions[0].height;\n      }\n    } else {\n      if (isBar) {\n        xValue = point.regions[0].width - heightValue;\n        height = point.regions[0].height;\n      } else {\n        yValue = -heightValue;\n        width = point.regions[0].width;\n      }\n    }\n\n    return point.regions.some(function (region) {\n      return withInBounds(x, y, new Rect((_this.chart.chartAreaType === 'Cartesian' ? rect.x : 0) + region.x + xValue, (_this.chart.chartAreaType === 'Cartesian' ? rect.y : 0) + region.y + yValue, width, height));\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  ChartData.prototype.getClosest = function (series, value) {\n    var xData = series.xData;\n    var closest;\n\n    if (value >= series.xMin - 0.5 && value <= series.xMax + 0.5) {\n      for (var _i = 0, xData_1 = xData; _i < xData_1.length; _i++) {\n        var data = xData_1[_i];\n\n        if (closest == null || Math.abs(data - value) < Math.abs(closest - value)) {\n          closest = data;\n        }\n      }\n    } else if (xData.length === 1) {\n      closest = xData[0];\n    }\n\n    return closest;\n  };\n\n  ChartData.prototype.getClosestX = function (chart, series) {\n    var value;\n    var rect = series.clipRect;\n\n    if (!chart.requireInvertedAxis) {\n      value = getValueXByPoint(chart.mouseX - rect.x, rect.width, series.xAxis);\n    } else {\n      value = getValueYByPoint(chart.mouseY - rect.y, rect.height, series.xAxis);\n    }\n\n    var closest = this.getClosest(series, value);\n\n    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n\n      if (closest === point.xValue && point.visible) {\n        return new PointData(point, series);\n      }\n    }\n\n    return null;\n  };\n\n  return ChartData;\n}();\n\nexport { ChartData };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-charts/src/chart/utils/get-data.js"],"names":["withInBounds","PointData","getValueXByPoint","getValueYByPoint","Rect","ChartData","chart","currentPoints","previousPoints","insideRegion","lierIndex","prototype","getData","point","series","width","height","mouseX","mouseY","len","visibleSeries","length","i","type","drawType","marker","visible","dragSettings","enable","isRectSeries","isTransposed","markerWidth","yAxis","isInversed","markerHeight","clipRect","getRectPoint","isSelected","selectionMode","indexOf","selectionModule","rectPoints","rect","x","y","currentRect","fromCenterX","fromCenterY","clickAngle","arcAngle","startAngle","endAngle","distanceFromCenter","isScrolling","_i","_a","points","regionData","regions","chartAreaType","Math","PI","currentXPosition","atan2","primaryXAxis","sqrt","pow","abs","innerRadius","radius","isPointInThresholdRegion","checkRegionContainsPoint","regionRect","_this","some","region","index","isBar","heightValue","yValue","xValue","getClosest","value","xData","closest","xMin","xMax","xData_1","data","getClosestX","requireInvertedAxis","xAxis"],"mappings":"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","sourcesContent":["import { withInBounds, PointData, getValueXByPoint, getValueYByPoint } from '../../common/utils/helper';\nimport { Rect } from '@syncfusion/ej2-svg-base';\n/**\n * To get the data on mouse move.\n * @private\n */\nvar ChartData = /** @class */ (function () {\n    /**\n     * Constructor for the data.\n     * @private\n     */\n    function ChartData(chart) {\n        /** @private */\n        this.currentPoints = [];\n        /** @private */\n        this.previousPoints = [];\n        this.insideRegion = false;\n        this.chart = chart;\n        this.lierIndex = 0;\n    }\n    /**\n     * Method to get the Data.\n     * @private\n     */\n    ChartData.prototype.getData = function () {\n        var chart = this.chart;\n        var point = null;\n        var series = null;\n        var width;\n        var height;\n        var mouseX;\n        var mouseY;\n        for (var len = chart.visibleSeries.length, i = len - 1; i >= 0; i--) {\n            series = chart.visibleSeries[i];\n            width = (series.type === 'Scatter' || series.drawType === 'Scatter' || (series.marker.visible))\n                ? (series.marker.height + 5) / 2 : 0;\n            height = (series.type === 'Scatter' || series.drawType === 'Scatter' || (series.marker.visible))\n                ? (series.marker.width + 5) / 2 : 0;\n            mouseX = chart.mouseX;\n            mouseY = chart.mouseY;\n            if (series.dragSettings.enable && series.isRectSeries) {\n                if (!(series.type === 'Bar' && chart.isTransposed) && (chart.isTransposed || series.type === 'Bar')) {\n                    var markerWidth = series.marker.width / 2;\n                    mouseX = series.yAxis.isInversed ? mouseX + markerWidth : mouseX - markerWidth;\n                }\n                else {\n                    var markerHeight = series.marker.height / 2;\n                    mouseY = series.yAxis.isInversed ? mouseY - markerHeight : mouseY + markerHeight;\n                }\n            }\n            if (series.visible && withInBounds(mouseX, mouseY, series.clipRect, width, height)) {\n                point = this.getRectPoint(series, series.clipRect, mouseX, mouseY);\n            }\n            if (point) {\n                return new PointData(point, series);\n            }\n        }\n        return new PointData(point, series);\n    };\n    ChartData.prototype.isSelected = function (chart) {\n        return ((chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode.indexOf('Lasso') > -1) && chart.selectionModule &&\n            chart.selectionModule.rectPoints !== null);\n    };\n    ChartData.prototype.getRectPoint = function (series, rect, x, y) {\n        var currentRect;\n        var chart = this.chart;\n        var fromCenterX;\n        var fromCenterY;\n        var clickAngle;\n        var arcAngle = 0;\n        var startAngle;\n        var endAngle;\n        var distanceFromCenter;\n        if (chart.isScrolling) {\n            return null;\n        }\n        for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n            var point = _a[_i];\n            if (!point.regionData) {\n                if (!point.regions || !point.regions.length) {\n                    continue;\n                }\n            }\n            if (point.regionData && this.chart.chartAreaType === 'PolarRadar' && series.drawType.indexOf('Column') > -1) {\n                fromCenterX = x - (series.clipRect.width / 2 + series.clipRect.x);\n                fromCenterY = y - (series.clipRect.height / 2 + series.clipRect.y);\n                arcAngle = 2 * Math.PI * (point.regionData.currentXPosition < 0 ? 1 + point.regionData.currentXPosition\n                    : point.regionData.currentXPosition);\n                clickAngle = (Math.atan2(fromCenterY, fromCenterX) + 0.5 * Math.PI - arcAngle) % (2 * Math.PI);\n                clickAngle = clickAngle < 0 ? 2 * Math.PI + clickAngle : clickAngle;\n                clickAngle = clickAngle + 2 * Math.PI * series.chart.primaryXAxis.startAngle;\n                startAngle = point.regionData.startAngle;\n                startAngle -= arcAngle;\n                startAngle = startAngle < 0 ? 2 * Math.PI + startAngle : startAngle;\n                endAngle = point.regionData.endAngle;\n                endAngle -= arcAngle;\n                endAngle = endAngle < 0 ? 2 * Math.PI + endAngle : endAngle;\n                distanceFromCenter = Math.sqrt(Math.pow(Math.abs(fromCenterX), 2) + Math.pow(Math.abs(fromCenterY), 2));\n                if (clickAngle >= startAngle && clickAngle <= endAngle &&\n                    (((distanceFromCenter >= point.regionData.innerRadius && distanceFromCenter <= point.regionData.radius) ||\n                        (distanceFromCenter <= point.regionData.innerRadius && distanceFromCenter >= point.regionData.radius))\n                        && distanceFromCenter <= series.chart.radius)) {\n                    return point;\n                }\n            }\n            if ((series.dragSettings.enable && series.isRectSeries) || (series.isRectSeries && series.marker.visible)) {\n                if (this.isPointInThresholdRegion(x, y, point, rect, series)) {\n                    this.insideRegion = true;\n                    return point;\n                }\n            }\n            if (!this.insideRegion && this.checkRegionContainsPoint(point.regions, rect, x, y)) {\n                return point;\n            }\n            else if (this.insideRegion && this.checkRegionContainsPoint(point.regions, rect, x, y)) {\n                return point;\n            }\n        }\n        return null;\n    };\n    /**\n     * Checks whether the region contains a point\n     */\n    ChartData.prototype.checkRegionContainsPoint = function (regionRect, rect, x, y) {\n        var _this = this;\n        return regionRect.some(function (region, index) {\n            _this.lierIndex = index;\n            return withInBounds(x, y, new Rect((_this.chart.chartAreaType === 'Cartesian' ? rect.x : 0) + region.x, (_this.chart.chartAreaType === 'Cartesian' ? rect.y : 0) + region.y, region.width, region.height));\n        });\n    };\n    /**\n     * To check the point in threshold region for column and bar series\n     * @param x\n     * @param y\n     * @param point\n     * @param rect\n     * @param series\n     */\n    ChartData.prototype.isPointInThresholdRegion = function (x, y, point, rect, series) {\n        var _this = this;\n        var isBar = series.type === 'Bar';\n        var isInversed = series.yAxis.isInversed;\n        var isTransposed = series.chart.isTransposed;\n        var heightValue = 10;\n        var yValue = 0;\n        var xValue = 0;\n        var width;\n        var height = width = 2 * heightValue;\n        if (isInversed && isTransposed) {\n            if (isBar) {\n                yValue = point.regions[0].height - heightValue;\n                width = point.regions[0].width;\n            }\n            else {\n                xValue = -heightValue;\n                height = point.regions[0].height;\n            }\n        }\n        else if (isInversed || point.yValue < 0) {\n            if (isBar) {\n                xValue = -heightValue;\n                height = point.regions[0].height;\n            }\n            else {\n                yValue = point.regions[0].height - heightValue;\n                width = point.regions[0].width;\n            }\n        }\n        else if (isTransposed) {\n            if (isBar) {\n                yValue = -heightValue;\n                width = point.regions[0].width;\n            }\n            else {\n                xValue = point.regions[0].width - heightValue;\n                height = point.regions[0].height;\n            }\n        }\n        else {\n            if (isBar) {\n                xValue = point.regions[0].width - heightValue;\n                height = point.regions[0].height;\n            }\n            else {\n                yValue = -heightValue;\n                width = point.regions[0].width;\n            }\n        }\n        return point.regions.some(function (region) {\n            return withInBounds(x, y, new Rect((_this.chart.chartAreaType === 'Cartesian' ? rect.x : 0) + region.x + xValue, (_this.chart.chartAreaType === 'Cartesian' ? rect.y : 0) + region.y + yValue, width, height));\n        });\n    };\n    /**\n     * @private\n     */\n    ChartData.prototype.getClosest = function (series, value) {\n        var xData = series.xData;\n        var closest;\n        if (value >= series.xMin - 0.5 && value <= series.xMax + 0.5) {\n            for (var _i = 0, xData_1 = xData; _i < xData_1.length; _i++) {\n                var data = xData_1[_i];\n                if (closest == null || Math.abs(data - value) < Math.abs(closest - value)) {\n                    closest = data;\n                }\n            }\n        }\n        else if (xData.length === 1) {\n            closest = xData[0];\n        }\n        return closest;\n    };\n    ChartData.prototype.getClosestX = function (chart, series) {\n        var value;\n        var rect = series.clipRect;\n        if (!chart.requireInvertedAxis) {\n            value = getValueXByPoint(chart.mouseX - rect.x, rect.width, series.xAxis);\n        }\n        else {\n            value = getValueYByPoint(chart.mouseY - rect.y, rect.height, series.xAxis);\n        }\n        var closest = this.getClosest(series, value);\n        for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n            var point = _a[_i];\n            if (closest === point.xValue && point.visible) {\n                return new PointData(point, series);\n            }\n        }\n        return null;\n    };\n    return ChartData;\n}());\nexport { ChartData };\n"]},"metadata":{},"sourceType":"module"}