{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Series } from '../series/chart-series';\nimport { ColumnBase } from './column-base';\nimport { Axis } from '../axis/axis';\n/**\n * `Pareto series` module used to render the Pareto series.\n */\n\nvar ParetoSeries =\n/** @class */\nfunction (_super) {\n  __extends(ParetoSeries, _super);\n\n  function ParetoSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.paretoAxes = [];\n    return _this;\n  }\n  /**\n   * Defines the Line initialization\n   */\n\n\n  ParetoSeries.prototype.initSeries = function (targetSeries, chart) {\n    var series = new Series(chart, 'series', targetSeries.properties, true);\n    series.name = 'Pareto';\n    series.yAxisName = targetSeries.yAxisName + '_CumulativeAxis';\n    series.category = 'Pareto';\n    targetSeries.category = 'Pareto';\n    series.type = 'Line';\n    series.interior = chart.themeStyle.errorBar;\n    chart.visibleSeries.push(series);\n    this.initAxis(targetSeries, series, chart);\n  };\n  /**\n   * Defines the Axis initialization for Line\n   */\n\n\n  ParetoSeries.prototype.initAxis = function (paretoSeries, targetSeries, chart) {\n    var isExist = this.paretoAxes.some(function (currentAxis) {\n      return currentAxis.name === targetSeries.yAxisName;\n    });\n\n    if (!isExist) {\n      var secondaryAxis = paretoSeries.yAxisName ? chart.axes.filter(function (axis) {\n        return axis.name === paretoSeries.yAxisName;\n      })[0] : chart.primaryYAxis;\n      var newAxis = new Axis(chart, 'axis', {\n        name: targetSeries.yAxisName,\n        majorGridLines: {\n          width: 0\n        },\n        majorTickLines: secondaryAxis.majorTickLines,\n        lineStyle: secondaryAxis.lineStyle,\n        minimum: 0,\n        maximum: 100,\n        rowIndex: secondaryAxis.rowIndex,\n        opposedPosition: true,\n        labelFormat: '{value}%'\n      });\n      this.paretoAxes.push(newAxis);\n    }\n  };\n  /**\n   * Render Pareto series.\n   * @return {void}\n   * @private\n   */\n\n\n  ParetoSeries.prototype.render = function (series) {\n    series.chart.columnSeriesModule.render(series);\n  };\n  /**\n   * To perform the cumulative calculation for pareto series.\n   */\n\n\n  ParetoSeries.prototype.performCumulativeCalculation = function (json, series) {\n    var data = json;\n    var sum = 0;\n    var count = 0;\n    var length = data.length;\n\n    for (var i = 0; i < length; i++) {\n      sum += data[i][series.yName];\n    }\n\n    for (var i = 0; i < length; i++) {\n      count = count + data[i][series.yName];\n      data[i][series.yName] = Math.round(count / sum * 100);\n    }\n\n    return data;\n  };\n  /**\n   * Animates the series.\n   * @param  {Series} series - Defines the series to animate.\n   * @return {void}\n   */\n\n\n  ParetoSeries.prototype.doAnimation = function (series) {\n    this.animate(series);\n  };\n  /**\n   * Get module name.\n   */\n\n\n  ParetoSeries.prototype.getModuleName = function () {\n    return 'ParetoSeries';\n    /**\n     * return the module name\n     */\n  };\n  /**\n   * To destroy the pareto series.\n   * @return {void}\n   * @private\n   */\n\n\n  ParetoSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroy method performed here\n     */\n  };\n\n  return ParetoSeries;\n}(ColumnBase);\n\nexport { ParetoSeries };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-charts/src/chart/series/pareto-series.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Series","ColumnBase","Axis","ParetoSeries","_super","_this","apply","arguments","paretoAxes","initSeries","targetSeries","chart","series","properties","name","yAxisName","category","type","interior","themeStyle","errorBar","visibleSeries","push","initAxis","paretoSeries","isExist","some","currentAxis","secondaryAxis","axes","filter","axis","primaryYAxis","newAxis","majorGridLines","width","majorTickLines","lineStyle","minimum","maximum","rowIndex","opposedPosition","labelFormat","render","columnSeriesModule","performCumulativeCalculation","json","data","sum","count","length","i","yName","Math","round","doAnimation","animate","getModuleName","destroy"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Series } from '../series/chart-series';\nimport { ColumnBase } from './column-base';\nimport { Axis } from '../axis/axis';\n/**\n * `Pareto series` module used to render the Pareto series.\n */\nvar ParetoSeries = /** @class */ (function (_super) {\n    __extends(ParetoSeries, _super);\n    function ParetoSeries() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.paretoAxes = [];\n        return _this;\n    }\n    /**\n     * Defines the Line initialization\n     */\n    ParetoSeries.prototype.initSeries = function (targetSeries, chart) {\n        var series = new Series(chart, 'series', targetSeries.properties, true);\n        series.name = 'Pareto';\n        series.yAxisName = targetSeries.yAxisName + '_CumulativeAxis';\n        series.category = 'Pareto';\n        targetSeries.category = 'Pareto';\n        series.type = 'Line';\n        series.interior = chart.themeStyle.errorBar;\n        chart.visibleSeries.push(series);\n        this.initAxis(targetSeries, series, chart);\n    };\n    /**\n     * Defines the Axis initialization for Line\n     */\n    ParetoSeries.prototype.initAxis = function (paretoSeries, targetSeries, chart) {\n        var isExist = this.paretoAxes.some(function (currentAxis) {\n            return currentAxis.name === targetSeries.yAxisName;\n        });\n        if (!isExist) {\n            var secondaryAxis = (paretoSeries.yAxisName ? chart.axes.filter(function (axis) {\n                return axis.name === paretoSeries.yAxisName;\n            })[0] : chart.primaryYAxis);\n            var newAxis = new Axis(chart, 'axis', {\n                name: targetSeries.yAxisName,\n                majorGridLines: {\n                    width: 0\n                },\n                majorTickLines: secondaryAxis.majorTickLines,\n                lineStyle: secondaryAxis.lineStyle,\n                minimum: 0,\n                maximum: 100,\n                rowIndex: secondaryAxis.rowIndex,\n                opposedPosition: true,\n                labelFormat: '{value}%'\n            });\n            this.paretoAxes.push(newAxis);\n        }\n    };\n    /**\n     * Render Pareto series.\n     * @return {void}\n     * @private\n     */\n    ParetoSeries.prototype.render = function (series) {\n        series.chart.columnSeriesModule.render(series);\n    };\n    /**\n     * To perform the cumulative calculation for pareto series.\n     */\n    ParetoSeries.prototype.performCumulativeCalculation = function (json, series) {\n        var data = json;\n        var sum = 0;\n        var count = 0;\n        var length = data.length;\n        for (var i = 0; i < length; i++) {\n            sum += data[i][series.yName];\n        }\n        for (var i = 0; i < length; i++) {\n            count = count + data[i][series.yName];\n            data[i][series.yName] = Math.round((count / sum) * 100);\n        }\n        return data;\n    };\n    /**\n     * Animates the series.\n     * @param  {Series} series - Defines the series to animate.\n     * @return {void}\n     */\n    ParetoSeries.prototype.doAnimation = function (series) {\n        this.animate(series);\n    };\n    /**\n     * Get module name.\n     */\n    ParetoSeries.prototype.getModuleName = function () {\n        return 'ParetoSeries';\n        /**\n         * return the module name\n         */\n    };\n    /**\n     * To destroy the pareto series.\n     * @return {void}\n     * @private\n     */\n    ParetoSeries.prototype.destroy = function (chart) {\n        /**\n         * Destroy method performed here\n         */\n    };\n    return ParetoSeries;\n}(ColumnBase));\nexport { ParetoSeries };\n"]},"metadata":{},"sourceType":"module"}