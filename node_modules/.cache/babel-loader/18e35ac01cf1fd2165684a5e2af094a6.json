{"ast":null,"code":"/**\n * TtfReader.ts class for EJ2-PDF\n */\nimport { TtfTableInfo } from './ttf-table-info';\nimport { Dictionary } from './../../collections/dictionary';\nimport { TtfNameTable } from './ttf-name-table';\nimport { TtfNameRecord } from './ttf-name-record';\nimport { TtfHeadTable } from './ttf-head-table';\nimport { TtfMetrics } from './ttf-metrics';\nimport { TtfHorizontalHeaderTable } from './ttf-horizontal-header-table';\nimport { TtfOS2Table } from './ttf-OS2-Table';\nimport { TtfPostTable } from './ttf-post-table';\nimport { TtfLongHorMetric } from './ttf-long-hor-metric';\nimport { TtfCmapSubTable } from './ttf-cmap-sub-table';\nimport { TtfCmapTable } from './ttf-cmap-table';\nimport { TtfGlyphInfo } from './ttf-glyph-info';\nimport { TtfLocaTable } from './ttf-loca-table';\nimport { TtfAppleCmapSubTable } from './ttf-apple-cmap-sub-table';\nimport { TtfMicrosoftCmapSubTable } from './ttf-microsoft-cmap-sub-table';\nimport { TtfTrimmedCmapSubTable } from './ttf-trimmed-cmap-sub-table';\nimport { TtfGlyphHeader } from './ttf-glyph-header';\nimport { Rectangle } from './../../drawing/pdf-drawing';\nimport { StringTokenizer } from './string-tokenizer';\nimport { TtfCmapFormat, TtfCmapEncoding, TtfPlatformID } from './enum';\nimport { TtfMicrosoftEncodingID, TtfMacintoshEncodingID, TtfCompositeGlyphFlags } from './enum';\nimport { BigEndianWriter } from './../../input-output/big-endian-writer';\n\nvar TtfReader =\n/** @class */\nfunction () {\n  //Constructors\n  function TtfReader(fontData) {\n    this.int32Size = 4;\n    this.isTtcFont = false;\n    this.isMacTtf = false;\n    this.metricsName = '';\n    this.isMacTTF = false;\n    this.missedGlyphs = 0;\n    this.tableNames = ['cvt ', 'fpgm', 'glyf', 'head', 'hhea', 'hmtx', 'loca', 'maxp', 'prep'];\n    this.entrySelectors = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4];\n    this.fontData = fontData;\n    this.initialize();\n  }\n\n  Object.defineProperty(TtfReader.prototype, \"macintosh\", {\n    //Properties\n\n    /**\n     * Gets glyphs for Macintosh or Symbol fonts (char - key, glyph - value).\n     */\n    get: function () {\n      if (this.macintoshDictionary === null || this.macintoshDictionary === undefined) {\n        this.macintoshDictionary = new Dictionary();\n      }\n\n      return this.macintoshDictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TtfReader.prototype, \"microsoft\", {\n    /**\n     * Gets glyphs for Microsoft or Symbol fonts (char - key, glyph - value).\n     */\n    get: function () {\n      if (this.microsoftDictionary === null || this.microsoftDictionary === undefined) {\n        this.microsoftDictionary = new Dictionary();\n      }\n\n      return this.microsoftDictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TtfReader.prototype, \"macintoshGlyphs\", {\n    /**\n     * Gets glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).\n     */\n    get: function () {\n      if (this.internalMacintoshGlyphs === null || this.internalMacintoshGlyphs === undefined) {\n        this.internalMacintoshGlyphs = new Dictionary();\n      }\n\n      return this.internalMacintoshGlyphs;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TtfReader.prototype, \"microsoftGlyphs\", {\n    /**\n     * Gets glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).\n     */\n    get: function () {\n      if (this.internalMicrosoftGlyphs === null || this.internalMicrosoftGlyphs === undefined) {\n        this.internalMicrosoftGlyphs = new Dictionary();\n      }\n\n      return this.internalMicrosoftGlyphs;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  TtfReader.prototype.initialize = function () {\n    if (this.metrics === undefined) {\n      this.metrics = new TtfMetrics();\n    }\n\n    this.readFontDictionary();\n    var nameTable = this.readNameTable();\n    var headTable = this.readHeadTable();\n    this.initializeFontName(nameTable);\n    this.metrics.macStyle = headTable.macStyle;\n  };\n\n  TtfReader.prototype.readFontDictionary = function () {\n    this.offset = 0;\n    var version = this.checkPreambula(); //this.offset += 4;\n\n    var numTables = this.readInt16(this.offset);\n    var searchRange = this.readInt16(this.offset);\n    var entrySelector = this.readInt16(this.offset);\n    var rangeShift = this.readInt16(this.offset);\n\n    if (this.tableDirectory === undefined) {\n      this.tableDirectory = new Dictionary();\n    }\n\n    for (var i = 0; i < numTables; ++i) {\n      var table = new TtfTableInfo();\n      var tableKey = this.readString(this.int32Size);\n      table.checksum = this.readInt32(this.offset);\n      table.offset = this.readInt32(this.offset);\n      table.length = this.readInt32(this.offset);\n      this.tableDirectory.setValue(tableKey, table);\n    }\n\n    this.lowestPosition = this.offset;\n\n    if (!this.isTtcFont) {\n      this.fixOffsets();\n    }\n  };\n\n  TtfReader.prototype.fixOffsets = function () {\n    var minOffset = Number.MAX_VALUE; // Search for a smallest offset and compare it with the lowest position found.\n\n    var tableKeys = this.tableDirectory.keys();\n\n    for (var i = 0; i < tableKeys.length; i++) {\n      var value = this.tableDirectory.getValue(tableKeys[i]);\n      var offset = value.offset;\n\n      if (minOffset > offset) {\n        minOffset = offset;\n\n        if (minOffset <= this.lowestPosition) {\n          break;\n        }\n      }\n    }\n\n    var shift = minOffset - this.lowestPosition;\n\n    if (shift !== 0) {\n      var table = new Dictionary();\n\n      for (var i = 0; i < tableKeys.length; i++) {\n        var value = this.tableDirectory.getValue(tableKeys[i]);\n        value.offset -= shift;\n        table.setValue(tableKeys[i], value);\n      }\n\n      this.tableDirectory = table;\n    }\n  };\n\n  TtfReader.prototype.checkPreambula = function () {\n    var version = this.readInt32(this.offset);\n    this.isMacTtf = version === 0x74727565 ? true : false;\n\n    if (version !== 0x10000 && version !== 0x74727565 && version !== 0x4f54544f) {\n      this.isTtcFont = true;\n      this.offset = 0;\n      var fontTag = this.readString(4);\n\n      if (fontTag !== 'ttcf') {\n        throw new Error('Can not read TTF font data');\n      } //skip 4\n\n\n      this.offset += 4;\n      var ttcIdentificationNumber = this.readInt32(this.offset);\n\n      if (ttcIdentificationNumber < 0) {\n        throw new Error('Can not read TTF font data');\n      }\n\n      this.offset = this.readInt32(this.offset);\n      version = this.readInt32(this.offset);\n    }\n\n    return version;\n  };\n\n  TtfReader.prototype.readNameTable = function () {\n    var tableInfo = this.getTable('name');\n    this.offset = tableInfo.offset;\n    var table = new TtfNameTable();\n    table.formatSelector = this.readUInt16(this.offset);\n    table.recordsCount = this.readUInt16(this.offset);\n    table.offset = this.readUInt16(this.offset);\n    table.nameRecords = [];\n    var recordSize = 12;\n    var position = this.offset;\n\n    for (var i = 0; i < table.recordsCount; i++) {\n      this.offset = position;\n      var record = new TtfNameRecord();\n      record.platformID = this.readUInt16(this.offset);\n      record.encodingID = this.readUInt16(this.offset);\n      record.languageID = this.readUInt16(this.offset);\n      record.nameID = this.readUInt16(this.offset);\n      record.length = this.readUInt16(this.offset);\n      record.offset = this.readUInt16(this.offset);\n      this.offset = tableInfo.offset + table.offset + record.offset;\n      var unicode = record.platformID === 0 || record.platformID === 3;\n      record.name = this.readString(record.length, unicode);\n      table.nameRecords[i] = record;\n      position += recordSize;\n    }\n\n    return table;\n  };\n\n  TtfReader.prototype.readHeadTable = function () {\n    var tableInfo = this.getTable('head');\n    this.offset = tableInfo.offset;\n    var table = new TtfHeadTable();\n    table.version = this.readFixed(this.offset);\n    table.fontRevision = this.readFixed(this.offset);\n    table.checkSumAdjustment = this.readUInt32(this.offset);\n    table.magicNumber = this.readUInt32(this.offset);\n    table.flags = this.readUInt16(this.offset);\n    table.unitsPerEm = this.readUInt16(this.offset);\n    table.created = this.readInt64(this.offset);\n    table.modified = this.readInt64(this.offset);\n    table.xMin = this.readInt16(this.offset);\n    table.yMin = this.readInt16(this.offset);\n    table.xMax = this.readInt16(this.offset);\n    table.yMax = this.readInt16(this.offset);\n    table.macStyle = this.readUInt16(this.offset);\n    table.lowestReadableSize = this.readUInt16(this.offset);\n    table.fontDirectionHint = this.readInt16(this.offset);\n    table.indexToLocalFormat = this.readInt16(this.offset);\n    table.glyphDataFormat = this.readInt16(this.offset);\n    return table;\n  };\n\n  TtfReader.prototype.readHorizontalHeaderTable = function () {\n    var tableInfo = this.getTable('hhea');\n    this.offset = tableInfo.offset;\n    var table = new TtfHorizontalHeaderTable();\n    table.version = this.readFixed(this.offset);\n    table.ascender = this.readInt16(this.offset);\n    table.descender = this.readInt16(this.offset);\n    table.lineGap = this.readInt16(this.offset);\n    table.advanceWidthMax = this.readUInt16(this.offset);\n    table.minLeftSideBearing = this.readInt16(this.offset);\n    table.minRightSideBearing = this.readInt16(this.offset);\n    table.xMaxExtent = this.readInt16(this.offset);\n    table.caretSlopeRise = this.readInt16(this.offset);\n    table.caretSlopeRun = this.readInt16(this.offset); //skip 2 * 5\n\n    this.offset += 10;\n    table.metricDataFormat = this.readInt16(this.offset);\n    table.numberOfHMetrics = this.readUInt16(this.offset);\n    return table;\n  };\n\n  TtfReader.prototype.readOS2Table = function () {\n    var tableInfo = this.getTable('OS/2');\n    this.offset = tableInfo.offset;\n    var table = new TtfOS2Table();\n    table.version = this.readUInt16(this.offset);\n    table.xAvgCharWidth = this.readInt16(this.offset);\n    table.usWeightClass = this.readUInt16(this.offset);\n    table.usWidthClass = this.readUInt16(this.offset);\n    table.fsType = this.readInt16(this.offset);\n    table.ySubscriptXSize = this.readInt16(this.offset);\n    table.ySubscriptYSize = this.readInt16(this.offset);\n    table.ySubscriptXOffset = this.readInt16(this.offset);\n    table.ySubscriptYOffset = this.readInt16(this.offset);\n    table.ySuperscriptXSize = this.readInt16(this.offset);\n    table.ySuperscriptYSize = this.readInt16(this.offset);\n    table.ySuperscriptXOffset = this.readInt16(this.offset);\n    table.ySuperscriptYOffset = this.readInt16(this.offset);\n    table.yStrikeoutSize = this.readInt16(this.offset);\n    table.yStrikeoutPosition = this.readInt16(this.offset);\n    table.sFamilyClass = this.readInt16(this.offset);\n    table.panose = this.readBytes(10);\n    table.ulUnicodeRange1 = this.readUInt32(this.offset);\n    table.ulUnicodeRange2 = this.readUInt32(this.offset);\n    table.ulUnicodeRange3 = this.readUInt32(this.offset);\n    table.ulUnicodeRange4 = this.readUInt32(this.offset);\n    table.vendorIdentifier = this.readBytes(4);\n    table.fsSelection = this.readUInt16(this.offset);\n    table.usFirstCharIndex = this.readUInt16(this.offset);\n    table.usLastCharIndex = this.readUInt16(this.offset);\n    table.sTypoAscender = this.readInt16(this.offset);\n    table.sTypoDescender = this.readInt16(this.offset);\n    table.sTypoLineGap = this.readInt16(this.offset);\n    table.usWinAscent = this.readUInt16(this.offset);\n    table.usWinDescent = this.readUInt16(this.offset);\n    table.ulCodePageRange1 = this.readUInt32(this.offset);\n    table.ulCodePageRange2 = this.readUInt32(this.offset);\n\n    if (table.version > 1) {\n      table.sxHeight = this.readInt16(this.offset);\n      table.sCapHeight = this.readInt16(this.offset);\n      table.usDefaultChar = this.readUInt16(this.offset);\n      table.usBreakChar = this.readUInt16(this.offset);\n      table.usMaxContext = this.readUInt16(this.offset);\n    } else {\n      table.sxHeight = 0;\n      table.sCapHeight = 0;\n      table.usDefaultChar = 0;\n      table.usBreakChar = 0;\n      table.usMaxContext = 0;\n    }\n\n    return table;\n  };\n\n  TtfReader.prototype.readPostTable = function () {\n    var tableInfo = this.getTable('post');\n    this.offset = tableInfo.offset;\n    var table = new TtfPostTable();\n    table.formatType = this.readFixed(this.offset);\n    table.italicAngle = this.readFixed(this.offset);\n    table.underlinePosition = this.readInt16(this.offset);\n    table.underlineThickness = this.readInt16(this.offset);\n    table.isFixedPitch = this.readUInt32(this.offset);\n    table.minType42 = this.readUInt32(this.offset);\n    table.maxType42 = this.readUInt32(this.offset);\n    table.minType1 = this.readUInt32(this.offset);\n    table.maxType1 = this.readUInt32(this.offset);\n    return table;\n  };\n  /**\n   * Reads Width of the glyphs.\n   */\n\n\n  TtfReader.prototype.readWidthTable = function (glyphCount, unitsPerEm) {\n    var tableInfo = this.getTable('hmtx');\n    this.offset = tableInfo.offset;\n    var width = [];\n\n    for (var i = 0; i < glyphCount; i++) {\n      var glyph = new TtfLongHorMetric();\n      glyph.advanceWidth = this.readUInt16(this.offset);\n      glyph.lsb = this.readInt16(this.offset);\n      var glyphWidth = glyph.advanceWidth * 1000 / unitsPerEm;\n      width.push(Math.floor(glyphWidth));\n    }\n\n    return width;\n  };\n  /**\n   * Reads the cmap table.\n   */\n\n\n  TtfReader.prototype.readCmapTable = function () {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset;\n    var table = new TtfCmapTable();\n    table.version = this.readUInt16(this.offset);\n    table.tablesCount = this.readUInt16(this.offset);\n    var position = this.offset;\n    var subTables = [];\n\n    for (var i = 0; i < table.tablesCount; i++) {\n      this.offset = position;\n      var subTable = new TtfCmapSubTable();\n      subTable.platformID = this.readUInt16(this.offset);\n      subTable.encodingID = this.readUInt16(this.offset);\n      subTable.offset = this.readUInt32(this.offset);\n      position = this.offset;\n      this.readCmapSubTable(subTable);\n      subTables[i] = subTable;\n    }\n\n    return subTables;\n  };\n  /**\n   * Reads the cmap sub table.\n   */\n\n\n  TtfReader.prototype.readCmapSubTable = function (subTable) {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset + subTable.offset;\n    var format = this.readUInt16(this.offset);\n    var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n    var platform = encoding === TtfCmapEncoding.Macintosh ? TtfPlatformID.Macintosh : TtfPlatformID.Microsoft;\n\n    if (encoding !== TtfCmapEncoding.Unknown) {\n      switch (format) {\n        case TtfCmapFormat.Apple:\n          this.readAppleCmapTable(subTable, encoding);\n          break;\n\n        case TtfCmapFormat.Microsoft:\n          this.readMicrosoftCmapTable(subTable, encoding);\n          break;\n\n        case TtfCmapFormat.Trimmed:\n          this.readTrimmedCmapTable(subTable, encoding);\n          break;\n      }\n    }\n  };\n  /**\n   * Reads Symbol cmap table.\n   */\n\n\n  TtfReader.prototype.readAppleCmapTable = function (subTable, encoding) {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset + subTable.offset;\n    var table = new TtfAppleCmapSubTable();\n    table.format = this.readUInt16(this.offset);\n    table.length = this.readUInt16(this.offset);\n    table.version = this.readUInt16(this.offset);\n\n    if (this.maxMacIndex === null || this.maxMacIndex === undefined) {\n      this.maxMacIndex = 0;\n    }\n\n    for (var i = 0; i < 256; ++i) {\n      var glyphInfo = new TtfGlyphInfo();\n      glyphInfo.index = this.readByte(this.offset);\n      glyphInfo.width = this.getWidth(glyphInfo.index);\n      glyphInfo.charCode = i;\n      this.macintosh.setValue(i, glyphInfo);\n      this.addGlyph(glyphInfo, encoding); // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n\n      this.maxMacIndex = Math.max(i, this.maxMacIndex);\n    }\n  };\n  /**\n   * Reads Symbol cmap table.\n   */\n\n\n  TtfReader.prototype.readMicrosoftCmapTable = function (subTable, encoding) {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset + subTable.offset;\n    var collection = encoding === TtfCmapEncoding.Unicode ? this.microsoft : this.macintosh;\n    var table = new TtfMicrosoftCmapSubTable();\n    table.format = this.readUInt16(this.offset);\n    table.length = this.readUInt16(this.offset);\n    table.version = this.readUInt16(this.offset);\n    table.segCountX2 = this.readUInt16(this.offset);\n    table.searchRange = this.readUInt16(this.offset);\n    table.entrySelector = this.readUInt16(this.offset);\n    table.rangeShift = this.readUInt16(this.offset);\n    var segCount = table.segCountX2 / 2;\n    table.endCount = this.readUshortArray(segCount);\n    table.reservedPad = this.readUInt16(this.offset);\n    table.startCount = this.readUshortArray(segCount);\n    table.idDelta = this.readUshortArray(segCount);\n    table.idRangeOffset = this.readUshortArray(segCount);\n    var length = table.length / 2 - 8 - segCount * 4;\n    table.glyphID = this.readUshortArray(length); // Process glyphIdArray array.\n\n    var codeOffset = 0;\n    var index = 0;\n\n    for (var j = 0; j < segCount; j++) {\n      for (var k = table.startCount[j]; k <= table.endCount[j] && k !== 65535; k++) {\n        if (table.idRangeOffset[j] === 0) {\n          codeOffset = k + table.idDelta[j] & 65535;\n        } else {\n          index = j + table.idRangeOffset[j] / 2 - segCount + k - table.startCount[j];\n\n          if (index >= table.glyphID.length) {\n            continue;\n          }\n\n          codeOffset = table.glyphID[index] + table.idDelta[j] & 65535;\n        }\n\n        var glyph = new TtfGlyphInfo();\n        glyph.index = codeOffset;\n        glyph.width = this.getWidth(glyph.index);\n        var id = encoding === TtfCmapEncoding.Symbol ? (k & 0xff00) === 0xf000 ? k & 0xff : k : k;\n        glyph.charCode = id;\n        collection.setValue(id, glyph);\n        this.addGlyph(glyph, encoding);\n      }\n    }\n  };\n  /**\n   * Reads Trimed cmap table.\n   */\n\n\n  TtfReader.prototype.readTrimmedCmapTable = function (subTable, encoding) {\n    var tableInfo = this.getTable('cmap');\n    this.offset = tableInfo.offset + subTable.offset;\n    var table = new TtfTrimmedCmapSubTable();\n    table.format = this.readUInt16(this.offset);\n    table.length = this.readUInt16(this.offset);\n    table.version = this.readUInt16(this.offset);\n    table.firstCode = this.readUInt16(this.offset);\n    table.entryCount = this.readUInt16(this.offset);\n\n    for (var i = 0; i < table.entryCount; ++i) {\n      var glyphInfo = new TtfGlyphInfo();\n      glyphInfo.index = this.readUInt16(this.offset);\n      glyphInfo.width = this.getWidth(glyphInfo.index);\n      glyphInfo.charCode = i + table.firstCode;\n      this.macintosh.setValue(i, glyphInfo);\n      this.addGlyph(glyphInfo, encoding); // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n\n      this.maxMacIndex = Math.max(i, this.maxMacIndex);\n    }\n  };\n\n  TtfReader.prototype.initializeFontName = function (nameTable) {\n    for (var i = 0; i < nameTable.recordsCount; i++) {\n      var record = nameTable.nameRecords[i];\n\n      if (record.nameID === 1) {\n        //font family\n        this.metrics.fontFamily = record.name;\n      } else if (record.nameID === 6) {\n        //post script name\n        this.metrics.postScriptName = record.name;\n      }\n      /* tslint:disable */\n\n\n      if (this.metrics.fontFamily !== null && this.metrics.fontFamily !== undefined && this.metrics.postScriptName !== null && this.metrics.postScriptName !== undefined) {\n        break;\n      }\n      /* tslint:disable */\n\n    }\n  };\n\n  TtfReader.prototype.getTable = function (name) {\n    // if (name === null) {\n    //     throw new Error('Argument Null Exception : name');\n    // }\n    var table = new TtfTableInfo();\n    var obj;\n\n    if (this.tableDirectory.containsKey(name)) {\n      obj = this.tableDirectory.getValue(name);\n    }\n\n    if (obj !== null && obj !== undefined) {\n      table = obj;\n    }\n\n    return table;\n  };\n  /**\n   * Returns width of the glyph.\n   */\n\n\n  TtfReader.prototype.getWidth = function (glyphCode) {\n    glyphCode = glyphCode < this.width.length ? glyphCode : this.width.length - 1;\n    return this.width[glyphCode];\n  };\n  /**\n   * Gets CMAP encoding based on platform ID and encoding ID.\n   */\n\n  /* tslint:disable */\n\n\n  TtfReader.prototype.getCmapEncoding = function (platformID, encodingID) {\n    var format = TtfCmapEncoding.Unknown;\n\n    if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Undefined) {\n      // When building a symbol font for Windows,\n      // the platform ID should be 3 and the encoding ID should be 0.\n      format = TtfCmapEncoding.Symbol;\n    } else if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Unicode) {\n      // When building a Unicode font for Windows,\n      // the platform ID should be 3 and the encoding ID should be 1.\n      format = TtfCmapEncoding.Unicode;\n    } else if (platformID == TtfPlatformID.Macintosh && encodingID == TtfMacintoshEncodingID.Roman) {\n      // When building a font that will be used on the Macintosh,\n      // the platform ID should be 1 and the encoding ID should be 0.\n      format = TtfCmapEncoding.Macintosh;\n    }\n\n    return format;\n  };\n  /* tslint:enable */\n\n  /**\n   * Adds glyph to the collection.\n   */\n\n\n  TtfReader.prototype.addGlyph = function (glyph, encoding) {\n    var collection = null;\n\n    switch (encoding) {\n      case TtfCmapEncoding.Unicode:\n        collection = this.microsoftGlyphs;\n        break;\n\n      case TtfCmapEncoding.Macintosh:\n      case TtfCmapEncoding.Symbol:\n        collection = this.macintoshGlyphs;\n        break;\n    }\n\n    collection.setValue(glyph.index, glyph);\n  };\n  /**\n   * Initializes metrics.\n   */\n\n  /* tslint:disable */\n\n\n  TtfReader.prototype.initializeMetrics = function (nameTable, headTable, horizontalHeadTable, os2Table, postTable, cmapTables) {\n    /* tslint:enable */\n    // if (cmapTables === null) {\n    //     throw new Error('ArgumentNullException : cmapTables');\n    // }\n    this.initializeFontName(nameTable); // Get font encoding.\n\n    var bSymbol = false;\n\n    for (var i = 0; i < cmapTables.length; i++) {\n      var subTable = cmapTables[i];\n      var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n\n      if (encoding === TtfCmapEncoding.Symbol) {\n        bSymbol = true;\n        break;\n      }\n    }\n\n    this.metrics.isSymbol = bSymbol;\n    this.metrics.macStyle = headTable.macStyle;\n    this.metrics.isFixedPitch = postTable.isFixedPitch !== 0;\n    this.metrics.italicAngle = postTable.italicAngle;\n    var factor = 1000 / headTable.unitsPerEm;\n    this.metrics.winAscent = os2Table.sTypoAscender * factor;\n    this.metrics.macAscent = horizontalHeadTable.ascender * factor; //m_metrics.MacAscent = os2Table.UsWinAscent * factor;\n    // NOTE: This is stange workaround. The value is good if os2Table.SCapHeight != 0, otherwise it should be properly computed.\n\n    this.metrics.capHeight = os2Table.sCapHeight !== 0 ? os2Table.sCapHeight : 0.7 * headTable.unitsPerEm * factor;\n    this.metrics.winDescent = os2Table.sTypoDescender * factor;\n    this.metrics.macDescent = horizontalHeadTable.descender * factor; //m_metrics.MacDescent = -os2Table.UsWinDescent * factor;\n\n    this.metrics.leading = (os2Table.sTypoAscender - os2Table.sTypoDescender + os2Table.sTypoLineGap) * factor;\n    this.metrics.lineGap = Math.ceil(horizontalHeadTable.lineGap * factor);\n    var left = headTable.xMin * factor;\n    var top = Math.ceil(this.metrics.macAscent + this.metrics.lineGap);\n    var right = headTable.xMax * factor;\n    var bottom = this.metrics.macDescent;\n    this.metrics.fontBox = new Rectangle(left, top, right, bottom); // NOTE: Strange!\n\n    this.metrics.stemV = 80;\n    this.metrics.widthTable = this.updateWidth();\n    this.metrics.contains = this.tableDirectory.containsKey('CFF');\n    this.metrics.subScriptSizeFactor = headTable.unitsPerEm / os2Table.ySubscriptYSize;\n    this.metrics.superscriptSizeFactor = headTable.unitsPerEm / os2Table.ySuperscriptYSize;\n  };\n  /**\n   * Updates chars structure which is used in the case of ansi encoding (256 bytes).\n   */\n\n\n  TtfReader.prototype.updateWidth = function () {\n    var count = 256;\n    var bytes = [];\n\n    if (this.metrics.isSymbol) {\n      for (var i = 0; i < count; i++) {\n        var glyphInfo = this.getGlyph(String.fromCharCode(i));\n        bytes[i] = glyphInfo.empty ? 0 : glyphInfo.width;\n      }\n    } else {\n      var byteToProcess = [];\n      var unknown = '?';\n      var space = String.fromCharCode(32);\n\n      for (var i = 0; i < count; i++) {\n        byteToProcess[0] = i;\n        var text = this.getString(byteToProcess, 0, byteToProcess.length);\n        var ch = text.length > 0 ? text[0] : unknown;\n        var glyphInfo = this.getGlyph(ch);\n\n        if (!glyphInfo.empty) {\n          bytes[i] = glyphInfo.width;\n        } else {\n          glyphInfo = this.getGlyph(space);\n          bytes[i] = glyphInfo.empty ? 0 : glyphInfo.width;\n        }\n      }\n    }\n\n    return bytes;\n  };\n  /**\n   * Returns default glyph.\n   */\n\n\n  TtfReader.prototype.getDefaultGlyph = function () {\n    var glyph = this.getGlyph(StringTokenizer.whiteSpace);\n    return glyph;\n  };\n  /**\n   * Reads unicode string from byte array.\n   */\n\n\n  TtfReader.prototype.getString = function (byteToProcess, start, length) {\n    var result = '';\n\n    for (var index = 0; index < length; index++) {\n      result += String.fromCharCode(byteToProcess[index + start]);\n    }\n\n    return result;\n  };\n  /**\n   * Reads loca table.\n   */\n\n\n  TtfReader.prototype.readLocaTable = function (bShort) {\n    var tableInfo = this.getTable('loca');\n    this.offset = tableInfo.offset;\n    var table = new TtfLocaTable();\n    var buffer = null;\n\n    if (bShort) {\n      var len = tableInfo.length / 2;\n      buffer = [];\n\n      for (var i = 0; i < len; i++) {\n        buffer[i] = this.readUInt16(this.offset) * 2;\n      }\n    } else {\n      var len = tableInfo.length / 4;\n      buffer = [];\n\n      for (var i = 0; i < len; i++) {\n        buffer[i] = this.readUInt32(this.offset);\n      }\n    }\n\n    table.offsets = buffer;\n    return table;\n  };\n  /**\n   * Updates hash table of used glyphs.\n   */\n\n\n  TtfReader.prototype.updateGlyphChars = function (glyphChars, locaTable) {\n    // if (glyphChars === null) {\n    //     throw new Error('Argument Null Exception : glyphChars');\n    // }\n    // Add zero key.\n    if (!glyphChars.containsKey(0)) {\n      glyphChars.setValue(0, 0);\n    }\n\n    var clone = new Dictionary();\n    var glyphCharKeys = glyphChars.keys();\n\n    for (var i = 0; i < glyphCharKeys.length; i++) {\n      clone.setValue(glyphCharKeys[i], glyphChars.getValue(glyphCharKeys[i]));\n    }\n\n    for (var i = 0; i < glyphCharKeys.length; i++) {\n      var nextKey = glyphCharKeys[i];\n      this.processCompositeGlyph(glyphChars, nextKey, locaTable);\n    }\n  };\n  /**\n   * Checks if glyph is composite or not.\n   */\n\n\n  TtfReader.prototype.processCompositeGlyph = function (glyphChars, glyph, locaTable) {\n    // if (glyphChars === null) {\n    //     throw new Error('Argument Null Exception : glyphChars');\n    // }\n    // Is in range.\n    if (glyph < locaTable.offsets.length - 1) {\n      var glyphOffset = locaTable.offsets[glyph];\n\n      if (glyphOffset !== locaTable.offsets[glyph + 1]) {\n        var tableInfo = this.getTable('glyf');\n        this.offset = tableInfo.offset + glyphOffset;\n        var glyphHeader = new TtfGlyphHeader();\n        glyphHeader.numberOfContours = this.readInt16(this.offset);\n        glyphHeader.xMin = this.readInt16(this.offset);\n        glyphHeader.yMin = this.readInt16(this.offset);\n        glyphHeader.xMax = this.readInt16(this.offset);\n        glyphHeader.yMax = this.readInt16(this.offset); // Glyph is composite.\n\n        if (glyphHeader.numberOfContours < 0) {\n          var skipBytes = 0;\n          var entry = true;\n\n          while (entry) {\n            var flags = this.readUInt16(this.offset);\n            var glyphIndex = this.readUInt16(this.offset);\n\n            if (!glyphChars.containsKey(glyphIndex)) {\n              glyphChars.setValue(glyphIndex, 0);\n            }\n\n            if ((flags & TtfCompositeGlyphFlags.MoreComponents) === 0) {\n              break;\n            }\n\n            skipBytes = (flags & TtfCompositeGlyphFlags.Arg1And2AreWords) !== 0 ? 4 : 2;\n\n            if ((flags & TtfCompositeGlyphFlags.WeHaveScale) !== 0) {\n              skipBytes += 2;\n            } else if ((flags & TtfCompositeGlyphFlags.WeHaveAnXyScale) !== 0) {\n              skipBytes += 4;\n            } else if ((flags & TtfCompositeGlyphFlags.WeHaveTwoByTwo) !== 0) {\n              skipBytes += 2 * 4;\n            }\n\n            this.offset += skipBytes;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Creates new glyph tables based on chars that are used for output.\n   */\n\n  /* tslint:disable */\n\n\n  TtfReader.prototype.generateGlyphTable = function (glyphChars, locaTable, newLocaTable, newGlyphTable) {\n    /* tslint:enable */\n    // if (glyphChars === null) {\n    //     throw new Error('Argument Null Exception : glyphChars');\n    // }\n    newLocaTable = []; // Sorting used glyphs keys.\n\n    var activeGlyphs = glyphChars.keys();\n    activeGlyphs.sort(function (a, b) {\n      return a - b;\n    });\n    var glyphSize = 0;\n\n    for (var i = 0; i < activeGlyphs.length; i++) {\n      var glyphIndex = activeGlyphs[i];\n\n      if (locaTable.offsets.length > 0) {\n        glyphSize += locaTable.offsets[glyphIndex + 1] - locaTable.offsets[glyphIndex];\n      }\n    }\n\n    var glyphSizeAligned = this.align(glyphSize);\n    newGlyphTable = [];\n\n    for (var i = 0; i < glyphSizeAligned; i++) {\n      newGlyphTable.push(0);\n    }\n\n    var nextGlyphOffset = 0;\n    var nextGlyphIndex = 0;\n    var table = this.getTable('glyf'); // Creating NewLocaTable - that would hold offsets for filtered glyphs.\n\n    for (var i = 0; i < locaTable.offsets.length; i++) {\n      newLocaTable.push(nextGlyphOffset);\n\n      if (nextGlyphIndex < activeGlyphs.length && activeGlyphs[nextGlyphIndex] === i) {\n        ++nextGlyphIndex;\n        newLocaTable[i] = nextGlyphOffset;\n        var oldGlyphOffset = locaTable.offsets[i];\n        var oldNextGlyphOffset = locaTable.offsets[i + 1] - oldGlyphOffset;\n\n        if (oldNextGlyphOffset > 0) {\n          this.offset = table.offset + oldGlyphOffset;\n          var result = this.read(newGlyphTable, nextGlyphOffset, oldNextGlyphOffset);\n          newGlyphTable = result.buffer;\n          nextGlyphOffset += oldNextGlyphOffset;\n        }\n      }\n    }\n\n    return {\n      glyphTableSize: glyphSize,\n      newLocaTable: newLocaTable,\n      newGlyphTable: newGlyphTable\n    };\n  };\n  /**\n   * Updates new Loca table.\n   */\n\n  /* tslint:disable */\n\n\n  TtfReader.prototype.updateLocaTable = function (newLocaTable, bLocaIsShort, newLocaTableOut) {\n    /* tslint:enable */\n    if (newLocaTable === null) {\n      throw new Error('Argument Null Exception : newLocaTable');\n    }\n\n    var size = bLocaIsShort ? newLocaTable.length * 2 : newLocaTable.length * 4;\n    var count = this.align(size); //BigEndianWiter\n\n    var writer = new BigEndianWriter(count);\n\n    for (var i = 0; i < newLocaTable.length; i++) {\n      var value = newLocaTable[i];\n\n      if (bLocaIsShort) {\n        value /= 2;\n        writer.writeShort(value);\n      } else {\n        writer.writeInt(value);\n      }\n    }\n\n    return {\n      newLocaUpdated: writer.data,\n      newLocaSize: size\n    };\n  };\n  /**\n   * Aligns number to be divisible on 4.\n   */\n\n\n  TtfReader.prototype.align = function (value) {\n    return value + 3 & ~3;\n  };\n  /**\n   * Returns font program data.\n   */\n\n  /* tslint:disable */\n\n\n  TtfReader.prototype.getFontProgram = function (newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n    /* tslint:enable */\n    if (newLocaTableOut === null) {\n      throw new Error('Argument Null Exception : newLocaTableOut');\n    }\n\n    if (newGlyphTable === null) {\n      throw new Error('Argument Null Exception : newGlyphTable');\n    }\n\n    var tableNames = this.tableNames;\n    var result = this.getFontProgramLength(newLocaTableOut, newGlyphTable, 0);\n    var fontProgramLength = result.fontProgramLength;\n    var numTables = result.numTables;\n    var writer = new BigEndianWriter(fontProgramLength);\n    writer.writeInt(0x10000);\n    writer.writeShort(numTables);\n    var entrySelector = this.entrySelectors[numTables];\n    writer.writeShort((1 << (entrySelector & 31)) * 16);\n    writer.writeShort(entrySelector);\n    writer.writeShort((numTables - (1 << (entrySelector & 31))) * 16); // Writing to destination buffer - checksums && sizes of used tables.\n\n    this.writeCheckSums(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize); // // Writing to destination buffer - used glyphs.\n\n    this.writeGlyphs(writer, newLocaTableOut, newGlyphTable);\n    return writer.data;\n  };\n  /* tslint:disable */\n\n\n  TtfReader.prototype.getFontProgramLength = function (newLocaTableOut, newGlyphTable, numTables) {\n    /* tslint:enable */\n    if (newLocaTableOut === null) {\n      throw new Error('Argument Null Exception : newLocaTableOut');\n    }\n\n    if (newGlyphTable === null) {\n      throw new Error('Argument Null Exception : newGlyphTable');\n    } // glyf and loca are used by default;\n\n\n    numTables = 2;\n    var tableNames = this.tableNames;\n    var fontProgramLength = 0;\n\n    for (var i = 0; i < tableNames.length; i++) {\n      var tableName = tableNames[i];\n\n      if (tableName !== 'glyf' && tableName !== 'loca') {\n        var table = this.getTable(tableName);\n\n        if (!table.empty) {\n          ++numTables;\n          fontProgramLength += this.align(table.length);\n        }\n      }\n    }\n\n    fontProgramLength += newLocaTableOut.length;\n    fontProgramLength += newGlyphTable.length;\n    var usedTablesSize = numTables * 16 + 3 * 4;\n    fontProgramLength += usedTablesSize;\n    return {\n      fontProgramLength: fontProgramLength,\n      numTables: numTables\n    };\n  };\n  /**\n   * Writing to destination buffer - checksums and sizes of used tables.\n   */\n\n  /* tslint:disable */\n\n\n  TtfReader.prototype.writeCheckSums = function (writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n    /* tslint:enable */\n    if (writer === null) {\n      throw new Error('Argument Null Exception : writer');\n    }\n\n    if (newLocaTableOut === null) {\n      throw new Error('Argument Null Exception : newLocaTableOut');\n    }\n\n    if (newGlyphTable === null) {\n      throw new Error('Argument Null Exception : newGlyphTable');\n    }\n\n    var tableNames = this.tableNames;\n    var usedTablesSize = numTables * 16 + 3 * 4;\n    var nextTableSize = 0;\n\n    for (var i = 0; i < tableNames.length; i++) {\n      var tableName = tableNames[i];\n      var tableInfo = this.getTable(tableName);\n\n      if (tableInfo.empty) {\n        continue;\n      }\n\n      writer.writeString(tableName);\n\n      if (tableName === 'glyf') {\n        var checksum = this.calculateCheckSum(newGlyphTable);\n        writer.writeInt(checksum);\n        nextTableSize = glyphTableSize;\n      } else if (tableName === 'loca') {\n        var checksum = this.calculateCheckSum(newLocaTableOut);\n        writer.writeInt(checksum);\n        nextTableSize = locaTableSize;\n      } else {\n        writer.writeInt(tableInfo.checksum);\n        nextTableSize = tableInfo.length;\n      }\n\n      writer.writeUInt(usedTablesSize);\n      writer.writeUInt(nextTableSize);\n      usedTablesSize += this.align(nextTableSize);\n    }\n  };\n  /**\n   * Gets checksum from source buffer.\n   */\n\n\n  TtfReader.prototype.calculateCheckSum = function (bytes) {\n    if (bytes === null) {\n      throw new Error('Argument Null Exception : bytes');\n    }\n\n    var pos = 0;\n    var byte1 = 0;\n    var byte2 = 0;\n    var byte3 = 0;\n    var byte4 = 0;\n\n    for (var i = 0; i < (bytes.length + 1) / 4; i++) {\n      byte4 += bytes[pos++] & 255;\n      byte3 += bytes[pos++] & 255;\n      byte2 += bytes[pos++] & 255;\n      byte1 += bytes[pos++] & 255;\n    }\n\n    var result = byte1;\n    result += byte2 << 8;\n    result += byte3 << 16;\n    result += byte4 << 24;\n    return result;\n  };\n  /**\n   * Writing to destination buffer - used glyphs.\n   */\n\n\n  TtfReader.prototype.writeGlyphs = function (writer, newLocaTable, newGlyphTable) {\n    if (writer === null) {\n      throw new Error('Argument Null Exception : writer');\n    }\n\n    if (newLocaTable === null) {\n      throw new Error('Argument Null Exception : newLocaTableOut');\n    }\n\n    if (newGlyphTable === null) {\n      throw new Error('Argument Null Exception : newGlyphTable');\n    }\n\n    var tableNames = this.tableNames;\n\n    for (var i = 0; i < tableNames.length; i++) {\n      var tableName = tableNames[i];\n      var tableInfo = this.getTable(tableName);\n\n      if (tableInfo.empty) {\n        continue;\n      }\n\n      if (tableName === 'glyf') {\n        writer.writeBytes(newGlyphTable);\n      } else if (tableName === 'loca') {\n        writer.writeBytes(newLocaTable);\n      } else {\n        var count = this.align(tableInfo.length);\n        var buff = [];\n\n        for (var i_1 = 0; i_1 < count; i_1++) {\n          buff.push(0);\n        }\n\n        this.offset = tableInfo.offset;\n        var result = this.read(buff, 0, tableInfo.length);\n        writer.writeBytes(result.buffer);\n      }\n    }\n  }; //public methods\n\n  /**\n   * Sets position value of font data.\n   */\n\n\n  TtfReader.prototype.setOffset = function (offset) {\n    this.offset = offset;\n  };\n  /**\n   * Creates font Internals\n   * @private\n   */\n\n\n  TtfReader.prototype.createInternals = function () {\n    this.metrics = new TtfMetrics();\n    var nameTable = this.readNameTable();\n    var headTable = this.readHeadTable();\n    this.bIsLocaShort = headTable.indexToLocalFormat === 0;\n    var horizontalHeadTable = this.readHorizontalHeaderTable();\n    var os2Table = this.readOS2Table();\n    var postTable = this.readPostTable();\n    this.width = this.readWidthTable(horizontalHeadTable.numberOfHMetrics, headTable.unitsPerEm);\n    var subTables = this.readCmapTable();\n    this.initializeMetrics(nameTable, headTable, horizontalHeadTable, os2Table, postTable, subTables);\n  };\n\n  TtfReader.prototype.getGlyph = function (charCode) {\n    if (typeof charCode === 'number') {\n      var obj1 = null;\n\n      if (!this.metrics.isSymbol && this.microsoftGlyphs != null) {\n        if (this.microsoftGlyphs.containsKey(charCode)) {\n          obj1 = this.microsoftGlyphs.getValue(charCode);\n        }\n      } else if (this.metrics.isSymbol && this.macintoshGlyphs != null) {\n        if (this.macintoshGlyphs.containsKey(charCode)) {\n          obj1 = this.macintoshGlyphs.getValue(charCode);\n        }\n      }\n\n      var glyph = obj1 != null ? obj1 : this.getDefaultGlyph();\n      return glyph;\n    } else {\n      var obj = null;\n      var code = charCode.charCodeAt(0);\n\n      if (!this.metrics.isSymbol && this.microsoft !== null) {\n        if (this.microsoft.containsKey(code)) {\n          obj = this.microsoft.getValue(code);\n\n          if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n            this.isFontPresent = true;\n          }\n        } else if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n          this.isFontPresent = false;\n        }\n      } else if (this.metrics.isSymbol && this.macintosh !== null || this.isMacTTF) {\n        // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n        if (this.maxMacIndex !== 0) {\n          code %= this.maxMacIndex + 1;\n        } else {\n          code = (code & 0xff00) === 0xf000 ? code & 0xff : code;\n        }\n\n        if (this.macintosh.containsKey(code)) {\n          obj = this.macintosh.getValue(code);\n          this.isFontPresent = true;\n        }\n      } // Fix for StackOverFlow exception in XPS to PDF converter\n\n\n      if (charCode === StringTokenizer.whiteSpace && obj === null) {\n        obj = new TtfGlyphInfo();\n      }\n\n      var glyph = obj !== null ? obj : this.getDefaultGlyph();\n      return glyph;\n    }\n  };\n  /**\n   * Gets hash table with chars indexed by glyph index.\n   */\n\n\n  TtfReader.prototype.getGlyphChars = function (chars) {\n    if (chars === null || chars === undefined) {\n      throw new Error('Argument Null Exception : chars');\n    }\n\n    var dictionary = new Dictionary();\n    var charKeys = chars.keys();\n\n    for (var i = 0; i < charKeys.length; i++) {\n      var ch = charKeys[i];\n      var glyph = this.getGlyph(ch);\n\n      if (!glyph.empty) {\n        dictionary.setValue(glyph.index, ch.charCodeAt(0));\n      }\n    }\n\n    return dictionary;\n  };\n  /**\n   * Gets all glyphs.\n   */\n\n\n  TtfReader.prototype.getAllGlyphs = function () {\n    var allGlyphInfo = [];\n    var info = new TtfGlyphInfo();\n    var index = 0;\n\n    for (var i = 0; i < this.width.length; i++) {\n      var width = this.width[i];\n      info.index = index;\n      info.width = width;\n      allGlyphInfo.push(info);\n      index++;\n    }\n\n    return allGlyphInfo;\n  };\n  /**\n   * Reads a font's program.\n   * @private\n   */\n\n\n  TtfReader.prototype.readFontProgram = function (chars) {\n    var glyphChars = this.getGlyphChars(chars);\n    var locaTable = this.readLocaTable(this.bIsLocaShort);\n\n    if (glyphChars.size() < chars.size()) {\n      this.missedGlyphs = chars.size() - glyphChars.size();\n    }\n\n    this.updateGlyphChars(glyphChars, locaTable);\n    /* tslint:disable */\n\n    var result1 = this.generateGlyphTable(glyphChars, locaTable, null, null);\n    /* tslint:enable */\n\n    var glyphTableSize = result1.glyphTableSize;\n    var newLocaTable = result1.newLocaTable;\n    var newGlyphTable = result1.newGlyphTable;\n    var result2 = this.updateLocaTable(newLocaTable, this.bIsLocaShort, null);\n    var newLocaSize = result2.newLocaSize;\n    var newLocaUpdated = result2.newLocaUpdated;\n    var fontProgram = this.getFontProgram(newLocaUpdated, newGlyphTable, glyphTableSize, newLocaSize);\n    return fontProgram;\n  };\n  /**\n   * Reconverts string to be in proper format saved into PDF file.\n   */\n\n\n  TtfReader.prototype.convertString = function (text) {\n    if (text === null) {\n      throw new Error('Argument Null Exception : text');\n    }\n\n    var glyph = '';\n    var i = 0;\n\n    for (var k = 0; k < text.length; k++) {\n      var ch = text[k];\n      var glyphInfo = this.getGlyph(ch);\n\n      if (!glyphInfo.empty) {\n        glyph += String.fromCharCode(glyphInfo.index);\n        i++;\n      }\n    }\n\n    return glyph;\n  };\n  /**\n   * Gets char width.\n   */\n\n\n  TtfReader.prototype.getCharWidth = function (code) {\n    var glyphInfo = this.getGlyph(code);\n    glyphInfo = !glyphInfo.empty ? glyphInfo : this.getDefaultGlyph();\n    var codeWidth = !glyphInfo.empty ? glyphInfo.width : 0;\n    return codeWidth;\n  };\n\n  TtfReader.prototype.readString = function (length, isUnicode) {\n    if (isUnicode === undefined) {\n      return this.readString(length, false);\n    } else {\n      //let buffer : number[] = this.readBytes(length);\n      var result = '';\n\n      if (isUnicode) {\n        for (var i = 0; i < length; i++) {\n          if (i % 2 !== 0) {\n            result += String.fromCharCode(this.fontData[this.offset]);\n          }\n\n          this.offset += 1;\n        }\n      } else {\n        for (var i = 0; i < length; i++) {\n          result += String.fromCharCode(this.fontData[this.offset]);\n          this.offset += 1;\n        }\n      }\n\n      return result;\n    }\n  };\n\n  TtfReader.prototype.readFixed = function (offset) {\n    var integer = this.readInt16(offset);\n    var sFraction = this.readInt16(offset + 2);\n    var fraction = sFraction / 16384;\n    return integer + fraction;\n  };\n\n  TtfReader.prototype.readInt32 = function (offset) {\n    var i1 = this.fontData[offset + 3];\n    var i2 = this.fontData[offset + 2];\n    var i3 = this.fontData[offset + 1];\n    var i4 = this.fontData[offset];\n    this.offset += 4;\n    return i1 + (i2 << 8) + (i3 << 16) + (i4 << 24);\n  };\n\n  TtfReader.prototype.readUInt32 = function (offset) {\n    var i1 = this.fontData[offset + 3];\n    var i2 = this.fontData[offset + 2];\n    var i3 = this.fontData[offset + 1];\n    var i4 = this.fontData[offset];\n    this.offset += 4;\n    return i1 | i2 << 8 | i3 << 16 | i4 << 24;\n  }; // private readInt16(offset : number) : number {\n  //     let result : number = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n  //     this.offset += 2;\n  //     return result;\n  // }\n\n\n  TtfReader.prototype.readInt16 = function (offset) {\n    var result = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n    result = result & 1 << 15 ? result - 0x10000 : result;\n    this.offset += 2;\n    return result;\n  };\n\n  TtfReader.prototype.readInt64 = function (offset) {\n    var low = this.readInt32(offset + 4);\n    var n = this.readInt32(offset) * 4294967296.0 + low;\n\n    if (low < 0) {\n      n += 4294967296;\n    }\n\n    return n;\n  };\n\n  TtfReader.prototype.readUInt16 = function (offset) {\n    var result = this.fontData[offset] << 8 | this.fontData[offset + 1];\n    this.offset += 2;\n    return result;\n  };\n  /**\n   * Reads ushort array.\n   */\n\n\n  TtfReader.prototype.readUshortArray = function (length) {\n    var buffer = [];\n\n    for (var i = 0; i < length; i++) {\n      buffer[i] = this.readUInt16(this.offset);\n    }\n\n    return buffer;\n  };\n\n  TtfReader.prototype.readBytes = function (length) {\n    var result = [];\n\n    for (var i = 0; i < length; i++) {\n      result.push(this.fontData[this.offset]);\n      this.offset += 1;\n    }\n\n    return result;\n  };\n\n  TtfReader.prototype.readByte = function (offset) {\n    var result = this.fontData[offset];\n    this.offset += 1;\n    return result;\n  };\n  /**\n   * Reads bytes to array in BigEndian order.\n   * @private\n   */\n\n\n  TtfReader.prototype.read = function (buffer, index, count) {\n    if (buffer === null) {\n      throw new Error('Argument Null Exception : buffer');\n    }\n\n    var written = 0;\n    var read = 0;\n\n    do {\n      for (var i = 0; i < count - written && this.offset + i < this.fontData.length; i++) {\n        buffer[index + i] = this.fontData[this.offset + i];\n      }\n\n      read = count - written;\n      this.offset += read;\n      written += read;\n    } while (written < count);\n\n    return {\n      buffer: buffer,\n      written: written\n    };\n  };\n\n  return TtfReader;\n}();\n\nexport { TtfReader };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-reader.js"],"names":["TtfTableInfo","Dictionary","TtfNameTable","TtfNameRecord","TtfHeadTable","TtfMetrics","TtfHorizontalHeaderTable","TtfOS2Table","TtfPostTable","TtfLongHorMetric","TtfCmapSubTable","TtfCmapTable","TtfGlyphInfo","TtfLocaTable","TtfAppleCmapSubTable","TtfMicrosoftCmapSubTable","TtfTrimmedCmapSubTable","TtfGlyphHeader","Rectangle","StringTokenizer","TtfCmapFormat","TtfCmapEncoding","TtfPlatformID","TtfMicrosoftEncodingID","TtfMacintoshEncodingID","TtfCompositeGlyphFlags","BigEndianWriter","TtfReader","fontData","int32Size","isTtcFont","isMacTtf","metricsName","isMacTTF","missedGlyphs","tableNames","entrySelectors","initialize","Object","defineProperty","prototype","get","macintoshDictionary","undefined","enumerable","configurable","microsoftDictionary","internalMacintoshGlyphs","internalMicrosoftGlyphs","metrics","readFontDictionary","nameTable","readNameTable","headTable","readHeadTable","initializeFontName","macStyle","offset","version","checkPreambula","numTables","readInt16","searchRange","entrySelector","rangeShift","tableDirectory","i","table","tableKey","readString","checksum","readInt32","length","setValue","lowestPosition","fixOffsets","minOffset","Number","MAX_VALUE","tableKeys","keys","value","getValue","shift","fontTag","Error","ttcIdentificationNumber","tableInfo","getTable","formatSelector","readUInt16","recordsCount","nameRecords","recordSize","position","record","platformID","encodingID","languageID","nameID","unicode","name","readFixed","fontRevision","checkSumAdjustment","readUInt32","magicNumber","flags","unitsPerEm","created","readInt64","modified","xMin","yMin","xMax","yMax","lowestReadableSize","fontDirectionHint","indexToLocalFormat","glyphDataFormat","readHorizontalHeaderTable","ascender","descender","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","metricDataFormat","numberOfHMetrics","readOS2Table","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","readBytes","ulUnicodeRange1","ulUnicodeRange2","ulUnicodeRange3","ulUnicodeRange4","vendorIdentifier","fsSelection","usFirstCharIndex","usLastCharIndex","sTypoAscender","sTypoDescender","sTypoLineGap","usWinAscent","usWinDescent","ulCodePageRange1","ulCodePageRange2","sxHeight","sCapHeight","usDefaultChar","usBreakChar","usMaxContext","readPostTable","formatType","italicAngle","underlinePosition","underlineThickness","isFixedPitch","minType42","maxType42","minType1","maxType1","readWidthTable","glyphCount","width","glyph","advanceWidth","lsb","glyphWidth","push","Math","floor","readCmapTable","tablesCount","subTables","subTable","readCmapSubTable","format","encoding","getCmapEncoding","platform","Macintosh","Microsoft","Unknown","Apple","readAppleCmapTable","readMicrosoftCmapTable","Trimmed","readTrimmedCmapTable","maxMacIndex","glyphInfo","index","readByte","getWidth","charCode","macintosh","addGlyph","max","collection","Unicode","microsoft","segCountX2","segCount","endCount","readUshortArray","reservedPad","startCount","idDelta","idRangeOffset","glyphID","codeOffset","j","k","id","Symbol","firstCode","entryCount","fontFamily","postScriptName","obj","containsKey","glyphCode","Undefined","Roman","microsoftGlyphs","macintoshGlyphs","initializeMetrics","horizontalHeadTable","os2Table","postTable","cmapTables","bSymbol","isSymbol","factor","winAscent","macAscent","capHeight","winDescent","macDescent","leading","ceil","left","top","right","bottom","fontBox","stemV","widthTable","updateWidth","contains","subScriptSizeFactor","superscriptSizeFactor","count","bytes","getGlyph","String","fromCharCode","empty","byteToProcess","unknown","space","text","getString","ch","getDefaultGlyph","whiteSpace","start","result","readLocaTable","bShort","buffer","len","offsets","updateGlyphChars","glyphChars","locaTable","clone","glyphCharKeys","nextKey","processCompositeGlyph","glyphOffset","glyphHeader","numberOfContours","skipBytes","entry","glyphIndex","MoreComponents","Arg1And2AreWords","WeHaveScale","WeHaveAnXyScale","WeHaveTwoByTwo","generateGlyphTable","newLocaTable","newGlyphTable","activeGlyphs","sort","a","b","glyphSize","glyphSizeAligned","align","nextGlyphOffset","nextGlyphIndex","oldGlyphOffset","oldNextGlyphOffset","read","glyphTableSize","updateLocaTable","bLocaIsShort","newLocaTableOut","size","writer","writeShort","writeInt","newLocaUpdated","data","newLocaSize","getFontProgram","locaTableSize","getFontProgramLength","fontProgramLength","writeCheckSums","writeGlyphs","tableName","usedTablesSize","nextTableSize","writeString","calculateCheckSum","writeUInt","pos","byte1","byte2","byte3","byte4","writeBytes","buff","i_1","setOffset","createInternals","bIsLocaShort","obj1","code","charCodeAt","isFontPresent","getGlyphChars","chars","dictionary","charKeys","getAllGlyphs","allGlyphInfo","info","readFontProgram","result1","result2","fontProgram","convertString","getCharWidth","codeWidth","isUnicode","integer","sFraction","fraction","i1","i2","i3","i4","low","n","written"],"mappings":"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","sourcesContent":["/**\n * TtfReader.ts class for EJ2-PDF\n */\nimport { TtfTableInfo } from './ttf-table-info';\nimport { Dictionary } from './../../collections/dictionary';\nimport { TtfNameTable } from './ttf-name-table';\nimport { TtfNameRecord } from './ttf-name-record';\nimport { TtfHeadTable } from './ttf-head-table';\nimport { TtfMetrics } from './ttf-metrics';\nimport { TtfHorizontalHeaderTable } from './ttf-horizontal-header-table';\nimport { TtfOS2Table } from './ttf-OS2-Table';\nimport { TtfPostTable } from './ttf-post-table';\nimport { TtfLongHorMetric } from './ttf-long-hor-metric';\nimport { TtfCmapSubTable } from './ttf-cmap-sub-table';\nimport { TtfCmapTable } from './ttf-cmap-table';\nimport { TtfGlyphInfo } from './ttf-glyph-info';\nimport { TtfLocaTable } from './ttf-loca-table';\nimport { TtfAppleCmapSubTable } from './ttf-apple-cmap-sub-table';\nimport { TtfMicrosoftCmapSubTable } from './ttf-microsoft-cmap-sub-table';\nimport { TtfTrimmedCmapSubTable } from './ttf-trimmed-cmap-sub-table';\nimport { TtfGlyphHeader } from './ttf-glyph-header';\nimport { Rectangle } from './../../drawing/pdf-drawing';\nimport { StringTokenizer } from './string-tokenizer';\nimport { TtfCmapFormat, TtfCmapEncoding, TtfPlatformID } from './enum';\nimport { TtfMicrosoftEncodingID, TtfMacintoshEncodingID, TtfCompositeGlyphFlags } from './enum';\nimport { BigEndianWriter } from './../../input-output/big-endian-writer';\nvar TtfReader = /** @class */ (function () {\n    //Constructors\n    function TtfReader(fontData) {\n        this.int32Size = 4;\n        this.isTtcFont = false;\n        this.isMacTtf = false;\n        this.metricsName = '';\n        this.isMacTTF = false;\n        this.missedGlyphs = 0;\n        this.tableNames = ['cvt ', 'fpgm', 'glyf', 'head', 'hhea', 'hmtx', 'loca', 'maxp', 'prep'];\n        this.entrySelectors = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4];\n        this.fontData = fontData;\n        this.initialize();\n    }\n    Object.defineProperty(TtfReader.prototype, \"macintosh\", {\n        //Properties\n        /**\n         * Gets glyphs for Macintosh or Symbol fonts (char - key, glyph - value).\n         */\n        get: function () {\n            if (this.macintoshDictionary === null || this.macintoshDictionary === undefined) {\n                this.macintoshDictionary = new Dictionary();\n            }\n            return this.macintoshDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfReader.prototype, \"microsoft\", {\n        /**\n         * Gets glyphs for Microsoft or Symbol fonts (char - key, glyph - value).\n         */\n        get: function () {\n            if (this.microsoftDictionary === null || this.microsoftDictionary === undefined) {\n                this.microsoftDictionary = new Dictionary();\n            }\n            return this.microsoftDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfReader.prototype, \"macintoshGlyphs\", {\n        /**\n         * Gets glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).\n         */\n        get: function () {\n            if (this.internalMacintoshGlyphs === null || this.internalMacintoshGlyphs === undefined) {\n                this.internalMacintoshGlyphs = new Dictionary();\n            }\n            return this.internalMacintoshGlyphs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfReader.prototype, \"microsoftGlyphs\", {\n        /**\n         * Gets glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).\n         */\n        get: function () {\n            if (this.internalMicrosoftGlyphs === null || this.internalMicrosoftGlyphs === undefined) {\n                this.internalMicrosoftGlyphs = new Dictionary();\n            }\n            return this.internalMicrosoftGlyphs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    TtfReader.prototype.initialize = function () {\n        if (this.metrics === undefined) {\n            this.metrics = new TtfMetrics();\n        }\n        this.readFontDictionary();\n        var nameTable = this.readNameTable();\n        var headTable = this.readHeadTable();\n        this.initializeFontName(nameTable);\n        this.metrics.macStyle = headTable.macStyle;\n    };\n    TtfReader.prototype.readFontDictionary = function () {\n        this.offset = 0;\n        var version = this.checkPreambula();\n        //this.offset += 4;\n        var numTables = this.readInt16(this.offset);\n        var searchRange = this.readInt16(this.offset);\n        var entrySelector = this.readInt16(this.offset);\n        var rangeShift = this.readInt16(this.offset);\n        if (this.tableDirectory === undefined) {\n            this.tableDirectory = new Dictionary();\n        }\n        for (var i = 0; i < numTables; ++i) {\n            var table = new TtfTableInfo();\n            var tableKey = this.readString(this.int32Size);\n            table.checksum = this.readInt32(this.offset);\n            table.offset = this.readInt32(this.offset);\n            table.length = this.readInt32(this.offset);\n            this.tableDirectory.setValue(tableKey, table);\n        }\n        this.lowestPosition = this.offset;\n        if (!this.isTtcFont) {\n            this.fixOffsets();\n        }\n    };\n    TtfReader.prototype.fixOffsets = function () {\n        var minOffset = Number.MAX_VALUE;\n        // Search for a smallest offset and compare it with the lowest position found.\n        var tableKeys = this.tableDirectory.keys();\n        for (var i = 0; i < tableKeys.length; i++) {\n            var value = this.tableDirectory.getValue(tableKeys[i]);\n            var offset = value.offset;\n            if (minOffset > offset) {\n                minOffset = offset;\n                if (minOffset <= this.lowestPosition) {\n                    break;\n                }\n            }\n        }\n        var shift = minOffset - this.lowestPosition;\n        if (shift !== 0) {\n            var table = new Dictionary();\n            for (var i = 0; i < tableKeys.length; i++) {\n                var value = this.tableDirectory.getValue(tableKeys[i]);\n                value.offset -= shift;\n                table.setValue(tableKeys[i], value);\n            }\n            this.tableDirectory = table;\n        }\n    };\n    TtfReader.prototype.checkPreambula = function () {\n        var version = this.readInt32(this.offset);\n        this.isMacTtf = (version === 0x74727565) ? true : false;\n        if (version !== 0x10000 && version !== 0x74727565 && version !== 0x4f54544f) {\n            this.isTtcFont = true;\n            this.offset = 0;\n            var fontTag = this.readString(4);\n            if (fontTag !== 'ttcf') {\n                throw new Error('Can not read TTF font data');\n            }\n            //skip 4\n            this.offset += 4;\n            var ttcIdentificationNumber = this.readInt32(this.offset);\n            if (ttcIdentificationNumber < 0) {\n                throw new Error('Can not read TTF font data');\n            }\n            this.offset = this.readInt32(this.offset);\n            version = this.readInt32(this.offset);\n        }\n        return version;\n    };\n    TtfReader.prototype.readNameTable = function () {\n        var tableInfo = this.getTable('name');\n        this.offset = tableInfo.offset;\n        var table = new TtfNameTable();\n        table.formatSelector = this.readUInt16(this.offset);\n        table.recordsCount = this.readUInt16(this.offset);\n        table.offset = this.readUInt16(this.offset);\n        table.nameRecords = [];\n        var recordSize = 12;\n        var position = this.offset;\n        for (var i = 0; i < table.recordsCount; i++) {\n            this.offset = position;\n            var record = new TtfNameRecord();\n            record.platformID = this.readUInt16(this.offset);\n            record.encodingID = this.readUInt16(this.offset);\n            record.languageID = this.readUInt16(this.offset);\n            record.nameID = this.readUInt16(this.offset);\n            record.length = this.readUInt16(this.offset);\n            record.offset = this.readUInt16(this.offset);\n            this.offset = tableInfo.offset + table.offset + record.offset;\n            var unicode = (record.platformID === 0 || record.platformID === 3);\n            record.name = this.readString(record.length, unicode);\n            table.nameRecords[i] = record;\n            position += recordSize;\n        }\n        return table;\n    };\n    TtfReader.prototype.readHeadTable = function () {\n        var tableInfo = this.getTable('head');\n        this.offset = tableInfo.offset;\n        var table = new TtfHeadTable();\n        table.version = this.readFixed(this.offset);\n        table.fontRevision = this.readFixed(this.offset);\n        table.checkSumAdjustment = this.readUInt32(this.offset);\n        table.magicNumber = this.readUInt32(this.offset);\n        table.flags = this.readUInt16(this.offset);\n        table.unitsPerEm = this.readUInt16(this.offset);\n        table.created = this.readInt64(this.offset);\n        table.modified = this.readInt64(this.offset);\n        table.xMin = this.readInt16(this.offset);\n        table.yMin = this.readInt16(this.offset);\n        table.xMax = this.readInt16(this.offset);\n        table.yMax = this.readInt16(this.offset);\n        table.macStyle = this.readUInt16(this.offset);\n        table.lowestReadableSize = this.readUInt16(this.offset);\n        table.fontDirectionHint = this.readInt16(this.offset);\n        table.indexToLocalFormat = this.readInt16(this.offset);\n        table.glyphDataFormat = this.readInt16(this.offset);\n        return table;\n    };\n    TtfReader.prototype.readHorizontalHeaderTable = function () {\n        var tableInfo = this.getTable('hhea');\n        this.offset = tableInfo.offset;\n        var table = new TtfHorizontalHeaderTable();\n        table.version = this.readFixed(this.offset);\n        table.ascender = this.readInt16(this.offset);\n        table.descender = this.readInt16(this.offset);\n        table.lineGap = this.readInt16(this.offset);\n        table.advanceWidthMax = this.readUInt16(this.offset);\n        table.minLeftSideBearing = this.readInt16(this.offset);\n        table.minRightSideBearing = this.readInt16(this.offset);\n        table.xMaxExtent = this.readInt16(this.offset);\n        table.caretSlopeRise = this.readInt16(this.offset);\n        table.caretSlopeRun = this.readInt16(this.offset);\n        //skip 2 * 5\n        this.offset += 10;\n        table.metricDataFormat = this.readInt16(this.offset);\n        table.numberOfHMetrics = this.readUInt16(this.offset);\n        return table;\n    };\n    TtfReader.prototype.readOS2Table = function () {\n        var tableInfo = this.getTable('OS/2');\n        this.offset = tableInfo.offset;\n        var table = new TtfOS2Table();\n        table.version = this.readUInt16(this.offset);\n        table.xAvgCharWidth = this.readInt16(this.offset);\n        table.usWeightClass = this.readUInt16(this.offset);\n        table.usWidthClass = this.readUInt16(this.offset);\n        table.fsType = this.readInt16(this.offset);\n        table.ySubscriptXSize = this.readInt16(this.offset);\n        table.ySubscriptYSize = this.readInt16(this.offset);\n        table.ySubscriptXOffset = this.readInt16(this.offset);\n        table.ySubscriptYOffset = this.readInt16(this.offset);\n        table.ySuperscriptXSize = this.readInt16(this.offset);\n        table.ySuperscriptYSize = this.readInt16(this.offset);\n        table.ySuperscriptXOffset = this.readInt16(this.offset);\n        table.ySuperscriptYOffset = this.readInt16(this.offset);\n        table.yStrikeoutSize = this.readInt16(this.offset);\n        table.yStrikeoutPosition = this.readInt16(this.offset);\n        table.sFamilyClass = this.readInt16(this.offset);\n        table.panose = this.readBytes(10);\n        table.ulUnicodeRange1 = this.readUInt32(this.offset);\n        table.ulUnicodeRange2 = this.readUInt32(this.offset);\n        table.ulUnicodeRange3 = this.readUInt32(this.offset);\n        table.ulUnicodeRange4 = this.readUInt32(this.offset);\n        table.vendorIdentifier = this.readBytes(4);\n        table.fsSelection = this.readUInt16(this.offset);\n        table.usFirstCharIndex = this.readUInt16(this.offset);\n        table.usLastCharIndex = this.readUInt16(this.offset);\n        table.sTypoAscender = this.readInt16(this.offset);\n        table.sTypoDescender = this.readInt16(this.offset);\n        table.sTypoLineGap = this.readInt16(this.offset);\n        table.usWinAscent = this.readUInt16(this.offset);\n        table.usWinDescent = this.readUInt16(this.offset);\n        table.ulCodePageRange1 = this.readUInt32(this.offset);\n        table.ulCodePageRange2 = this.readUInt32(this.offset);\n        if (table.version > 1) {\n            table.sxHeight = this.readInt16(this.offset);\n            table.sCapHeight = this.readInt16(this.offset);\n            table.usDefaultChar = this.readUInt16(this.offset);\n            table.usBreakChar = this.readUInt16(this.offset);\n            table.usMaxContext = this.readUInt16(this.offset);\n        }\n        else {\n            table.sxHeight = 0;\n            table.sCapHeight = 0;\n            table.usDefaultChar = 0;\n            table.usBreakChar = 0;\n            table.usMaxContext = 0;\n        }\n        return table;\n    };\n    TtfReader.prototype.readPostTable = function () {\n        var tableInfo = this.getTable('post');\n        this.offset = tableInfo.offset;\n        var table = new TtfPostTable();\n        table.formatType = this.readFixed(this.offset);\n        table.italicAngle = this.readFixed(this.offset);\n        table.underlinePosition = this.readInt16(this.offset);\n        table.underlineThickness = this.readInt16(this.offset);\n        table.isFixedPitch = this.readUInt32(this.offset);\n        table.minType42 = this.readUInt32(this.offset);\n        table.maxType42 = this.readUInt32(this.offset);\n        table.minType1 = this.readUInt32(this.offset);\n        table.maxType1 = this.readUInt32(this.offset);\n        return table;\n    };\n    /**\n     * Reads Width of the glyphs.\n     */\n    TtfReader.prototype.readWidthTable = function (glyphCount, unitsPerEm) {\n        var tableInfo = this.getTable('hmtx');\n        this.offset = tableInfo.offset;\n        var width = [];\n        for (var i = 0; i < glyphCount; i++) {\n            var glyph = new TtfLongHorMetric();\n            glyph.advanceWidth = this.readUInt16(this.offset);\n            glyph.lsb = this.readInt16(this.offset);\n            var glyphWidth = glyph.advanceWidth * 1000 / unitsPerEm;\n            width.push(Math.floor(glyphWidth));\n        }\n        return width;\n    };\n    /**\n     * Reads the cmap table.\n     */\n    TtfReader.prototype.readCmapTable = function () {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset;\n        var table = new TtfCmapTable();\n        table.version = this.readUInt16(this.offset);\n        table.tablesCount = this.readUInt16(this.offset);\n        var position = this.offset;\n        var subTables = [];\n        for (var i = 0; i < table.tablesCount; i++) {\n            this.offset = position;\n            var subTable = new TtfCmapSubTable();\n            subTable.platformID = this.readUInt16(this.offset);\n            subTable.encodingID = this.readUInt16(this.offset);\n            subTable.offset = this.readUInt32(this.offset);\n            position = this.offset;\n            this.readCmapSubTable(subTable);\n            subTables[i] = subTable;\n        }\n        return subTables;\n    };\n    /**\n     * Reads the cmap sub table.\n     */\n    TtfReader.prototype.readCmapSubTable = function (subTable) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var format = this.readUInt16(this.offset);\n        var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n        var platform = (encoding === TtfCmapEncoding.Macintosh) ? TtfPlatformID.Macintosh : TtfPlatformID.Microsoft;\n        if (encoding !== TtfCmapEncoding.Unknown) {\n            switch (format) {\n                case TtfCmapFormat.Apple:\n                    this.readAppleCmapTable(subTable, encoding);\n                    break;\n                case TtfCmapFormat.Microsoft:\n                    this.readMicrosoftCmapTable(subTable, encoding);\n                    break;\n                case TtfCmapFormat.Trimmed:\n                    this.readTrimmedCmapTable(subTable, encoding);\n                    break;\n            }\n        }\n    };\n    /**\n     * Reads Symbol cmap table.\n     */\n    TtfReader.prototype.readAppleCmapTable = function (subTable, encoding) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var table = new TtfAppleCmapSubTable();\n        table.format = this.readUInt16(this.offset);\n        table.length = this.readUInt16(this.offset);\n        table.version = this.readUInt16(this.offset);\n        if (this.maxMacIndex === null || this.maxMacIndex === undefined) {\n            this.maxMacIndex = 0;\n        }\n        for (var i = 0; i < 256; ++i) {\n            var glyphInfo = new TtfGlyphInfo();\n            glyphInfo.index = this.readByte(this.offset);\n            glyphInfo.width = this.getWidth(glyphInfo.index);\n            glyphInfo.charCode = i;\n            this.macintosh.setValue(i, glyphInfo);\n            this.addGlyph(glyphInfo, encoding);\n            // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n            this.maxMacIndex = Math.max(i, this.maxMacIndex);\n        }\n    };\n    /**\n     * Reads Symbol cmap table.\n     */\n    TtfReader.prototype.readMicrosoftCmapTable = function (subTable, encoding) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var collection = (encoding === TtfCmapEncoding.Unicode) ? this.microsoft : this.macintosh;\n        var table = new TtfMicrosoftCmapSubTable();\n        table.format = this.readUInt16(this.offset);\n        table.length = this.readUInt16(this.offset);\n        table.version = this.readUInt16(this.offset);\n        table.segCountX2 = this.readUInt16(this.offset);\n        table.searchRange = this.readUInt16(this.offset);\n        table.entrySelector = this.readUInt16(this.offset);\n        table.rangeShift = this.readUInt16(this.offset);\n        var segCount = table.segCountX2 / 2;\n        table.endCount = this.readUshortArray(segCount);\n        table.reservedPad = this.readUInt16(this.offset);\n        table.startCount = this.readUshortArray(segCount);\n        table.idDelta = this.readUshortArray(segCount);\n        table.idRangeOffset = this.readUshortArray(segCount);\n        var length = (table.length / 2 - 8) - (segCount * 4);\n        table.glyphID = this.readUshortArray(length);\n        // Process glyphIdArray array.\n        var codeOffset = 0;\n        var index = 0;\n        for (var j = 0; j < segCount; j++) {\n            for (var k = table.startCount[j]; k <= table.endCount[j] && k !== 65535; k++) {\n                if (table.idRangeOffset[j] === 0) {\n                    codeOffset = (k + table.idDelta[j]) & 65535;\n                }\n                else {\n                    index = j + table.idRangeOffset[j] / 2 - segCount + k - table.startCount[j];\n                    if (index >= table.glyphID.length) {\n                        continue;\n                    }\n                    codeOffset = (table.glyphID[index] + table.idDelta[j]) & 65535;\n                }\n                var glyph = new TtfGlyphInfo();\n                glyph.index = codeOffset;\n                glyph.width = this.getWidth(glyph.index);\n                var id = (encoding === TtfCmapEncoding.Symbol) ? ((k & 0xff00) === 0xf000 ? k & 0xff : k) : k;\n                glyph.charCode = id;\n                collection.setValue(id, glyph);\n                this.addGlyph(glyph, encoding);\n            }\n        }\n    };\n    /**\n     * Reads Trimed cmap table.\n     */\n    TtfReader.prototype.readTrimmedCmapTable = function (subTable, encoding) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var table = new TtfTrimmedCmapSubTable();\n        table.format = this.readUInt16(this.offset);\n        table.length = this.readUInt16(this.offset);\n        table.version = this.readUInt16(this.offset);\n        table.firstCode = this.readUInt16(this.offset);\n        table.entryCount = this.readUInt16(this.offset);\n        for (var i = 0; i < table.entryCount; ++i) {\n            var glyphInfo = new TtfGlyphInfo();\n            glyphInfo.index = this.readUInt16(this.offset);\n            glyphInfo.width = this.getWidth(glyphInfo.index);\n            glyphInfo.charCode = i + table.firstCode;\n            this.macintosh.setValue(i, glyphInfo);\n            this.addGlyph(glyphInfo, encoding);\n            // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n            this.maxMacIndex = Math.max(i, this.maxMacIndex);\n        }\n    };\n    TtfReader.prototype.initializeFontName = function (nameTable) {\n        for (var i = 0; i < nameTable.recordsCount; i++) {\n            var record = nameTable.nameRecords[i];\n            if (record.nameID === 1) {\n                //font family\n                this.metrics.fontFamily = record.name;\n            }\n            else if (record.nameID === 6) {\n                //post script name\n                this.metrics.postScriptName = record.name;\n            }\n            /* tslint:disable */\n            if (this.metrics.fontFamily !== null && this.metrics.fontFamily !== undefined && this.metrics.postScriptName !== null && this.metrics.postScriptName !== undefined) {\n                break;\n            }\n            /* tslint:disable */\n        }\n    };\n    TtfReader.prototype.getTable = function (name) {\n        // if (name === null) {\n        //     throw new Error('Argument Null Exception : name');\n        // }\n        var table = new TtfTableInfo();\n        var obj;\n        if (this.tableDirectory.containsKey(name)) {\n            obj = this.tableDirectory.getValue(name);\n        }\n        if (obj !== null && obj !== undefined) {\n            table = obj;\n        }\n        return table;\n    };\n    /**\n     * Returns width of the glyph.\n     */\n    TtfReader.prototype.getWidth = function (glyphCode) {\n        glyphCode = (glyphCode < this.width.length) ? glyphCode : this.width.length - 1;\n        return this.width[glyphCode];\n    };\n    /**\n     * Gets CMAP encoding based on platform ID and encoding ID.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.getCmapEncoding = function (platformID, encodingID) {\n        var format = TtfCmapEncoding.Unknown;\n        if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Undefined) {\n            // When building a symbol font for Windows,\n            // the platform ID should be 3 and the encoding ID should be 0.\n            format = TtfCmapEncoding.Symbol;\n        }\n        else if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Unicode) {\n            // When building a Unicode font for Windows,\n            // the platform ID should be 3 and the encoding ID should be 1.\n            format = TtfCmapEncoding.Unicode;\n        }\n        else if (platformID == TtfPlatformID.Macintosh && encodingID == TtfMacintoshEncodingID.Roman) {\n            // When building a font that will be used on the Macintosh,\n            // the platform ID should be 1 and the encoding ID should be 0.\n            format = TtfCmapEncoding.Macintosh;\n        }\n        return format;\n    };\n    /* tslint:enable */\n    /**\n     * Adds glyph to the collection.\n     */\n    TtfReader.prototype.addGlyph = function (glyph, encoding) {\n        var collection = null;\n        switch (encoding) {\n            case TtfCmapEncoding.Unicode:\n                collection = this.microsoftGlyphs;\n                break;\n            case TtfCmapEncoding.Macintosh:\n            case TtfCmapEncoding.Symbol:\n                collection = this.macintoshGlyphs;\n                break;\n        }\n        collection.setValue(glyph.index, glyph);\n    };\n    /**\n     * Initializes metrics.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.initializeMetrics = function (nameTable, headTable, horizontalHeadTable, os2Table, postTable, cmapTables) {\n        /* tslint:enable */\n        // if (cmapTables === null) {\n        //     throw new Error('ArgumentNullException : cmapTables');\n        // }\n        this.initializeFontName(nameTable);\n        // Get font encoding.\n        var bSymbol = false;\n        for (var i = 0; i < cmapTables.length; i++) {\n            var subTable = cmapTables[i];\n            var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n            if (encoding === TtfCmapEncoding.Symbol) {\n                bSymbol = true;\n                break;\n            }\n        }\n        this.metrics.isSymbol = bSymbol;\n        this.metrics.macStyle = headTable.macStyle;\n        this.metrics.isFixedPitch = (postTable.isFixedPitch !== 0);\n        this.metrics.italicAngle = postTable.italicAngle;\n        var factor = 1000 / headTable.unitsPerEm;\n        this.metrics.winAscent = os2Table.sTypoAscender * factor;\n        this.metrics.macAscent = horizontalHeadTable.ascender * factor;\n        //m_metrics.MacAscent = os2Table.UsWinAscent * factor;\n        // NOTE: This is stange workaround. The value is good if os2Table.SCapHeight != 0, otherwise it should be properly computed.\n        this.metrics.capHeight = (os2Table.sCapHeight !== 0) ? os2Table.sCapHeight : 0.7 * headTable.unitsPerEm * factor;\n        this.metrics.winDescent = os2Table.sTypoDescender * factor;\n        this.metrics.macDescent = horizontalHeadTable.descender * factor;\n        //m_metrics.MacDescent = -os2Table.UsWinDescent * factor;\n        this.metrics.leading = (os2Table.sTypoAscender - os2Table.sTypoDescender + os2Table.sTypoLineGap) * factor;\n        this.metrics.lineGap = Math.ceil(horizontalHeadTable.lineGap * factor);\n        var left = headTable.xMin * factor;\n        var top = Math.ceil(this.metrics.macAscent + this.metrics.lineGap);\n        var right = headTable.xMax * factor;\n        var bottom = this.metrics.macDescent;\n        this.metrics.fontBox = new Rectangle(left, top, right, bottom);\n        // NOTE: Strange!\n        this.metrics.stemV = 80;\n        this.metrics.widthTable = this.updateWidth();\n        this.metrics.contains = this.tableDirectory.containsKey('CFF');\n        this.metrics.subScriptSizeFactor = headTable.unitsPerEm / os2Table.ySubscriptYSize;\n        this.metrics.superscriptSizeFactor = headTable.unitsPerEm / os2Table.ySuperscriptYSize;\n    };\n    /**\n     * Updates chars structure which is used in the case of ansi encoding (256 bytes).\n     */\n    TtfReader.prototype.updateWidth = function () {\n        var count = 256;\n        var bytes = [];\n        if (this.metrics.isSymbol) {\n            for (var i = 0; i < count; i++) {\n                var glyphInfo = this.getGlyph(String.fromCharCode(i));\n                bytes[i] = (glyphInfo.empty) ? 0 : glyphInfo.width;\n            }\n        }\n        else {\n            var byteToProcess = [];\n            var unknown = '?';\n            var space = String.fromCharCode(32);\n            for (var i = 0; i < count; i++) {\n                byteToProcess[0] = i;\n                var text = this.getString(byteToProcess, 0, byteToProcess.length);\n                var ch = (text.length > 0) ? text[0] : unknown;\n                var glyphInfo = this.getGlyph(ch);\n                if (!glyphInfo.empty) {\n                    bytes[i] = glyphInfo.width;\n                }\n                else {\n                    glyphInfo = this.getGlyph(space);\n                    bytes[i] = (glyphInfo.empty) ? 0 : glyphInfo.width;\n                }\n            }\n        }\n        return bytes;\n    };\n    /**\n     * Returns default glyph.\n     */\n    TtfReader.prototype.getDefaultGlyph = function () {\n        var glyph = this.getGlyph(StringTokenizer.whiteSpace);\n        return glyph;\n    };\n    /**\n     * Reads unicode string from byte array.\n     */\n    TtfReader.prototype.getString = function (byteToProcess, start, length) {\n        var result = '';\n        for (var index = 0; index < length; index++) {\n            result += String.fromCharCode(byteToProcess[index + start]);\n        }\n        return result;\n    };\n    /**\n     * Reads loca table.\n     */\n    TtfReader.prototype.readLocaTable = function (bShort) {\n        var tableInfo = this.getTable('loca');\n        this.offset = tableInfo.offset;\n        var table = new TtfLocaTable();\n        var buffer = null;\n        if (bShort) {\n            var len = tableInfo.length / 2;\n            buffer = [];\n            for (var i = 0; i < len; i++) {\n                buffer[i] = this.readUInt16(this.offset) * 2;\n            }\n        }\n        else {\n            var len = tableInfo.length / 4;\n            buffer = [];\n            for (var i = 0; i < len; i++) {\n                buffer[i] = this.readUInt32(this.offset);\n            }\n        }\n        table.offsets = buffer;\n        return table;\n    };\n    /**\n     * Updates hash table of used glyphs.\n     */\n    TtfReader.prototype.updateGlyphChars = function (glyphChars, locaTable) {\n        // if (glyphChars === null) {\n        //     throw new Error('Argument Null Exception : glyphChars');\n        // }\n        // Add zero key.\n        if (!glyphChars.containsKey(0)) {\n            glyphChars.setValue(0, 0);\n        }\n        var clone = new Dictionary();\n        var glyphCharKeys = glyphChars.keys();\n        for (var i = 0; i < glyphCharKeys.length; i++) {\n            clone.setValue(glyphCharKeys[i], glyphChars.getValue(glyphCharKeys[i]));\n        }\n        for (var i = 0; i < glyphCharKeys.length; i++) {\n            var nextKey = glyphCharKeys[i];\n            this.processCompositeGlyph(glyphChars, nextKey, locaTable);\n        }\n    };\n    /**\n     * Checks if glyph is composite or not.\n     */\n    TtfReader.prototype.processCompositeGlyph = function (glyphChars, glyph, locaTable) {\n        // if (glyphChars === null) {\n        //     throw new Error('Argument Null Exception : glyphChars');\n        // }\n        // Is in range.\n        if (glyph < locaTable.offsets.length - 1) {\n            var glyphOffset = locaTable.offsets[glyph];\n            if (glyphOffset !== locaTable.offsets[glyph + 1]) {\n                var tableInfo = this.getTable('glyf');\n                this.offset = tableInfo.offset + glyphOffset;\n                var glyphHeader = new TtfGlyphHeader();\n                glyphHeader.numberOfContours = this.readInt16(this.offset);\n                glyphHeader.xMin = this.readInt16(this.offset);\n                glyphHeader.yMin = this.readInt16(this.offset);\n                glyphHeader.xMax = this.readInt16(this.offset);\n                glyphHeader.yMax = this.readInt16(this.offset);\n                // Glyph is composite.\n                if (glyphHeader.numberOfContours < 0) {\n                    var skipBytes = 0;\n                    var entry = true;\n                    while (entry) {\n                        var flags = this.readUInt16(this.offset);\n                        var glyphIndex = this.readUInt16(this.offset);\n                        if (!glyphChars.containsKey(glyphIndex)) {\n                            glyphChars.setValue(glyphIndex, 0);\n                        }\n                        if ((flags & TtfCompositeGlyphFlags.MoreComponents) === 0) {\n                            break;\n                        }\n                        skipBytes = ((flags & TtfCompositeGlyphFlags.Arg1And2AreWords) !== 0) ? 4 : 2;\n                        if ((flags & TtfCompositeGlyphFlags.WeHaveScale) !== 0) {\n                            skipBytes += 2;\n                        }\n                        else if ((flags & TtfCompositeGlyphFlags.WeHaveAnXyScale) !== 0) {\n                            skipBytes += 4;\n                        }\n                        else if ((flags & TtfCompositeGlyphFlags.WeHaveTwoByTwo) !== 0) {\n                            skipBytes += 2 * 4;\n                        }\n                        this.offset += skipBytes;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Creates new glyph tables based on chars that are used for output.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.generateGlyphTable = function (glyphChars, locaTable, newLocaTable, newGlyphTable) {\n        /* tslint:enable */\n        // if (glyphChars === null) {\n        //     throw new Error('Argument Null Exception : glyphChars');\n        // }\n        newLocaTable = [];\n        // Sorting used glyphs keys.\n        var activeGlyphs = glyphChars.keys();\n        activeGlyphs.sort(function (a, b) { return a - b; });\n        var glyphSize = 0;\n        for (var i = 0; i < activeGlyphs.length; i++) {\n            var glyphIndex = activeGlyphs[i];\n            if (locaTable.offsets.length > 0) {\n                glyphSize += locaTable.offsets[glyphIndex + 1] - locaTable.offsets[glyphIndex];\n            }\n        }\n        var glyphSizeAligned = this.align(glyphSize);\n        newGlyphTable = [];\n        for (var i = 0; i < glyphSizeAligned; i++) {\n            newGlyphTable.push(0);\n        }\n        var nextGlyphOffset = 0;\n        var nextGlyphIndex = 0;\n        var table = this.getTable('glyf');\n        // Creating NewLocaTable - that would hold offsets for filtered glyphs.\n        for (var i = 0; i < locaTable.offsets.length; i++) {\n            newLocaTable.push(nextGlyphOffset);\n            if (nextGlyphIndex < activeGlyphs.length && activeGlyphs[nextGlyphIndex] === i) {\n                ++nextGlyphIndex;\n                newLocaTable[i] = nextGlyphOffset;\n                var oldGlyphOffset = locaTable.offsets[i];\n                var oldNextGlyphOffset = locaTable.offsets[i + 1] - oldGlyphOffset;\n                if (oldNextGlyphOffset > 0) {\n                    this.offset = table.offset + oldGlyphOffset;\n                    var result = this.read(newGlyphTable, nextGlyphOffset, oldNextGlyphOffset);\n                    newGlyphTable = result.buffer;\n                    nextGlyphOffset += oldNextGlyphOffset;\n                }\n            }\n        }\n        return { glyphTableSize: glyphSize, newLocaTable: newLocaTable, newGlyphTable: newGlyphTable };\n    };\n    /**\n     * Updates new Loca table.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.updateLocaTable = function (newLocaTable, bLocaIsShort, newLocaTableOut) {\n        /* tslint:enable */\n        if (newLocaTable === null) {\n            throw new Error('Argument Null Exception : newLocaTable');\n        }\n        var size = (bLocaIsShort) ? newLocaTable.length * 2 : newLocaTable.length * 4;\n        var count = this.align(size);\n        //BigEndianWiter\n        var writer = new BigEndianWriter(count);\n        for (var i = 0; i < newLocaTable.length; i++) {\n            var value = newLocaTable[i];\n            if (bLocaIsShort) {\n                value /= 2;\n                writer.writeShort(value);\n            }\n            else {\n                writer.writeInt(value);\n            }\n        }\n        return { newLocaUpdated: writer.data, newLocaSize: size };\n    };\n    /**\n     * Aligns number to be divisible on 4.\n     */\n    TtfReader.prototype.align = function (value) {\n        return (value + 3) & (~3);\n    };\n    /**\n     * Returns font program data.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.getFontProgram = function (newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n        /* tslint:enable */\n        if (newLocaTableOut === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        var tableNames = this.tableNames;\n        var result = this.getFontProgramLength(newLocaTableOut, newGlyphTable, 0);\n        var fontProgramLength = result.fontProgramLength;\n        var numTables = result.numTables;\n        var writer = new BigEndianWriter(fontProgramLength);\n        writer.writeInt(0x10000);\n        writer.writeShort(numTables);\n        var entrySelector = this.entrySelectors[numTables];\n        writer.writeShort((1 << (entrySelector & 31)) * 16);\n        writer.writeShort(entrySelector);\n        writer.writeShort((numTables - (1 << (entrySelector & 31))) * 16);\n        // Writing to destination buffer - checksums && sizes of used tables.\n        this.writeCheckSums(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize);\n        // // Writing to destination buffer - used glyphs.\n        this.writeGlyphs(writer, newLocaTableOut, newGlyphTable);\n        return writer.data;\n    };\n    /* tslint:disable */\n    TtfReader.prototype.getFontProgramLength = function (newLocaTableOut, newGlyphTable, numTables) {\n        /* tslint:enable */\n        if (newLocaTableOut === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        // glyf and loca are used by default;\n        numTables = 2;\n        var tableNames = this.tableNames;\n        var fontProgramLength = 0;\n        for (var i = 0; i < tableNames.length; i++) {\n            var tableName = tableNames[i];\n            if (tableName !== 'glyf' && tableName !== 'loca') {\n                var table = this.getTable(tableName);\n                if (!table.empty) {\n                    ++numTables;\n                    fontProgramLength += this.align(table.length);\n                }\n            }\n        }\n        fontProgramLength += newLocaTableOut.length;\n        fontProgramLength += newGlyphTable.length;\n        var usedTablesSize = numTables * 16 + (3 * 4);\n        fontProgramLength += usedTablesSize;\n        return { fontProgramLength: fontProgramLength, numTables: numTables };\n    };\n    /**\n     * Writing to destination buffer - checksums and sizes of used tables.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.writeCheckSums = function (writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n        /* tslint:enable */\n        if (writer === null) {\n            throw new Error('Argument Null Exception : writer');\n        }\n        if (newLocaTableOut === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        var tableNames = this.tableNames;\n        var usedTablesSize = numTables * 16 + (3 * 4);\n        var nextTableSize = 0;\n        for (var i = 0; i < tableNames.length; i++) {\n            var tableName = tableNames[i];\n            var tableInfo = this.getTable(tableName);\n            if (tableInfo.empty) {\n                continue;\n            }\n            writer.writeString(tableName);\n            if (tableName === 'glyf') {\n                var checksum = this.calculateCheckSum(newGlyphTable);\n                writer.writeInt(checksum);\n                nextTableSize = glyphTableSize;\n            }\n            else if (tableName === 'loca') {\n                var checksum = this.calculateCheckSum(newLocaTableOut);\n                writer.writeInt(checksum);\n                nextTableSize = locaTableSize;\n            }\n            else {\n                writer.writeInt(tableInfo.checksum);\n                nextTableSize = tableInfo.length;\n            }\n            writer.writeUInt(usedTablesSize);\n            writer.writeUInt(nextTableSize);\n            usedTablesSize += this.align(nextTableSize);\n        }\n    };\n    /**\n     * Gets checksum from source buffer.\n     */\n    TtfReader.prototype.calculateCheckSum = function (bytes) {\n        if (bytes === null) {\n            throw new Error('Argument Null Exception : bytes');\n        }\n        var pos = 0;\n        var byte1 = 0;\n        var byte2 = 0;\n        var byte3 = 0;\n        var byte4 = 0;\n        for (var i = 0; i < (bytes.length + 1) / 4; i++) {\n            byte4 += (bytes[pos++] & 255);\n            byte3 += (bytes[pos++] & 255);\n            byte2 += (bytes[pos++] & 255);\n            byte1 += (bytes[pos++] & 255);\n        }\n        var result = byte1;\n        result += (byte2 << 8);\n        result += (byte3 << 16);\n        result += (byte4 << 24);\n        return result;\n    };\n    /**\n     * Writing to destination buffer - used glyphs.\n     */\n    TtfReader.prototype.writeGlyphs = function (writer, newLocaTable, newGlyphTable) {\n        if (writer === null) {\n            throw new Error('Argument Null Exception : writer');\n        }\n        if (newLocaTable === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        var tableNames = this.tableNames;\n        for (var i = 0; i < tableNames.length; i++) {\n            var tableName = tableNames[i];\n            var tableInfo = this.getTable(tableName);\n            if (tableInfo.empty) {\n                continue;\n            }\n            if (tableName === 'glyf') {\n                writer.writeBytes(newGlyphTable);\n            }\n            else if (tableName === 'loca') {\n                writer.writeBytes(newLocaTable);\n            }\n            else {\n                var count = this.align(tableInfo.length);\n                var buff = [];\n                for (var i_1 = 0; i_1 < count; i_1++) {\n                    buff.push(0);\n                }\n                this.offset = tableInfo.offset;\n                var result = this.read(buff, 0, tableInfo.length);\n                writer.writeBytes(result.buffer);\n            }\n        }\n    };\n    //public methods\n    /**\n     * Sets position value of font data.\n     */\n    TtfReader.prototype.setOffset = function (offset) {\n        this.offset = offset;\n    };\n    /**\n     * Creates font Internals\n     * @private\n     */\n    TtfReader.prototype.createInternals = function () {\n        this.metrics = new TtfMetrics();\n        var nameTable = this.readNameTable();\n        var headTable = this.readHeadTable();\n        this.bIsLocaShort = (headTable.indexToLocalFormat === 0);\n        var horizontalHeadTable = this.readHorizontalHeaderTable();\n        var os2Table = this.readOS2Table();\n        var postTable = this.readPostTable();\n        this.width = this.readWidthTable(horizontalHeadTable.numberOfHMetrics, headTable.unitsPerEm);\n        var subTables = this.readCmapTable();\n        this.initializeMetrics(nameTable, headTable, horizontalHeadTable, os2Table, postTable, subTables);\n    };\n    TtfReader.prototype.getGlyph = function (charCode) {\n        if (typeof charCode === 'number') {\n            var obj1 = null;\n            if (!this.metrics.isSymbol && this.microsoftGlyphs != null) {\n                if (this.microsoftGlyphs.containsKey(charCode)) {\n                    obj1 = this.microsoftGlyphs.getValue(charCode);\n                }\n            }\n            else if (this.metrics.isSymbol && this.macintoshGlyphs != null) {\n                if (this.macintoshGlyphs.containsKey(charCode)) {\n                    obj1 = this.macintoshGlyphs.getValue(charCode);\n                }\n            }\n            var glyph = (obj1 != null) ? obj1 : this.getDefaultGlyph();\n            return glyph;\n        }\n        else {\n            var obj = null;\n            var code = charCode.charCodeAt(0);\n            if (!this.metrics.isSymbol && this.microsoft !== null) {\n                if (this.microsoft.containsKey(code)) {\n                    obj = this.microsoft.getValue(code);\n                    if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n                        this.isFontPresent = true;\n                    }\n                }\n                else if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n                    this.isFontPresent = false;\n                }\n            }\n            else if (this.metrics.isSymbol && this.macintosh !== null || this.isMacTTF) {\n                // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n                if (this.maxMacIndex !== 0) {\n                    code %= this.maxMacIndex + 1;\n                }\n                else {\n                    code = ((code & 0xff00) === 0xf000 ? code & 0xff : code);\n                }\n                if (this.macintosh.containsKey(code)) {\n                    obj = this.macintosh.getValue(code);\n                    this.isFontPresent = true;\n                }\n            }\n            // Fix for StackOverFlow exception in XPS to PDF converter\n            if (charCode === StringTokenizer.whiteSpace && obj === null) {\n                obj = new TtfGlyphInfo();\n            }\n            var glyph = (obj !== null) ? obj : this.getDefaultGlyph();\n            return glyph;\n        }\n    };\n    /**\n     * Gets hash table with chars indexed by glyph index.\n     */\n    TtfReader.prototype.getGlyphChars = function (chars) {\n        if (chars === null || chars === undefined) {\n            throw new Error('Argument Null Exception : chars');\n        }\n        var dictionary = new Dictionary();\n        var charKeys = chars.keys();\n        for (var i = 0; i < charKeys.length; i++) {\n            var ch = charKeys[i];\n            var glyph = this.getGlyph(ch);\n            if (!glyph.empty) {\n                dictionary.setValue(glyph.index, ch.charCodeAt(0));\n            }\n        }\n        return dictionary;\n    };\n    /**\n     * Gets all glyphs.\n     */\n    TtfReader.prototype.getAllGlyphs = function () {\n        var allGlyphInfo = [];\n        var info = new TtfGlyphInfo();\n        var index = 0;\n        for (var i = 0; i < this.width.length; i++) {\n            var width = this.width[i];\n            info.index = index;\n            info.width = width;\n            allGlyphInfo.push(info);\n            index++;\n        }\n        return allGlyphInfo;\n    };\n    /**\n     * Reads a font's program.\n     * @private\n     */\n    TtfReader.prototype.readFontProgram = function (chars) {\n        var glyphChars = this.getGlyphChars(chars);\n        var locaTable = this.readLocaTable(this.bIsLocaShort);\n        if (glyphChars.size() < chars.size()) {\n            this.missedGlyphs = chars.size() - glyphChars.size();\n        }\n        this.updateGlyphChars(glyphChars, locaTable);\n        /* tslint:disable */\n        var result1 = this.generateGlyphTable(glyphChars, locaTable, null, null);\n        /* tslint:enable */\n        var glyphTableSize = result1.glyphTableSize;\n        var newLocaTable = result1.newLocaTable;\n        var newGlyphTable = result1.newGlyphTable;\n        var result2 = this.updateLocaTable(newLocaTable, this.bIsLocaShort, null);\n        var newLocaSize = result2.newLocaSize;\n        var newLocaUpdated = result2.newLocaUpdated;\n        var fontProgram = this.getFontProgram(newLocaUpdated, newGlyphTable, glyphTableSize, newLocaSize);\n        return fontProgram;\n    };\n    /**\n     * Reconverts string to be in proper format saved into PDF file.\n     */\n    TtfReader.prototype.convertString = function (text) {\n        if (text === null) {\n            throw new Error('Argument Null Exception : text');\n        }\n        var glyph = '';\n        var i = 0;\n        for (var k = 0; k < text.length; k++) {\n            var ch = text[k];\n            var glyphInfo = this.getGlyph(ch);\n            if (!glyphInfo.empty) {\n                glyph += String.fromCharCode(glyphInfo.index);\n                i++;\n            }\n        }\n        return glyph;\n    };\n    /**\n     * Gets char width.\n     */\n    TtfReader.prototype.getCharWidth = function (code) {\n        var glyphInfo = this.getGlyph(code);\n        glyphInfo = (!glyphInfo.empty) ? glyphInfo : this.getDefaultGlyph();\n        var codeWidth = (!glyphInfo.empty) ? glyphInfo.width : 0;\n        return codeWidth;\n    };\n    TtfReader.prototype.readString = function (length, isUnicode) {\n        if (isUnicode === undefined) {\n            return this.readString(length, false);\n        }\n        else {\n            //let buffer : number[] = this.readBytes(length);\n            var result = '';\n            if (isUnicode) {\n                for (var i = 0; i < length; i++) {\n                    if (i % 2 !== 0) {\n                        result += String.fromCharCode(this.fontData[this.offset]);\n                    }\n                    this.offset += 1;\n                }\n            }\n            else {\n                for (var i = 0; i < length; i++) {\n                    result += String.fromCharCode(this.fontData[this.offset]);\n                    this.offset += 1;\n                }\n            }\n            return result;\n        }\n    };\n    TtfReader.prototype.readFixed = function (offset) {\n        var integer = this.readInt16(offset);\n        var sFraction = this.readInt16(offset + 2);\n        var fraction = sFraction / 16384;\n        return integer + fraction;\n    };\n    TtfReader.prototype.readInt32 = function (offset) {\n        var i1 = this.fontData[offset + 3];\n        var i2 = this.fontData[offset + 2];\n        var i3 = this.fontData[offset + 1];\n        var i4 = this.fontData[offset];\n        this.offset += 4;\n        return i1 + (i2 << 8) + (i3 << 16) + (i4 << 24);\n    };\n    TtfReader.prototype.readUInt32 = function (offset) {\n        var i1 = this.fontData[offset + 3];\n        var i2 = this.fontData[offset + 2];\n        var i3 = this.fontData[offset + 1];\n        var i4 = this.fontData[offset];\n        this.offset += 4;\n        return (i1 | i2 << 8 | i3 << 16 | i4 << 24);\n    };\n    // private readInt16(offset : number) : number {\n    //     let result : number = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n    //     this.offset += 2;\n    //     return result;\n    // }\n    TtfReader.prototype.readInt16 = function (offset) {\n        var result = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n        result = result & (1 << 15) ? result - 0x10000 : result;\n        this.offset += 2;\n        return result;\n    };\n    TtfReader.prototype.readInt64 = function (offset) {\n        var low = this.readInt32(offset + 4);\n        var n = this.readInt32(offset) * 4294967296.0 + low;\n        if (low < 0) {\n            n += 4294967296;\n        }\n        return n;\n    };\n    TtfReader.prototype.readUInt16 = function (offset) {\n        var result = (this.fontData[offset] << 8) | this.fontData[offset + 1];\n        this.offset += 2;\n        return result;\n    };\n    /**\n     * Reads ushort array.\n     */\n    TtfReader.prototype.readUshortArray = function (length) {\n        var buffer = [];\n        for (var i = 0; i < length; i++) {\n            buffer[i] = this.readUInt16(this.offset);\n        }\n        return buffer;\n    };\n    TtfReader.prototype.readBytes = function (length) {\n        var result = [];\n        for (var i = 0; i < length; i++) {\n            result.push(this.fontData[this.offset]);\n            this.offset += 1;\n        }\n        return result;\n    };\n    TtfReader.prototype.readByte = function (offset) {\n        var result = this.fontData[offset];\n        this.offset += 1;\n        return result;\n    };\n    /**\n     * Reads bytes to array in BigEndian order.\n     * @private\n     */\n    TtfReader.prototype.read = function (buffer, index, count) {\n        if (buffer === null) {\n            throw new Error('Argument Null Exception : buffer');\n        }\n        var written = 0;\n        var read = 0;\n        do {\n            for (var i = 0; (i < count - written) && (this.offset + i < this.fontData.length); i++) {\n                buffer[index + i] = this.fontData[this.offset + i];\n            }\n            read = count - written;\n            this.offset += read;\n            written += read;\n        } while (written < count);\n        return { buffer: buffer, written: written };\n    };\n    return TtfReader;\n}());\nexport { TtfReader };\n"]},"metadata":{},"sourceType":"module"}