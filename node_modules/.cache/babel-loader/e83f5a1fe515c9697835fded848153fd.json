{"ast":null,"code":"/**\n * Defines the common behavior of funnel and pyramid series\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\nimport { stringToNumber } from '../../common/utils/helper';\nimport { AccumulationBase } from './accumulation-base';\n/**\n * TriangularBase is used to calculate base functions for funnel/pyramid series.\n */\n\nvar TriangularBase =\n/** @class */\nfunction (_super) {\n  __extends(TriangularBase, _super);\n\n  function TriangularBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Initializes the properties of funnel/pyramid series\n   * @private\n   */\n\n\n  TriangularBase.prototype.initProperties = function (chart, series) {\n    var actualChartArea = chart.initialClipRect;\n    series.triangleSize = new Size(stringToNumber(series.width, actualChartArea.width), stringToNumber(series.height, actualChartArea.height));\n    series.neckSize = new Size(stringToNumber(series.neckWidth, actualChartArea.width), stringToNumber(series.neckHeight, actualChartArea.height));\n    this.defaultLabelBound(series, series.dataLabel.visible, series.dataLabel.position, chart);\n\n    if (series.explodeOffset === '30%') {\n      series.explodeOffset = '25px';\n    }\n\n    chart.explodeDistance = stringToNumber(series.explodeOffset, actualChartArea.width);\n    var points = series.points;\n    this.initializeSizeRatio(points, series);\n  };\n  /**\n   * Initializes the size of the pyramid/funnel segments\n   * @private\n   */\n\n\n  TriangularBase.prototype.initializeSizeRatio = function (points, series, reverse) {\n    if (reverse === void 0) {\n      reverse = false;\n    }\n\n    var sumOfPoints = series.sumOfPoints; //Limiting the ratio within the range of 0 to 1\n\n    var gapRatio = Math.min(Math.max(series.gapRatio, 0), 1); //% equivalence of a value 1\n\n    var coEff = 1 / (sumOfPoints * (1 + gapRatio / (1 - gapRatio)));\n    var spacing = gapRatio / (points.length - 1);\n    var y = 0; //starting from bottom\n\n    for (var i = points.length - 1; i >= 0; i--) {\n      var index = reverse ? points.length - 1 - i : i;\n\n      if (points[index].visible) {\n        var height = coEff * points[index].y;\n        points[index].yRatio = y;\n        points[index].heightRatio = height;\n        y += height + spacing;\n      }\n    }\n  };\n  /**\n   * Marks the label location from the set of points that forms a pyramid/funnel segment\n   * @private\n   */\n\n\n  TriangularBase.prototype.setLabelLocation = function (series, point, points) {\n    var last = points.length - 1;\n    var bottom = series.type === 'Funnel' ? points.length - 2 : points.length - 1;\n    var x = (points[0].x + points[bottom].x) / 2;\n    var right = (points[1].x + points[bottom - 1].x) / 2;\n    point.region = new Rect(x, points[0].y, right - x, points[bottom].y - points[0].y);\n    point.symbolLocation = {\n      x: point.region.x + point.region.width / 2,\n      y: point.region.y + point.region.height / 2\n    };\n    point.labelOffset = {\n      x: point.symbolLocation.x - (points[0].x + points[last].x) / 2,\n      y: point.symbolLocation.y - (points[0].y + points[last].y) / 2\n    };\n  };\n  /**\n   * Finds the path to connect the list of points\n   * @private\n   */\n\n\n  TriangularBase.prototype.findPath = function (locations) {\n    var path = 'M';\n\n    for (var i = 0; i < locations.length; i++) {\n      path += locations[i].x + ' ' + locations[i].y;\n\n      if (i !== locations.length - 1) {\n        path += ' L';\n      }\n    }\n\n    return path;\n  };\n  /**\n   * To calculate data-label bounds\n   * @private\n   */\n\n\n  TriangularBase.prototype.defaultLabelBound = function (series, visible, position, chart) {\n    var x = (chart.initialClipRect.width - series.triangleSize.width) / 2;\n    var y = (chart.initialClipRect.height - series.triangleSize.height) / 2;\n    var accumulationBound = new Rect(x, y, series.triangleSize.width, series.triangleSize.height);\n    series.labelBound = new Rect(accumulationBound.x, accumulationBound.y, accumulationBound.width + accumulationBound.x, accumulationBound.height + accumulationBound.y);\n    series.accumulationBound = accumulationBound;\n\n    if (visible && position === 'Outside') {\n      series.labelBound = new Rect(Infinity, Infinity, -Infinity, -Infinity);\n    }\n  };\n\n  return TriangularBase;\n}(AccumulationBase);\n\nexport { TriangularBase };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/triangular-base.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Rect","Size","stringToNumber","AccumulationBase","TriangularBase","_super","apply","arguments","initProperties","chart","series","actualChartArea","initialClipRect","triangleSize","width","height","neckSize","neckWidth","neckHeight","defaultLabelBound","dataLabel","visible","position","explodeOffset","explodeDistance","points","initializeSizeRatio","reverse","sumOfPoints","gapRatio","Math","min","max","coEff","spacing","length","y","i","index","yRatio","heightRatio","setLabelLocation","point","last","bottom","type","x","right","region","symbolLocation","labelOffset","findPath","locations","path","accumulationBound","labelBound","Infinity"],"mappings":"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","sourcesContent":["/**\n * Defines the common behavior of funnel and pyramid series\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\nimport { stringToNumber } from '../../common/utils/helper';\nimport { AccumulationBase } from './accumulation-base';\n/**\n * TriangularBase is used to calculate base functions for funnel/pyramid series.\n */\nvar TriangularBase = /** @class */ (function (_super) {\n    __extends(TriangularBase, _super);\n    function TriangularBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Initializes the properties of funnel/pyramid series\n     * @private\n     */\n    TriangularBase.prototype.initProperties = function (chart, series) {\n        var actualChartArea = chart.initialClipRect;\n        series.triangleSize = new Size(stringToNumber(series.width, actualChartArea.width), stringToNumber(series.height, actualChartArea.height));\n        series.neckSize = new Size(stringToNumber(series.neckWidth, actualChartArea.width), stringToNumber(series.neckHeight, actualChartArea.height));\n        this.defaultLabelBound(series, series.dataLabel.visible, series.dataLabel.position, chart);\n        if (series.explodeOffset === '30%') {\n            series.explodeOffset = '25px';\n        }\n        chart.explodeDistance = stringToNumber(series.explodeOffset, actualChartArea.width);\n        var points = series.points;\n        this.initializeSizeRatio(points, series);\n    };\n    /**\n     * Initializes the size of the pyramid/funnel segments\n     * @private\n     */\n    TriangularBase.prototype.initializeSizeRatio = function (points, series, reverse) {\n        if (reverse === void 0) { reverse = false; }\n        var sumOfPoints = series.sumOfPoints;\n        //Limiting the ratio within the range of 0 to 1\n        var gapRatio = Math.min(Math.max(series.gapRatio, 0), 1);\n        //% equivalence of a value 1\n        var coEff = 1 / (sumOfPoints * (1 + gapRatio / (1 - gapRatio)));\n        var spacing = gapRatio / (points.length - 1);\n        var y = 0;\n        //starting from bottom\n        for (var i = points.length - 1; i >= 0; i--) {\n            var index = reverse ? points.length - 1 - i : i;\n            if (points[index].visible) {\n                var height = coEff * points[index].y;\n                points[index].yRatio = y;\n                points[index].heightRatio = height;\n                y += height + spacing;\n            }\n        }\n    };\n    /**\n     * Marks the label location from the set of points that forms a pyramid/funnel segment\n     * @private\n     */\n    TriangularBase.prototype.setLabelLocation = function (series, point, points) {\n        var last = points.length - 1;\n        var bottom = series.type === 'Funnel' ? points.length - 2 : points.length - 1;\n        var x = (points[0].x + points[bottom].x) / 2;\n        var right = (points[1].x + points[bottom - 1].x) / 2;\n        point.region = new Rect(x, points[0].y, right - x, points[bottom].y - points[0].y);\n        point.symbolLocation = {\n            x: point.region.x + point.region.width / 2,\n            y: point.region.y + point.region.height / 2\n        };\n        point.labelOffset = {\n            x: point.symbolLocation.x - (points[0].x + points[last].x) / 2,\n            y: point.symbolLocation.y - (points[0].y + points[last].y) / 2\n        };\n    };\n    /**\n     * Finds the path to connect the list of points\n     * @private\n     */\n    TriangularBase.prototype.findPath = function (locations) {\n        var path = 'M';\n        for (var i = 0; i < locations.length; i++) {\n            path += locations[i].x + ' ' + locations[i].y;\n            if (i !== locations.length - 1) {\n                path += ' L';\n            }\n        }\n        return path;\n    };\n    /**\n     * To calculate data-label bounds\n     * @private\n     */\n    TriangularBase.prototype.defaultLabelBound = function (series, visible, position, chart) {\n        var x = (chart.initialClipRect.width - series.triangleSize.width) / 2;\n        var y = (chart.initialClipRect.height - series.triangleSize.height) / 2;\n        var accumulationBound = new Rect(x, y, series.triangleSize.width, series.triangleSize.height);\n        series.labelBound = new Rect(accumulationBound.x, accumulationBound.y, accumulationBound.width + accumulationBound.x, accumulationBound.height + accumulationBound.y);\n        series.accumulationBound = accumulationBound;\n        if (visible && position === 'Outside') {\n            series.labelBound = new Rect(Infinity, Infinity, -Infinity, -Infinity);\n        }\n    };\n    return TriangularBase;\n}(AccumulationBase));\nexport { TriangularBase };\n"]},"metadata":{},"sourceType":"module"}