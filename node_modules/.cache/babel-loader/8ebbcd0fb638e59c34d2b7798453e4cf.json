{"ast":null,"code":"import { ClosestPoint, SmithchartRect } from '../../smithchart/utils/utils';\nimport { Tooltip } from '@syncfusion/ej2-svg-base';\nimport { isNullOrUndefined, createElement } from '@syncfusion/ej2-base';\n/**\n * To render tooltip\n */\n\nvar TooltipRender =\n/** @class */\nfunction () {\n  function TooltipRender() {}\n\n  TooltipRender.prototype.smithchartMouseMove = function (smithchart, e) {\n    var touchArg;\n    var pageX;\n    var pageY;\n\n    if (e.type === 'touchend' || e.type === 'touchmove') {\n      touchArg = e;\n      pageX = touchArg.changedTouches[0].clientX;\n      pageY = touchArg.changedTouches[0].clientY;\n      this.tooltipElement = undefined;\n    } else {\n      pageY = e.clientY;\n      pageX = e.clientX;\n    }\n\n    this.setMouseXY(smithchart, pageX, pageY);\n\n    for (var i = 0; i < smithchart.series.length; i++) {\n      var series = smithchart.series[i];\n      var seriesIndex = i;\n      var closestPoint = new ClosestPoint();\n      closestPoint = this.closestPointXY(smithchart, this.mouseX, this.mouseY, series, seriesIndex);\n\n      if (closestPoint.location && series.tooltip.visible && series.visibility === 'visible') {\n        this.createTooltip(smithchart, e, closestPoint.index, seriesIndex, series);\n        break;\n      } else if (this.tooltipElement) {\n        if (this.tooltipElement.enable && !series.tooltip.template) {\n          this.tooltipElement.enable = false;\n        }\n\n        this.tooltipElement.fadeOut();\n      }\n    }\n\n    return this.tooltipElement;\n  };\n\n  TooltipRender.prototype.setMouseXY = function (smithchart, pageX, pageY) {\n    var svgRectElement = document.getElementById(smithchart.element.id + '_svg');\n\n    if (smithchart.element && svgRectElement) {\n      var rect = smithchart.element.getBoundingClientRect();\n      var svgRect = svgRectElement.getBoundingClientRect();\n      this.mouseX = pageX - rect.left - Math.max(svgRect.left - rect.left, 0);\n      this.mouseY = pageY - rect.top - Math.max(svgRect.top - rect.top, 0);\n    }\n  };\n\n  TooltipRender.prototype.createTooltip = function (smithchart, e, pointindex, seriesindex, series) {\n    var _this = this;\n\n    var currentPoint = series.points[pointindex];\n    var pointX = currentPoint.resistance;\n    var pointY = currentPoint.reactance;\n    var tooltip = currentPoint.tooltip ? [currentPoint.tooltip] : null;\n    var tooltipText = [pointX + ' ' + ':' + ' ' + '<b>' + pointY + '</b>'];\n    var argsData = {\n      cancel: false,\n      name: 'tooltipRender',\n      text: tooltip || tooltipText,\n      headerText: '<b>' + series.name + '</b>',\n      template: series.tooltip.template,\n      point: currentPoint\n    };\n\n    var smithChartTooltipSuccess = function (argsData) {\n      var markerHeight = smithchart.series[seriesindex].marker.height / 2;\n      var div = document.getElementById(smithchart.element.id + '_smithchart_tooltip_div');\n\n      if (isNullOrUndefined(div)) {\n        div = createElement('div', {\n          id: smithchart.element.id + '_smithchart_tooltip_div',\n          styles: 'pointer-events: none; position: absolute;z-index:1;'\n        });\n        document.getElementById(smithchart.element.id + '_Secondary_Element').appendChild(div);\n      }\n\n      _this.tooltipElement = new Tooltip({\n        enable: true,\n        header: argsData.headerText,\n        content: argsData.text,\n        border: series.tooltip.border,\n        fill: smithchart.themeStyle.tooltipFill,\n        data: currentPoint,\n        template: argsData.template,\n        location: {\n          x: _this.locationX + smithchart.element.offsetLeft,\n          y: _this.locationY - markerHeight + smithchart.element.offsetTop\n        },\n        shared: false,\n        areaBounds: new SmithchartRect(smithchart.bounds.x, smithchart.bounds.y, smithchart.bounds.width, smithchart.bounds.height),\n        palette: [series.fill || smithchart.seriesColors[seriesindex % smithchart.seriesColors.length]],\n        shapes: ['Circle'],\n        availableSize: smithchart.availableSize,\n        theme: smithchart.theme,\n        blazorTemplate: {\n          name: 'TooltipTemplate',\n          parent: smithchart.series[seriesindex].tooltip\n        }\n      });\n      _this.tooltipElement.opacity = smithchart.themeStyle.tooltipFillOpacity || _this.tooltipElement.opacity;\n      _this.tooltipElement.textStyle.fontFamily = smithchart.themeStyle.fontFamily || 'Roboto, Segoe UI, Noto, Sans-serif';\n      _this.tooltipElement.textStyle.opacity = smithchart.themeStyle.tooltipTextOpacity || _this.tooltipElement.textStyle.opacity;\n\n      _this.tooltipElement.appendTo(div);\n    };\n\n    smithChartTooltipSuccess.bind(this, smithchart);\n    smithchart.trigger('tooltipRender', argsData, smithChartTooltipSuccess);\n  };\n\n  TooltipRender.prototype.closestPointXY = function (smithchart, x, y, series, seriesindex) {\n    var pointIndex;\n    var chartPoint;\n    var closePoint;\n\n    for (var j = 0; j < series.points.length; j++) {\n      chartPoint = smithchart.seriesrender.getLocation(seriesindex, j);\n      this.locationX = chartPoint.x;\n      this.locationY = chartPoint.y;\n      pointIndex = j;\n      var a = x - chartPoint.x;\n      var b = y - chartPoint.y;\n      var distance = Math.abs(Math.sqrt(a * a + b * b));\n\n      if (distance < series.marker.width) {\n        closePoint = chartPoint;\n        pointIndex = j;\n        break;\n      }\n    }\n\n    return {\n      location: closePoint,\n      index: pointIndex\n    };\n  };\n  /**\n   * Get module name.\n   */\n\n\n  TooltipRender.prototype.getModuleName = function () {\n    return 'TooltipRender';\n  };\n  /**\n   * To destroy the legend.\n   * @return {void}\n   * @private\n   */\n\n\n  TooltipRender.prototype.destroy = function (smithchart) {\n    /**\n     * Destroy method performed here\n     */\n  };\n\n  return TooltipRender;\n}();\n\nexport { TooltipRender };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-charts/src/smithchart/series/tooltip.js"],"names":["ClosestPoint","SmithchartRect","Tooltip","isNullOrUndefined","createElement","TooltipRender","prototype","smithchartMouseMove","smithchart","e","touchArg","pageX","pageY","type","changedTouches","clientX","clientY","tooltipElement","undefined","setMouseXY","i","series","length","seriesIndex","closestPoint","closestPointXY","mouseX","mouseY","location","tooltip","visible","visibility","createTooltip","index","enable","template","fadeOut","svgRectElement","document","getElementById","element","id","rect","getBoundingClientRect","svgRect","left","Math","max","top","pointindex","seriesindex","_this","currentPoint","points","pointX","resistance","pointY","reactance","tooltipText","argsData","cancel","name","text","headerText","point","smithChartTooltipSuccess","markerHeight","marker","height","div","styles","appendChild","header","content","border","fill","themeStyle","tooltipFill","data","x","locationX","offsetLeft","y","locationY","offsetTop","shared","areaBounds","bounds","width","palette","seriesColors","shapes","availableSize","theme","blazorTemplate","parent","opacity","tooltipFillOpacity","textStyle","fontFamily","tooltipTextOpacity","appendTo","bind","trigger","pointIndex","chartPoint","closePoint","j","seriesrender","getLocation","a","b","distance","abs","sqrt","getModuleName","destroy"],"mappings":"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","sourcesContent":["import { ClosestPoint, SmithchartRect } from '../../smithchart/utils/utils';\nimport { Tooltip } from '@syncfusion/ej2-svg-base';\nimport { isNullOrUndefined, createElement } from '@syncfusion/ej2-base';\n/**\n * To render tooltip\n */\nvar TooltipRender = /** @class */ (function () {\n    function TooltipRender() {\n    }\n    TooltipRender.prototype.smithchartMouseMove = function (smithchart, e) {\n        var touchArg;\n        var pageX;\n        var pageY;\n        if (e.type === 'touchend' || e.type === 'touchmove') {\n            touchArg = e;\n            pageX = touchArg.changedTouches[0].clientX;\n            pageY = touchArg.changedTouches[0].clientY;\n            this.tooltipElement = undefined;\n        }\n        else {\n            pageY = e.clientY;\n            pageX = e.clientX;\n        }\n        this.setMouseXY(smithchart, pageX, pageY);\n        for (var i = 0; i < smithchart.series.length; i++) {\n            var series = smithchart.series[i];\n            var seriesIndex = i;\n            var closestPoint = new ClosestPoint();\n            closestPoint = this.closestPointXY(smithchart, this.mouseX, this.mouseY, series, seriesIndex);\n            if (closestPoint.location && series.tooltip.visible && series.visibility === 'visible') {\n                this.createTooltip(smithchart, e, closestPoint.index, seriesIndex, series);\n                break;\n            }\n            else if (this.tooltipElement) {\n                if (this.tooltipElement.enable && !series.tooltip.template) {\n                    this.tooltipElement.enable = false;\n                }\n                this.tooltipElement.fadeOut();\n            }\n        }\n        return this.tooltipElement;\n    };\n    TooltipRender.prototype.setMouseXY = function (smithchart, pageX, pageY) {\n        var svgRectElement = document.getElementById(smithchart.element.id + '_svg');\n        if (smithchart.element && svgRectElement) {\n            var rect = smithchart.element.getBoundingClientRect();\n            var svgRect = svgRectElement.getBoundingClientRect();\n            this.mouseX = (pageX - rect.left) - Math.max(svgRect.left - rect.left, 0);\n            this.mouseY = (pageY - rect.top) - Math.max(svgRect.top - rect.top, 0);\n        }\n    };\n    TooltipRender.prototype.createTooltip = function (smithchart, e, pointindex, seriesindex, series) {\n        var _this = this;\n        var currentPoint = series.points[pointindex];\n        var pointX = currentPoint.resistance;\n        var pointY = currentPoint.reactance;\n        var tooltip = currentPoint.tooltip ? [currentPoint.tooltip] : null;\n        var tooltipText = [pointX + ' ' + ':' + ' ' + '<b>' + pointY + '</b>'];\n        var argsData = {\n            cancel: false, name: 'tooltipRender',\n            text: tooltip || tooltipText,\n            headerText: '<b>' + series.name + '</b>',\n            template: series.tooltip.template,\n            point: currentPoint\n        };\n        var smithChartTooltipSuccess = function (argsData) {\n            var markerHeight = smithchart.series[seriesindex].marker.height / 2;\n            var div = document.getElementById(smithchart.element.id + '_smithchart_tooltip_div');\n            if (isNullOrUndefined(div)) {\n                div = createElement('div', {\n                    id: smithchart.element.id + '_smithchart_tooltip_div',\n                    styles: 'pointer-events: none; position: absolute;z-index:1;'\n                });\n                document.getElementById(smithchart.element.id + '_Secondary_Element').appendChild(div);\n            }\n            _this.tooltipElement = new Tooltip({\n                enable: true,\n                header: argsData.headerText,\n                content: argsData.text,\n                border: series.tooltip.border,\n                fill: smithchart.themeStyle.tooltipFill,\n                data: currentPoint,\n                template: argsData.template,\n                location: {\n                    x: _this.locationX + smithchart.element.offsetLeft,\n                    y: _this.locationY - markerHeight + smithchart.element.offsetTop\n                },\n                shared: false,\n                areaBounds: new SmithchartRect(smithchart.bounds.x, smithchart.bounds.y, smithchart.bounds.width, smithchart.bounds.height),\n                palette: [series.fill || smithchart.seriesColors[seriesindex % smithchart.seriesColors.length]],\n                shapes: ['Circle'],\n                availableSize: smithchart.availableSize,\n                theme: smithchart.theme,\n                blazorTemplate: { name: 'TooltipTemplate', parent: smithchart.series[seriesindex].tooltip }\n            });\n            _this.tooltipElement.opacity = smithchart.themeStyle.tooltipFillOpacity || _this.tooltipElement.opacity;\n            _this.tooltipElement.textStyle.fontFamily = smithchart.themeStyle.fontFamily || 'Roboto, Segoe UI, Noto, Sans-serif';\n            _this.tooltipElement.textStyle.opacity = smithchart.themeStyle.tooltipTextOpacity || _this.tooltipElement.textStyle.opacity;\n            _this.tooltipElement.appendTo(div);\n        };\n        smithChartTooltipSuccess.bind(this, smithchart);\n        smithchart.trigger('tooltipRender', argsData, smithChartTooltipSuccess);\n    };\n    TooltipRender.prototype.closestPointXY = function (smithchart, x, y, series, seriesindex) {\n        var pointIndex;\n        var chartPoint;\n        var closePoint;\n        for (var j = 0; j < series.points.length; j++) {\n            chartPoint = smithchart.seriesrender.getLocation(seriesindex, j);\n            this.locationX = chartPoint.x;\n            this.locationY = chartPoint.y;\n            pointIndex = j;\n            var a = x - chartPoint.x;\n            var b = y - chartPoint.y;\n            var distance = Math.abs(Math.sqrt((a * a) + (b * b)));\n            if (distance < series.marker.width) {\n                closePoint = chartPoint;\n                pointIndex = j;\n                break;\n            }\n        }\n        return { location: closePoint, index: pointIndex };\n    };\n    /**\n     * Get module name.\n     */\n    TooltipRender.prototype.getModuleName = function () {\n        return 'TooltipRender';\n    };\n    /**\n     * To destroy the legend.\n     * @return {void}\n     * @private\n     */\n    TooltipRender.prototype.destroy = function (smithchart) {\n        /**\n         * Destroy method performed here\n         */\n    };\n    return TooltipRender;\n}());\nexport { TooltipRender };\n"]},"metadata":{},"sourceType":"module"}