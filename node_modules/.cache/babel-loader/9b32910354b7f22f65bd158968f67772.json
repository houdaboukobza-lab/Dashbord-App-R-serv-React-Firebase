{"ast":null,"code":"/**\n * `PdfNumber` class is used to perform number related primitive operations.\n * @private\n */\nvar PdfNumber =\n/** @class */\nfunction () {\n  /**\n   * Initializes a new instance of the `PdfNumber` class.\n   * @private\n   */\n  function PdfNumber(value) {\n    /**\n     * Sotres the `position`.\n     * @default -1\n     * @private\n     */\n    this.position5 = -1;\n    this.value = value;\n  }\n\n  Object.defineProperty(PdfNumber.prototype, \"intValue\", {\n    /**\n     * Gets or sets the `integer` value.\n     * @private\n     */\n    get: function () {\n      return this.value;\n    },\n    set: function (value) {\n      this.value = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfNumber.prototype, \"isInteger\", {\n    /**\n     * Gets or sets a value indicating whether this instance `is integer`.\n     * @private\n     */\n    get: function () {\n      return this.integer;\n    },\n    set: function (value) {\n      this.integer = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfNumber.prototype, \"status\", {\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status5;\n    },\n    set: function (value) {\n      this.status5 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfNumber.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving5;\n    },\n    set: function (value) {\n      this.isSaving5 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfNumber.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index5;\n    },\n    set: function (value) {\n      this.index5 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfNumber.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position5;\n    },\n    set: function (value) {\n      this.position5 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfNumber.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      var rValue = null;\n      return rValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * `Saves the object`.\n   * @private\n   */\n\n  PdfNumber.prototype.save = function (writer) {\n    writer.write(this.intValue.toString()); //tostring(CultureInfo.InletiantCulture)\n  };\n  /**\n   * Creates a `copy of PdfNumber`.\n   * @private\n   */\n\n\n  PdfNumber.prototype.clone = function (crossTable) {\n    var newNumber = new PdfNumber(this.value);\n    return newNumber;\n  };\n  /**\n   * Converts a `float value to a string` using Adobe PDF rules.\n   * @private\n   */\n\n\n  PdfNumber.floatToString = function (number) {\n    // let tempString1 : string = number.toString();\n    // let tempString2 : string = tempString1.indexOf('.') != -1 ? tempString1.substring(0, tempString1.indexOf('.')) : tempString1;\n    var returnString = number.toFixed(2);\n\n    if (returnString === '0.00') {\n      returnString = '.00';\n    } // let prefixLength : number = (22 - tempString2.length) >= 0 ? (22 - tempString2.length) : 0;\n    // for (let index : number = 0; index < prefixLength; index++) {\n    //     returnString += '0';\n    // }\n    // returnString += tempString2 + '.00';\n    // returnString += (tempString3.length > 6) ? tempString3.substring(0,6) : tempString3;\n    // let suffixLength : number = (6 - tempString3.length) >= 0 ? (6 - tempString3.length) : 0;\n    // for (let index : number = 0; index < suffixLength; index++) {\n    //     returnString += '0';\n    // }\n\n\n    return returnString;\n  };\n  /**\n   * Determines the `minimum of the three values`.\n   * @private\n   */\n\n\n  PdfNumber.min = function (x, y, z) {\n    var r = Math.min(x, y);\n    return Math.min(z, r);\n  };\n\n  return PdfNumber;\n}();\n\nexport { PdfNumber };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-number.js"],"names":["PdfNumber","value","position5","Object","defineProperty","prototype","get","set","enumerable","configurable","integer","status5","isSaving5","index5","rValue","save","writer","write","intValue","toString","clone","crossTable","newNumber","floatToString","number","returnString","toFixed","min","x","y","z","r","Math"],"mappings":"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","sourcesContent":["/**\n * `PdfNumber` class is used to perform number related primitive operations.\n * @private\n */\nvar PdfNumber = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the `PdfNumber` class.\n     * @private\n     */\n    function PdfNumber(value) {\n        /**\n         * Sotres the `position`.\n         * @default -1\n         * @private\n         */\n        this.position5 = -1;\n        this.value = value;\n    }\n    Object.defineProperty(PdfNumber.prototype, \"intValue\", {\n        /**\n         * Gets or sets the `integer` value.\n         * @private\n         */\n        get: function () {\n            return this.value;\n        },\n        set: function (value) {\n            this.value = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNumber.prototype, \"isInteger\", {\n        /**\n         * Gets or sets a value indicating whether this instance `is integer`.\n         * @private\n         */\n        get: function () {\n            return this.integer;\n        },\n        set: function (value) {\n            this.integer = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNumber.prototype, \"status\", {\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status5;\n        },\n        set: function (value) {\n            this.status5 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNumber.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving5;\n        },\n        set: function (value) {\n            this.isSaving5 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNumber.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index5;\n        },\n        set: function (value) {\n            this.index5 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNumber.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position5;\n        },\n        set: function (value) {\n            this.position5 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNumber.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            var rValue = null;\n            return rValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Saves the object`.\n     * @private\n     */\n    PdfNumber.prototype.save = function (writer) {\n        writer.write(this.intValue.toString()); //tostring(CultureInfo.InletiantCulture)\n    };\n    /**\n     * Creates a `copy of PdfNumber`.\n     * @private\n     */\n    PdfNumber.prototype.clone = function (crossTable) {\n        var newNumber = new PdfNumber(this.value);\n        return newNumber;\n    };\n    /**\n     * Converts a `float value to a string` using Adobe PDF rules.\n     * @private\n     */\n    PdfNumber.floatToString = function (number) {\n        // let tempString1 : string = number.toString();\n        // let tempString2 : string = tempString1.indexOf('.') != -1 ? tempString1.substring(0, tempString1.indexOf('.')) : tempString1;\n        var returnString = number.toFixed(2);\n        if (returnString === '0.00') {\n            returnString = '.00';\n        }\n        // let prefixLength : number = (22 - tempString2.length) >= 0 ? (22 - tempString2.length) : 0;\n        // for (let index : number = 0; index < prefixLength; index++) {\n        //     returnString += '0';\n        // }\n        // returnString += tempString2 + '.00';\n        // returnString += (tempString3.length > 6) ? tempString3.substring(0,6) : tempString3;\n        // let suffixLength : number = (6 - tempString3.length) >= 0 ? (6 - tempString3.length) : 0;\n        // for (let index : number = 0; index < suffixLength; index++) {\n        //     returnString += '0';\n        // }\n        return returnString;\n    };\n    /**\n     * Determines the `minimum of the three values`.\n     * @private\n     */\n    PdfNumber.min = function (x, y, z) {\n        var r = Math.min(x, y);\n        return Math.min(z, r);\n    };\n    return PdfNumber;\n}());\nexport { PdfNumber };\n"]},"metadata":{},"sourceType":"module"}