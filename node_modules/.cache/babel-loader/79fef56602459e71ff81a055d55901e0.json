{"ast":null,"code":"import { PdfGrid } from './pdf-grid';\nimport { PdfGridCellStyle } from './styles/style';\nimport { PdfStringLayouter } from './../../graphics/fonts/string-layouter';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\nimport { RectangleF, PointF, SizeF } from './../../drawing/pdf-drawing';\nimport { PdfDashStyle, PdfLineCap } from './../../graphics/enum';\nimport { PdfBorderOverlapStyle } from './../tables/light-tables/enum';\nimport { PdfSolidBrush } from './../../graphics/brushes/pdf-solid-brush';\nimport { PdfColor } from './../../graphics/pdf-color';\nimport { PdfImage } from './../../graphics/images/pdf-image';\nimport { PdfBitmap } from './../../graphics/images/pdf-bitmap';\nimport { PdfTextWebLink } from './../../annotations/pdf-text-web-link';\nimport { PdfLayoutType } from './../../graphics/figures/enum';\nimport { PdfGridLayouter, PdfGridLayoutFormat } from './../../structured-elements/grid/layout/grid-layouter';\nimport { PdfLayoutParams } from '../../../implementation/graphics/figures/base/element-layouter';\n/**\n * `PdfGridCell` class represents the schema of a cell in a 'PdfGrid'.\n */\n\nvar PdfGridCell =\n/** @class */\nfunction () {\n  function PdfGridCell(row) {\n    /**\n     * `Width` of the cell.\n     * @default 0\n     * @private\n     */\n    this.cellWidth = 0;\n    /**\n     * `Height` of the cell.\n     * @default 0\n     * @private\n     */\n\n    this.cellHeight = 0;\n    /**\n     * `tempval`to stores current width .\n     * @default 0\n     * @private\n     */\n\n    this.tempval = 0;\n    this.fontSpilt = false;\n    /**\n     * Specifies weather the `cell is drawn`.\n     * @default true\n     * @private\n     */\n\n    this.finsh = true;\n    /**\n     * The `remaining height` of row span.\n     * @default 0\n     * @private\n     */\n\n    this.rowSpanRemainingHeight = 0;\n    this.hasRowSpan = false;\n    this.hasColSpan = false;\n    /**\n     * the 'isFinish' is set to page finish\n     */\n\n    this.isFinish = true;\n    /**\n     * The `present' to store the current cell.\n     * @default false\n     * @private\n     */\n\n    this.present = false;\n    this.gridRowSpan = 1;\n    this.colSpan = 1;\n\n    if (typeof row !== 'undefined') {\n      this.gridRow = row;\n    }\n  }\n\n  Object.defineProperty(PdfGridCell.prototype, \"isCellMergeContinue\", {\n    //Properties\n    get: function () {\n      return this.internalIsCellMergeContinue;\n    },\n    set: function (value) {\n      this.internalIsCellMergeContinue = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"isRowMergeContinue\", {\n    get: function () {\n      return this.internalIsRowMergeContinue;\n    },\n    set: function (value) {\n      this.internalIsRowMergeContinue = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"isCellMergeStart\", {\n    get: function () {\n      return this.internalIsCellMergeStart;\n    },\n    set: function (value) {\n      this.internalIsCellMergeStart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"isRowMergeStart\", {\n    get: function () {\n      return this.internalIsRowMergeStart;\n    },\n    set: function (value) {\n      this.internalIsRowMergeStart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"remainingString\", {\n    /**\n     * Gets or sets the `remaining string` after the row split between pages.\n     * @private\n     */\n    get: function () {\n      return this.remaining;\n    },\n    set: function (value) {\n      this.remaining = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"FinishedDrawingCell\", {\n    /**\n     * Gets or sets the `FinishedDrawingCell` .\n     * @private\n     */\n    get: function () {\n      return this.isFinish;\n    },\n    set: function (value) {\n      this.isFinish = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"stringFormat\", {\n    /**\n     * Gets or sets the `string format`.\n     * @private\n     */\n    get: function () {\n      if (this.format == null) {\n        this.format = new PdfStringFormat();\n      }\n\n      return this.format;\n    },\n    set: function (value) {\n      this.format = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"row\", {\n    /**\n     * Gets or sets the parent `row`.\n     * @private\n     */\n    get: function () {\n      return this.gridRow;\n    },\n    set: function (value) {\n      this.gridRow = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"value\", {\n    /**\n     * Gets or sets the `value` of the cell.\n     * @private\n     */\n    get: function () {\n      return this.objectValue;\n    },\n    set: function (value) {\n      this.objectValue = value;\n\n      if (this.objectValue instanceof PdfGrid) {\n        this.row.grid.isSingleGrid = false;\n        var grid = this.objectValue;\n        grid.ParentCell = this;\n        this.objectValue.isChildGrid = true;\n        var rowCount = this.row.grid.rows.count;\n\n        for (var i = 0; i < rowCount; i++) {\n          var row = this.row.grid.rows.getRow(i);\n          var colCount = row.cells.count;\n\n          for (var j = 0; j < colCount; j++) {\n            var cell = row.cells.getCell(j);\n            cell.parent = this;\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"rowSpan\", {\n    /**\n     * Gets or sets a value that indicates the total number of rows that cell `spans` within a PdfGrid.\n     * @private\n     */\n    get: function () {\n      return this.gridRowSpan;\n    },\n    set: function (value) {\n      if (value < 1) {\n        throw new Error('ArgumentException : Invalid span specified, must be greater than or equal to 1');\n      } else {\n        this.gridRowSpan = value;\n        this.row.rowSpanExists = true;\n        this.row.grid.hasRowSpanSpan = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"style\", {\n    /**\n     * Gets or sets the cell `style`.\n     * @private\n     */\n    get: function () {\n      if (this.cellStyle == null) {\n        this.cellStyle = new PdfGridCellStyle();\n      }\n\n      return this.cellStyle;\n    },\n    set: function (value) {\n      this.cellStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"height\", {\n    /**\n     * Gets the `height` of the PdfGrid cell.[Read-Only].\n     * @private\n     */\n    get: function () {\n      if (this.cellHeight === 0) {\n        this.cellHeight = this.measureHeight();\n      }\n\n      return this.cellHeight;\n    },\n    set: function (value) {\n      this.cellHeight = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"columnSpan\", {\n    /**\n     * Gets or sets a value that indicates the total number of columns that cell `spans` within a PdfGrid.\n     * @private\n     */\n    get: function () {\n      return this.colSpan;\n    },\n    set: function (value) {\n      if (value < 1) {\n        throw Error('Invalid span specified, must be greater than or equal to 1');\n      } else {\n        this.colSpan = value;\n        this.row.columnSpanExists = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCell.prototype, \"width\", {\n    /**\n     * Gets the `width` of the PdfGrid cell.[Read-Only].\n     * @private\n     */\n    get: function () {\n      if (this.cellWidth === 0 || this.row.grid.isComplete) {\n        this.cellWidth = this.measureWidth();\n      }\n\n      return Math.round(this.cellWidth);\n    },\n    set: function (value) {\n      this.cellWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  /**\n   * `Calculates the width`.\n   * @private\n   */\n\n  PdfGridCell.prototype.measureWidth = function () {\n    // .. Calculate the cell text width.\n    // .....Add border widths, cell spacings and paddings to the width.\n    var width = 0;\n    var layouter = new PdfStringLayouter();\n\n    if (typeof this.objectValue === 'string') {\n      /* tslint:disable */\n      var slr = layouter.layout(this.objectValue, this.getTextFont(), this.stringFormat, new SizeF(Number.MAX_VALUE, Number.MAX_VALUE), false, new SizeF(0, 0));\n      width += slr.actualSize.width;\n      width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n    } else if (this.objectValue instanceof PdfGrid) {\n      width = this.objectValue.size.width; //width += this.objectValue.style.cellSpacing;\n    } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n      width += this.objectValue.width;\n    } else if (this.objectValue instanceof PdfTextWebLink) {\n      var webLink = this.objectValue;\n      var result = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(0, 0), false, new SizeF(0, 0));\n      /* tslint:enable */\n\n      width += result.actualSize.width;\n      width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n    }\n\n    if (!(this.objectValue instanceof PdfGrid)) {\n      if (this.style.cellPadding != null) {\n        width += this.style.cellPadding.left + this.style.cellPadding.right;\n      } else {\n        width += this.row.grid.style.cellPadding.left + this.row.grid.style.cellPadding.right;\n      }\n    } else {\n      if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n        if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n          width += this.style.cellPadding.left;\n        }\n\n        if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n          width += this.style.cellPadding.right;\n        }\n      } else {\n        if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n          width += this.row.grid.style.cellPadding.left;\n        }\n\n        if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n          width += this.row.grid.style.cellPadding.right;\n        }\n      }\n    }\n\n    width += this.row.grid.style.cellSpacing;\n    return width;\n  };\n  /**\n   * Draw the `cell background`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.drawCellBackground = function (graphics, bounds) {\n    var backgroundBrush = this.getBackgroundBrush(); //graphics.isTemplateGraphics = true;\n\n    if (backgroundBrush != null) {\n      graphics.save();\n      graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);\n      graphics.restore();\n    }\n\n    if (this.style.backgroundImage != null) {\n      var image = this.getBackgroundImage();\n      graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);\n    }\n  };\n  /**\n   * `Adjusts the text layout area`.\n   * @private\n   */\n\n  /* tslint:disable */\n\n\n  PdfGridCell.prototype.adjustContentLayoutArea = function (bounds) {\n    //Add Padding value to its Cell Bounds\n    var returnBounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);\n\n    if (!(this.objectValue instanceof PdfGrid)) {\n      if (typeof this.style.cellPadding === 'undefined' || this.style.cellPadding == null) {\n        returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n        returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n        returnBounds.width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;\n        returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom + this.gridRow.grid.style.cellPadding.top;\n        returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;\n      } else {\n        returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n        returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n        returnBounds.width -= this.style.cellPadding.right + this.style.cellPadding.left;\n        returnBounds.width -= this.cellStyle.borders.left.width + this.cellStyle.borders.right.width;\n        returnBounds.height -= this.style.cellPadding.bottom + this.style.cellPadding.top;\n        returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;\n\n        if (this.rowSpan === 1) {\n          returnBounds.width -= this.style.borders.left.width;\n        }\n      }\n    } else {\n      if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n        if (typeof this.gridRow.grid.style.cellPadding.left !== 'undefined' && this.gridRow.grid.style.cellPadding.hasLeftPad) {\n          returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n          returnBounds.width -= this.gridRow.grid.style.cellPadding.left;\n        }\n\n        if (typeof this.gridRow.grid.style.cellPadding.top !== 'undefined' && this.gridRow.grid.style.cellPadding.hasTopPad) {\n          returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n          returnBounds.height -= this.gridRow.grid.style.cellPadding.top;\n        }\n\n        if (typeof this.gridRow.grid.style.cellPadding.right !== 'undefined' && this.gridRow.grid.style.cellPadding.hasRightPad) {\n          returnBounds.width -= this.gridRow.grid.style.cellPadding.right;\n        }\n\n        if (typeof this.gridRow.grid.style.cellPadding.bottom !== 'undefined' && this.gridRow.grid.style.cellPadding.hasBottomPad) {\n          returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom;\n        }\n      } else {\n        if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n          returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n          returnBounds.width -= this.style.cellPadding.left;\n        }\n\n        if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n          returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n          returnBounds.height -= this.style.cellPadding.top;\n        }\n\n        if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n          returnBounds.width -= this.style.cellPadding.right;\n        }\n\n        if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n          returnBounds.height -= this.style.cellPadding.bottom;\n        }\n      }\n\n      returnBounds.width -= this.cellStyle.borders.left.width + this.cellStyle.borders.right.width;\n      returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width;\n    }\n\n    return returnBounds;\n  };\n  /**\n   * `Draws` the specified graphics.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.draw = function (graphics, bounds, cancelSubsequentSpans) {\n    var isrowbreak = false;\n    /*if (!this.row.grid.isSingleGrid)\n    {\n        //Check whether the Grid Span to Nextpage\n        if ((this.remainingString != null) || (PdfGridLayouter.repeatRowIndex != -1))\n        {\n            this.DrawParentCells(graphics, bounds, true);\n        }\n        else if (this.row.grid.rows.count > 1)\n        {\n            for (let i : number  = 0; i < this.row.grid.rows.count; i++)\n            {\n                if (this.row == this.row.grid.rows.getRow(i))\n                {\n                    if (this.row.grid.rows.getRow(i).rowBreakHeight > 0)\n                        isrowbreak = true;\n                    if ((i > 0) && (isrowbreak))\n                        this.DrawParentCells(graphics, bounds, false);\n                }\n            }\n        }\n    } */\n\n    var result = null;\n    /*if (cancelSubsequentSpans)\n    {\n        //..Cancel all subsequent cell spans, if no space exists.\n        let currentCellIndex : number = this.row.cells.indexOf(this);\n        for (let i : number = currentCellIndex + 1; i <= currentCellIndex + this.colSpan; i++)\n        {\n            this.row.cells.getCell(i).isCellMergeContinue = false;\n            this.row.cells.getCell(i).isRowMergeContinue = false;\n        }\n        this.colSpan = 1;\n    }*/\n    //..Skip cells which were already covered by spanmap.\n\n    if (this.internalIsCellMergeContinue || this.internalIsRowMergeContinue) {\n      if (this.internalIsCellMergeContinue && this.row.grid.style.allowHorizontalOverflow) {\n        if (this.row.rowOverflowIndex > 0 && this.row.cells.indexOf(this) != this.row.rowOverflowIndex + 1 || this.row.rowOverflowIndex == 0 && this.internalIsCellMergeContinue) {\n          return result;\n        }\n      } else {\n        return result;\n      }\n    } //Adjust bounds with Row and Column Spacing\n\n\n    bounds = this.adjustOuterLayoutArea(bounds, graphics);\n    this.drawCellBackground(graphics, bounds);\n    var textPen = this.getTextPen();\n    var textBrush = this.getTextBrush();\n\n    if (typeof textPen === 'undefined' && typeof textBrush === 'undefined') {\n      textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n    }\n\n    var font = this.getTextFont();\n    var strFormat = this.getStringFormat();\n    var innerLayoutArea = bounds;\n\n    if (innerLayoutArea.height >= graphics.clientSize.height) {\n      // If to break row to next page.\n      if (this.row.grid.allowRowBreakAcrossPages) {\n        innerLayoutArea.height -= innerLayoutArea.y; //bounds.height -= bounds.y;\n        // if(this.row.grid.isChildGrid)\n        // {\n        //     innerLayoutArea.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n        // }\n      } // if user choose to cut the row whose height is more than page height.\n      // else\n      // {\n      //     innerLayoutArea.height = graphics.clientSize.height;\n      //     bounds.height = graphics.clientSize.height;\n      // }\n\n    }\n\n    innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea);\n\n    if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n      var temp = void 0;\n      var layoutRectangle = void 0;\n      if (innerLayoutArea.height < font.height) layoutRectangle = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, font.height);else layoutRectangle = innerLayoutArea;\n\n      if (innerLayoutArea.height < font.height && this.row.grid.isChildGrid && this.row.grid.ParentCell != null) {\n        var height = layoutRectangle.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom - this.row.grid.style.cellPadding.bottom;\n\n        if (this.row.grid.splitChildRowIndex != -1) {\n          this.fontSpilt = true;\n          this.row.rowFontSplit = true;\n        }\n\n        if (height > 0 && height < font.height) layoutRectangle.height = height; // else if (height + this.row.grid.style.cellPadding.bottom > 0 && height + this.row.grid.style.cellPadding.bottom < font.height)\n        //     layoutRectangle.height = height + this.row.grid.style.cellPadding.bottom;\n        // else if (bounds.height < font.height)\n        //     layoutRectangle.height = bounds.height;\n        // else if (bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom < font.height)\n        //     layoutRectangle.height = bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;                        \n      }\n\n      if (this.gridRow.grid.style.cellSpacing != 0) {\n        layoutRectangle.width -= this.gridRow.grid.style.cellSpacing;\n        bounds.width -= this.gridRow.grid.style.cellSpacing;\n      }\n\n      if (this.isFinish) {\n        // if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined'){\n        //     this.remaining = '';\n        //     graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        // } else {\n        temp = this.remaining === '' ? this.remaining : this.objectValue;\n        graphics.drawString(temp, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n\n        if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined') {\n          this.remaining = ''; //graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        }\n      } else {\n        if (typeof this.remaining == 'undefined' || this.remaining === null) {\n          this.remaining = '';\n        }\n\n        if (this.row.repeatFlag) {\n          graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        } //  else {\n        //     if(this.row.grid.ParentCell.row.repeatFlag) {\n        //         graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);                    \n        //     } else {\n        //         layoutRectangle.height = this.row.height;\n        //         graphics.drawString((this.objectValue as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n        //         bounds.height = this.row.height;\n        //     }\n        //  }\n\n\n        this.isFinish = true; //graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n      }\n\n      result = graphics.stringLayoutResult; // if(this.row.grid.isChildGrid && this.row.rowBreakHeight > 0 && result !=null) {\n      //     bounds.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n      // }\n    } else if (this.objectValue instanceof PdfGrid) {\n      var childGrid = this.objectValue;\n      childGrid.isChildGrid = true;\n      childGrid.ParentCell = this;\n      var layoutRect = void 0;\n      layoutRect = innerLayoutArea;\n\n      if (this.gridRow.grid.style.cellSpacing != 0) {\n        bounds.width -= this.gridRow.grid.style.cellSpacing;\n      } // layoutRect = bounds;\n      // if (this.style.cellPadding != null){\n      //     layoutRect = bounds;            \n      // } else if((this.row.grid.style.cellPadding != null) && (childGrid.style.cellPadding.bottom === 0.5) && (childGrid.style.cellPadding.top === 0.5)\n      //                               && (childGrid.style.cellPadding.left === 5.76) && (childGrid.style.cellPadding.right === 5.76)\n      //                               && (this.gridRow.grid.style.cellSpacing === 0) && (childGrid.style.cellSpacing === 0)) {\n      //     layoutRect = innerLayoutArea;\n      // }\n      // if(this.objectValue.style.cellPadding != null && typeof this.objectValue.style.cellPadding !== 'undefined'){\n      //     layoutRect = bounds;\n      // }           \n\n\n      var layouter = new PdfGridLayouter(childGrid);\n      var format = new PdfGridLayoutFormat();\n      if (this.row.grid.LayoutFormat != null) format = this.row.grid.LayoutFormat;else format.layout = PdfLayoutType.Paginate;\n      var param = new PdfLayoutParams();\n\n      if (graphics.layer != null) {\n        // Define layout parameters.\n        param.page = graphics.page;\n        param.bounds = layoutRect;\n        param.format = format; //Set the span \n\n        childGrid.setSpan();\n        childGrid.checkSpan(); // Draw the child grid.\n\n        var childGridResult = layouter.Layouter(param); //let childGridResult : PdfLayoutResult = layouter.innerLayout(param);\n\n        this.value = childGrid;\n\n        if (this.row.grid.splitChildRowIndex !== -1) {\n          this.height = this.row.rowBreakHeightValue;\n        }\n\n        if (param.page != childGridResult.page) //&& (isWidthGreaterthanParent != true))\n          {\n            childGridResult.bounds.height = this.row.rowBreakHeightValue;\n            if (this.row.rowBreakHeight == 0) this.row.NestedGridLayoutResult = childGridResult;else this.row.rowBreakHeight = this.row.rowBreakHeightValue; //bounds.height = this.row.rowBreakHeight;\n            //After drawing paginated nested grid, the bounds of the parent grid in start page should be corrected for borders.\n            //bounds.height = graphics.clientSize.height - bounds.y;\n          }\n      }\n    } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n      var imageBounds = void 0;\n\n      if (this.objectValue.width <= innerLayoutArea.width) {\n        imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.objectValue.width, innerLayoutArea.height);\n      } else {\n        imageBounds = innerLayoutArea;\n      }\n\n      graphics.drawImage(this.objectValue, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height);\n    } else if (this.objectValue instanceof PdfTextWebLink) {\n      this.objectValue.draw(graphics.currentPage, innerLayoutArea);\n    } else if (typeof this.objectValue === 'undefined') {\n      this.objectValue = \"\";\n      graphics.drawString(this.objectValue, font, textPen, textBrush, innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height, strFormat);\n\n      if (this.style.cellPadding != null && this.style.cellPadding.bottom == 0 && this.style.cellPadding.left == 0 && this.style.cellPadding.right == 0 && this.style.cellPadding.top == 0) {\n        bounds.width -= this.style.borders.left.width + this.style.borders.right.width;\n      }\n\n      if (this.gridRow.grid.style.cellSpacing != 0) {\n        bounds.width -= this.gridRow.grid.style.cellSpacing;\n      }\n    }\n\n    if (this.style.borders != null) {\n      if (!this.fontSpilt) this.drawCellBorders(graphics, bounds);else {\n        if (this.row.grid.ParentCell.row.grid.splitChildRowIndex != -1) {\n          this.row.rowFontSplit = false;\n          this.drawCellBorders(graphics, bounds);\n        }\n      }\n    }\n\n    return result;\n  };\n  /* tslint:enable */\n\n  /**\n   * Draws the `cell border` constructed by drawing lines.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.drawCellBorders = function (graphics, bounds) {\n    if (this.row.grid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside) {\n      bounds.x += this.style.borders.left.width;\n      bounds.y += this.style.borders.top.width;\n      bounds.width -= this.style.borders.right.width;\n      bounds.height -= this.style.borders.bottom.width;\n    }\n\n    var p1 = new PointF(bounds.x, bounds.y + bounds.height);\n    var p2 = new PointF(bounds.x, bounds.y);\n    var pen = this.cellStyle.borders.left;\n\n    if (this.cellStyle.borders.left.dashStyle === PdfDashStyle.Solid) {\n      pen.lineCap = PdfLineCap.Square;\n    } // SetTransparency(ref graphics, pen);\n\n\n    if (pen.width !== 0) {\n      graphics.drawLine(pen, p1, p2);\n    }\n\n    p1 = new PointF(bounds.x + bounds.width, bounds.y);\n    p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n    pen = this.cellStyle.borders.right;\n\n    if (bounds.x + bounds.width > graphics.clientSize.width - pen.width / 2) {\n      p1 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y);\n      p2 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y + bounds.height);\n    }\n\n    if (this.cellStyle.borders.right.dashStyle === PdfDashStyle.Solid) {\n      pen.lineCap = PdfLineCap.Square;\n    }\n\n    if (pen.width !== 0) {\n      graphics.drawLine(pen, p1, p2);\n    }\n\n    p1 = new PointF(bounds.x, bounds.y);\n    p2 = new PointF(bounds.x + bounds.width, bounds.y);\n    pen = this.cellStyle.borders.top;\n\n    if (this.cellStyle.borders.top.dashStyle === PdfDashStyle.Solid) {\n      pen.lineCap = PdfLineCap.Square;\n    }\n\n    if (pen.width !== 0) {\n      graphics.drawLine(pen, p1, p2);\n    }\n\n    p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n    p2 = new PointF(bounds.x, bounds.y + bounds.height);\n    pen = this.cellStyle.borders.bottom;\n\n    if (bounds.y + bounds.height > graphics.clientSize.height - pen.width / 2) {\n      p1 = new PointF(bounds.x + bounds.width, graphics.clientSize.height - pen.width / 2);\n      p2 = new PointF(bounds.x, graphics.clientSize.height - pen.width / 2);\n    }\n\n    if (this.cellStyle.borders.bottom.dashStyle === PdfDashStyle.Solid) {\n      pen.lineCap = PdfLineCap.Square;\n    }\n\n    if (pen.width !== 0) {\n      graphics.drawLine(pen, p1, p2);\n    }\n  }; // private setTransparency(graphics : PdfGraphics, pen : PdfPen) : void {\n  //     let alpha : number = (pen.color.a / 255)as number;\n  //     graphics.save();\n  //     graphics.setTransparency(alpha);\n  // }\n\n  /**\n   * `Adjusts the outer layout area`.\n   * @private\n   */\n\n  /* tslint:disable */\n\n\n  PdfGridCell.prototype.adjustOuterLayoutArea = function (bounds, g) {\n    var isHeader = false;\n    var cellSpacing = this.row.grid.style.cellSpacing;\n\n    if (cellSpacing > 0) {\n      bounds = new RectangleF(bounds.x + cellSpacing, bounds.y + cellSpacing, bounds.width - cellSpacing, bounds.height - cellSpacing);\n    }\n\n    var currentColIndex = this.row.cells.indexOf(this);\n\n    if (this.columnSpan > 1 || this.row.rowOverflowIndex > 0 && currentColIndex == this.row.rowOverflowIndex + 1 && this.isCellMergeContinue) {\n      var span = this.columnSpan;\n\n      if (span == 1 && this.isCellMergeContinue) {\n        for (var j = currentColIndex + 1; j < this.row.grid.columns.count; j++) {\n          if (this.row.cells.getCell(j).isCellMergeContinue) span++;else break;\n        }\n      }\n\n      var totalWidth = 0;\n\n      for (var i = currentColIndex; i < currentColIndex + span; i++) {\n        if (this.row.grid.style.allowHorizontalOverflow) {\n          var width = void 0;\n          var compWidth = this.row.grid.size.width < g.clientSize.width ? this.row.grid.size.width : g.clientSize.width;\n\n          if (this.row.grid.size.width > g.clientSize.width) {\n            width = bounds.x + totalWidth + this.row.grid.columns.getColumn(i).width;\n          } else {\n            width = totalWidth + this.row.grid.columns.getColumn(i).width;\n          }\n\n          if (width > compWidth) {\n            break;\n          }\n        }\n\n        totalWidth += this.row.grid.columns.getColumn(i).width;\n      }\n\n      totalWidth -= this.row.grid.style.cellSpacing;\n      bounds.width = totalWidth;\n    }\n\n    if (this.rowSpan > 1 || this.row.rowSpanExists) {\n      var span = this.rowSpan;\n      var currentRowIndex = this.row.grid.rows.rowCollection.indexOf(this.row);\n\n      if (currentRowIndex == -1) {\n        currentRowIndex = this.row.grid.headers.indexOf(this.row);\n\n        if (currentRowIndex != -1) {\n          isHeader = true;\n        }\n      } // if (span == 1 && this.isCellMergeContinue) {\n      //         for (let j : number = currentRowIndex + 1; j < this.row.grid.rows.count; j++)\n      //         {\n      //             let flag : boolean = (isHeader ? this.row.grid.headers.getHeader(j).cells.getCell(currentColIndex).isCellMergeContinue : this.row.grid.rows.getRow(j).cells.getCell(currentColIndex).isCellMergeContinue);\n      //             if (flag)\n      //                 span++;\n      //             else\n      //                 break;\n      //         }\n      // }\n\n\n      var totalHeight = 0;\n      var max = 0;\n\n      for (var i = currentRowIndex; i < currentRowIndex + span; i++) {\n        totalHeight += isHeader ? this.row.grid.headers.getHeader(i).height : this.row.grid.rows.getRow(i).height;\n        var row = this.row.grid.rows.getRow(i);\n        var rowIndex = this.row.grid.rows.rowCollection.indexOf(row);\n        /*if (this.rowSpan > 1)\n            {\n                for (let k : number = 0; k < this.row.cells.count; k++) {\n                    let cell : PdfGridCell = this.row.cells.getCell(k);\n                    if(cell.rowSpan>1)\n                    {\n                        let tempHeight : number =0;\n                        \n                        for (let j :number = i; j < i +cell.rowSpan; j++)\n                        {\n                            if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                this.row.grid.rows.getRow(j).isRowHeightSet = false;\n                            tempHeight += this.row.grid.rows.getRow(j).height;\n                            if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                this.row.grid.rows.getRow(j).isRowHeightSet = true;\n                        }\n                        //To check the Row spanned cell height is greater than the total spanned row height.\n                        if(cell.height>tempHeight)\n                        {\n                            if (max < (cell.height - tempHeight))\n                            {\n                                max = cell.height - tempHeight;\n                                if (this.rowSpanRemainingHeight != 0 && max > this.rowSpanRemainingHeight)\n                                {\n                                    max += this.rowSpanRemainingHeight;\n                                }\n                                let index :number = row.cells.indexOf(cell);\n                                //set the m_rowspanRemainingHeight to last rowspanned row.\n                                this.row.grid.rows.getRow((rowIndex +cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight = max;\n                                this.rowSpanRemainingHeight = this.row.grid.rows.getRow((rowIndex + cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight;\n                            }\n                        }\n                    }\n                }\n            }\n            if (!this.row.grid.rows.getRow(i).isRowSpanRowHeightSet)\n            this.row.grid.rows.getRow(i).isRowHeightSet = true;*/\n      }\n\n      var cellIndex = this.row.cells.indexOf(this);\n      totalHeight -= this.row.grid.style.cellSpacing; // if (this.row.cells.getCell(cellIndex).height > totalHeight && (!this.row.grid.rows.getRow((currentRowIndex + span) - 1).isRowHeightSet)) {\n      //      this.row.grid.rows.getRow((currentRowIndex + span) - 1).cells.getCell(cellIndex).rowSpanRemainingHeight = this.row.cells.getCell(cellIndex).height - totalHeight;\n      //      totalHeight = this.row.cells.getCell(cellIndex).height;\n      //      bounds.height = totalHeight;\n      // } else {\n\n      bounds.height = totalHeight; //  }\n\n      if (!this.row.rowMergeComplete) {\n        bounds.height = totalHeight;\n      }\n    }\n\n    return bounds;\n  };\n  /* tslint:enable */\n\n  /**\n   * Gets the `text font`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.getTextFont = function () {\n    if (typeof this.style.font !== 'undefined' && this.style.font != null) {\n      return this.style.font;\n    } else if (typeof this.row.style.font !== 'undefined' && this.row.style.font != null) {\n      return this.row.style.font;\n    } else if (typeof this.row.grid.style.font !== 'undefined' && this.row.grid.style.font != null) {\n      return this.row.grid.style.font;\n    } else {\n      return PdfDocument.defaultFont;\n    }\n  };\n  /**\n   * Gets the `text brush`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.getTextBrush = function () {\n    if (typeof this.style.textBrush !== 'undefined' && this.style.textBrush != null) {\n      return this.style.textBrush;\n    } else if (typeof this.row.style.textBrush !== 'undefined' && this.row.style.textBrush != null) {\n      return this.row.style.textBrush;\n    } else {\n      return this.row.grid.style.textBrush;\n    }\n  };\n  /**\n   * Gets the `text pen`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.getTextPen = function () {\n    if (typeof this.style.textPen !== 'undefined' && this.style.textPen != null) {\n      return this.style.textPen;\n    } else if (typeof this.row.style.textPen !== 'undefined' && this.row.style.textPen != null) {\n      return this.row.style.textPen;\n    } else {\n      return this.row.grid.style.textPen;\n    }\n  };\n  /**\n   * Gets the `background brush`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.getBackgroundBrush = function () {\n    if (typeof this.style.backgroundBrush !== 'undefined' && this.style.backgroundBrush != null) {\n      return this.style.backgroundBrush;\n    } else if (typeof this.row.style.backgroundBrush !== 'undefined' && this.row.style.backgroundBrush != null) {\n      return this.row.style.backgroundBrush;\n    } else {\n      return this.row.grid.style.backgroundBrush;\n    }\n  };\n  /**\n   * Gets the `background image`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.getBackgroundImage = function () {\n    if (typeof this.style.backgroundImage !== 'undefined' && this.style.backgroundImage != null) {\n      return this.style.backgroundImage;\n    } else if (typeof this.row.style.backgroundImage !== 'undefined' && this.row.style.backgroundImage != null) {\n      return this.row.style.backgroundImage;\n    } else {\n      return this.row.grid.style.backgroundImage;\n    }\n  };\n  /**\n   * Gets the current `StringFormat`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.getStringFormat = function () {\n    if (typeof this.style.stringFormat !== 'undefined' && this.style.stringFormat != null) {\n      return this.style.stringFormat;\n    } else {\n      return this.stringFormat;\n    }\n  };\n  /**\n   * Calculates the `height`.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.measureHeight = function () {\n    // .. Calculate the cell text height.\n    // .....Add border widths, cell spacings and paddings to the height.\n    var width = this.calculateWidth(); // //check whether the Current PdfGridCell has padding\n\n    if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n      width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left; //width -= (this.style.borders.left.width + this.style.borders.right.width);\n    } else {\n      width -= this.style.cellPadding.right + this.style.cellPadding.left;\n      width -= this.style.borders.left.width + this.style.borders.right.width;\n    }\n\n    var height = 0;\n    var layouter = new PdfStringLayouter();\n\n    if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n      var currentValue = this.objectValue;\n      /* tslint:disable */\n\n      if (!this.isFinish) currentValue = !(this.remaining === null || this.remaining === '' || typeof this.remaining === 'undefined') ? this.remaining : this.objectValue;\n      var slr = null;\n      var cellIndex = this.row.cells.indexOf(this);\n\n      if (this.gridRow.grid.style.cellSpacing != 0) {\n        width -= this.gridRow.grid.style.cellSpacing * 2;\n      }\n\n      if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n        if (this.gridRow.grid.isChildGrid) {\n          if (width < 0) {\n            this.tempval = width;\n\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n              this.tempval += this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;\n            } else {\n              this.tempval += this.style.cellPadding.right + this.style.cellPadding.left;\n              this.tempval += this.style.borders.left.width + this.style.borders.right.width;\n            }\n          } else {\n            this.tempval = width;\n          }\n\n          slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(this.tempval, 0), false, new SizeF(0, 0));\n          height += slr.actualSize.height;\n        } else {\n          slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n          height += slr.actualSize.height;\n        }\n      }\n      /* tslint:enable */\n\n\n      height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n    } else if (this.objectValue instanceof PdfGrid) {\n      var cellIndex = this.row.cells.indexOf(this);\n      var internalWidth = 0;\n\n      if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n        internalWidth = this.calculateWidth();\n\n        if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n          internalWidth -= this.style.cellPadding.left;\n        }\n\n        if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n          internalWidth -= this.style.cellPadding.right;\n        }\n      } else if (this.row.grid.style.cellPadding != null || typeof this.row.grid.style.cellPadding !== 'undefined') {\n        internalWidth = this.calculateWidth();\n\n        if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n          internalWidth -= this.row.grid.style.cellPadding.left;\n        }\n\n        if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n          internalWidth -= this.row.grid.style.cellPadding.right;\n        }\n      } else {\n        internalWidth = this.calculateWidth();\n      }\n\n      this.objectValue.tempWidth = internalWidth;\n\n      if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n        height = this.objectValue.size.height;\n      } else {\n        height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n      }\n\n      if (this.gridRow.grid.style.cellSpacing !== 0) {\n        width -= this.gridRow.grid.style.cellSpacing * 2; //height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);\n      }\n\n      if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n        if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n          height += this.row.grid.style.cellPadding.top;\n        }\n\n        if (this.row.grid.style.cellPadding.hasBottomPad && typeof this.row.grid.style.cellPadding.bottom !== 'undefined') {\n          height += this.row.grid.style.cellPadding.bottom;\n        }\n      }\n\n      height += this.objectValue.style.cellSpacing;\n    } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n      height += this.objectValue.height;\n    } else if (this.objectValue instanceof PdfTextWebLink) {\n      var webLink = this.objectValue;\n      /* tslint:disable */\n\n      var slr = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n      /* tslint:enable */\n\n      height += slr.actualSize.height;\n      height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n    } else if (typeof this.objectValue === 'undefined') {\n      if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n        width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left;\n      } else {\n        width -= this.style.cellPadding.right + this.style.cellPadding.left;\n        width -= this.style.borders.left.width + this.style.borders.right.width;\n      }\n\n      height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n    } //Add padding top and bottom value to height\n\n\n    if (!(this.objectValue instanceof PdfGrid)) {\n      if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n        height += this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom;\n      } else {\n        height += this.style.cellPadding.top + this.style.cellPadding.bottom;\n      }\n    } else {\n      if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n        if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n          height += this.row.grid.style.cellPadding.top;\n        }\n\n        if (typeof this.row.grid.style.cellPadding.bottom !== 'undefined' && this.row.grid.style.cellPadding.hasBottomPad) {\n          height += this.row.grid.style.cellPadding.bottom;\n        }\n      } else {\n        if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n          height += this.style.cellPadding.top;\n        }\n\n        if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n          height += this.style.cellPadding.bottom;\n        }\n      }\n    }\n\n    height += this.row.grid.style.cellSpacing;\n    return height;\n  };\n  /**\n   * return the calculated `width` of the cell.\n   * @private\n   */\n\n\n  PdfGridCell.prototype.calculateWidth = function () {\n    var cellIndex = this.row.cells.indexOf(this);\n    var rowindex = this.row.grid.rows.rowCollection.indexOf(this.row);\n    var columnSpan = this.columnSpan;\n    var width = 0;\n\n    if (columnSpan === 1) {\n      for (var i = 0; i < columnSpan; i++) {\n        width += this.row.grid.columns.getColumn(cellIndex + i).width;\n      }\n    } else if (columnSpan > 1) {\n      for (var i = 0; i < columnSpan; i++) {\n        width += this.row.grid.columns.getColumn(cellIndex + i).width;\n\n        if (i + 1 < columnSpan) {\n          this.row.cells.getCell(cellIndex + i + 1).hasColSpan = true;\n        }\n      }\n    }\n\n    if (this.parent != null && this.parent.row.width > 0) {\n      if (this.row.grid.isChildGrid && this.parent != null && this.row.width > this.parent.row.width) {\n        width = 0;\n\n        for (var j = 0; j < this.parent.columnSpan; j++) {\n          width += this.parent.row.grid.columns.getColumn(j).width;\n        }\n\n        width = width / this.row.cells.count;\n      }\n    }\n\n    return width;\n  };\n\n  return PdfGridCell;\n}();\n\nexport { PdfGridCell };\n/**\n * `PdfGridCellCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridCell' objects.\n * @private\n */\n\nvar PdfGridCellCollection =\n/** @class */\nfunction () {\n  //Constructor\n\n  /**\n   * Initializes a new instance of the `PdfGridCellCollection` class with the row.\n   * @private\n   */\n  function PdfGridCellCollection(row) {\n    /**\n     * @hidden\n     * @private\n     */\n    this.cells = [];\n    this.gridRow = row;\n  } //Properties\n\n  /**\n   * Gets the current `cell`.\n   * @private\n   */\n\n\n  PdfGridCellCollection.prototype.getCell = function (index) {\n    if (index < 0 || index >= this.count) {\n      throw new Error('IndexOutOfRangeException');\n    }\n\n    return this.cells[index];\n  };\n\n  Object.defineProperty(PdfGridCellCollection.prototype, \"count\", {\n    /**\n     * Gets the cells `count`.[Read-Only].\n     * @private\n     */\n    get: function () {\n      return this.cells.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridCellCollection.prototype.add = function (cell) {\n    if (typeof cell === 'undefined') {\n      var tempcell = new PdfGridCell();\n      this.add(tempcell);\n      return cell;\n    } else {\n      cell.row = this.gridRow;\n      this.cells.push(cell);\n    }\n  };\n  /**\n   * Returns the `index of` a particular cell in the collection.\n   * @private\n   */\n\n\n  PdfGridCellCollection.prototype.indexOf = function (cell) {\n    return this.cells.indexOf(cell);\n  };\n\n  return PdfGridCellCollection;\n}();\n\nexport { PdfGridCellCollection };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-cell.js"],"names":["PdfGrid","PdfGridCellStyle","PdfStringLayouter","PdfDocument","PdfStringFormat","RectangleF","PointF","SizeF","PdfDashStyle","PdfLineCap","PdfBorderOverlapStyle","PdfSolidBrush","PdfColor","PdfImage","PdfBitmap","PdfTextWebLink","PdfLayoutType","PdfGridLayouter","PdfGridLayoutFormat","PdfLayoutParams","PdfGridCell","row","cellWidth","cellHeight","tempval","fontSpilt","finsh","rowSpanRemainingHeight","hasRowSpan","hasColSpan","isFinish","present","gridRowSpan","colSpan","gridRow","Object","defineProperty","prototype","get","internalIsCellMergeContinue","set","value","enumerable","configurable","internalIsRowMergeContinue","internalIsCellMergeStart","internalIsRowMergeStart","remaining","format","objectValue","grid","isSingleGrid","ParentCell","isChildGrid","rowCount","rows","count","i","getRow","colCount","cells","j","cell","getCell","parent","Error","rowSpanExists","hasRowSpanSpan","cellStyle","measureHeight","columnSpanExists","isComplete","measureWidth","Math","round","width","layouter","slr","layout","getTextFont","stringFormat","Number","MAX_VALUE","actualSize","style","borders","left","right","size","webLink","result","text","font","cellPadding","hasLeftPad","hasRightPad","cellSpacing","drawCellBackground","graphics","bounds","backgroundBrush","getBackgroundBrush","save","drawRectangle","x","y","height","restore","backgroundImage","image","getBackgroundImage","drawImage","adjustContentLayoutArea","returnBounds","top","bottom","rowSpan","hasTopPad","hasBottomPad","draw","cancelSubsequentSpans","isrowbreak","allowHorizontalOverflow","rowOverflowIndex","indexOf","adjustOuterLayoutArea","textPen","getTextPen","textBrush","getTextBrush","strFormat","getStringFormat","innerLayoutArea","clientSize","allowRowBreakAcrossPages","temp","layoutRectangle","splitChildRowIndex","rowFontSplit","drawString","repeatFlag","stringLayoutResult","childGrid","layoutRect","LayoutFormat","Paginate","param","layer","page","setSpan","checkSpan","childGridResult","Layouter","rowBreakHeightValue","rowBreakHeight","NestedGridLayoutResult","imageBounds","currentPage","drawCellBorders","borderOverlapStyle","Inside","p1","p2","pen","dashStyle","Solid","lineCap","Square","drawLine","g","isHeader","currentColIndex","columnSpan","isCellMergeContinue","span","columns","totalWidth","compWidth","getColumn","currentRowIndex","rowCollection","headers","totalHeight","max","getHeader","rowIndex","cellIndex","rowMergeComplete","defaultFont","calculateWidth","currentValue","internalWidth","tempWidth","rowindex","PdfGridCellCollection","index","length","add","tempcell","push"],"mappings":"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","sourcesContent":["import { PdfGrid } from './pdf-grid';\nimport { PdfGridCellStyle } from './styles/style';\nimport { PdfStringLayouter } from './../../graphics/fonts/string-layouter';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\nimport { RectangleF, PointF, SizeF } from './../../drawing/pdf-drawing';\nimport { PdfDashStyle, PdfLineCap } from './../../graphics/enum';\nimport { PdfBorderOverlapStyle } from './../tables/light-tables/enum';\nimport { PdfSolidBrush } from './../../graphics/brushes/pdf-solid-brush';\nimport { PdfColor } from './../../graphics/pdf-color';\nimport { PdfImage } from './../../graphics/images/pdf-image';\nimport { PdfBitmap } from './../../graphics/images/pdf-bitmap';\nimport { PdfTextWebLink } from './../../annotations/pdf-text-web-link';\nimport { PdfLayoutType } from './../../graphics/figures/enum';\nimport { PdfGridLayouter, PdfGridLayoutFormat } from './../../structured-elements/grid/layout/grid-layouter';\nimport { PdfLayoutParams } from '../../../implementation/graphics/figures/base/element-layouter';\n/**\n * `PdfGridCell` class represents the schema of a cell in a 'PdfGrid'.\n */\nvar PdfGridCell = /** @class */ (function () {\n    function PdfGridCell(row) {\n        /**\n         * `Width` of the cell.\n         * @default 0\n         * @private\n         */\n        this.cellWidth = 0;\n        /**\n         * `Height` of the cell.\n         * @default 0\n         * @private\n         */\n        this.cellHeight = 0;\n        /**\n         * `tempval`to stores current width .\n         * @default 0\n         * @private\n         */\n        this.tempval = 0;\n        this.fontSpilt = false;\n        /**\n         * Specifies weather the `cell is drawn`.\n         * @default true\n         * @private\n         */\n        this.finsh = true;\n        /**\n         * The `remaining height` of row span.\n         * @default 0\n         * @private\n         */\n        this.rowSpanRemainingHeight = 0;\n        this.hasRowSpan = false;\n        this.hasColSpan = false;\n        /**\n         * the 'isFinish' is set to page finish\n         */\n        this.isFinish = true;\n        /**\n         * The `present' to store the current cell.\n         * @default false\n         * @private\n         */\n        this.present = false;\n        this.gridRowSpan = 1;\n        this.colSpan = 1;\n        if (typeof row !== 'undefined') {\n            this.gridRow = row;\n        }\n    }\n    Object.defineProperty(PdfGridCell.prototype, \"isCellMergeContinue\", {\n        //Properties\n        get: function () {\n            return this.internalIsCellMergeContinue;\n        },\n        set: function (value) {\n            this.internalIsCellMergeContinue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"isRowMergeContinue\", {\n        get: function () {\n            return this.internalIsRowMergeContinue;\n        },\n        set: function (value) {\n            this.internalIsRowMergeContinue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"isCellMergeStart\", {\n        get: function () {\n            return this.internalIsCellMergeStart;\n        },\n        set: function (value) {\n            this.internalIsCellMergeStart = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"isRowMergeStart\", {\n        get: function () {\n            return this.internalIsRowMergeStart;\n        },\n        set: function (value) {\n            this.internalIsRowMergeStart = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"remainingString\", {\n        /**\n         * Gets or sets the `remaining string` after the row split between pages.\n         * @private\n         */\n        get: function () {\n            return this.remaining;\n        },\n        set: function (value) {\n            this.remaining = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"FinishedDrawingCell\", {\n        /**\n         * Gets or sets the `FinishedDrawingCell` .\n         * @private\n         */\n        get: function () {\n            return this.isFinish;\n        },\n        set: function (value) {\n            this.isFinish = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"stringFormat\", {\n        /**\n         * Gets or sets the `string format`.\n         * @private\n         */\n        get: function () {\n            if (this.format == null) {\n                this.format = new PdfStringFormat();\n            }\n            return this.format;\n        },\n        set: function (value) {\n            this.format = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"row\", {\n        /**\n         * Gets or sets the parent `row`.\n         * @private\n         */\n        get: function () {\n            return this.gridRow;\n        },\n        set: function (value) {\n            this.gridRow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"value\", {\n        /**\n         * Gets or sets the `value` of the cell.\n         * @private\n         */\n        get: function () {\n            return this.objectValue;\n        },\n        set: function (value) {\n            this.objectValue = value;\n            if (this.objectValue instanceof PdfGrid) {\n                this.row.grid.isSingleGrid = false;\n                var grid = this.objectValue;\n                grid.ParentCell = this;\n                this.objectValue.isChildGrid = true;\n                var rowCount = this.row.grid.rows.count;\n                for (var i = 0; i < rowCount; i++) {\n                    var row = this.row.grid.rows.getRow(i);\n                    var colCount = row.cells.count;\n                    for (var j = 0; j < colCount; j++) {\n                        var cell = row.cells.getCell(j);\n                        cell.parent = this;\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"rowSpan\", {\n        /**\n         * Gets or sets a value that indicates the total number of rows that cell `spans` within a PdfGrid.\n         * @private\n         */\n        get: function () {\n            return this.gridRowSpan;\n        },\n        set: function (value) {\n            if (value < 1) {\n                throw new Error('ArgumentException : Invalid span specified, must be greater than or equal to 1');\n            }\n            else {\n                this.gridRowSpan = value;\n                this.row.rowSpanExists = true;\n                this.row.grid.hasRowSpanSpan = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"style\", {\n        /**\n         * Gets or sets the cell `style`.\n         * @private\n         */\n        get: function () {\n            if (this.cellStyle == null) {\n                this.cellStyle = new PdfGridCellStyle();\n            }\n            return this.cellStyle;\n        },\n        set: function (value) {\n            this.cellStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"height\", {\n        /**\n         * Gets the `height` of the PdfGrid cell.[Read-Only].\n         * @private\n         */\n        get: function () {\n            if (this.cellHeight === 0) {\n                this.cellHeight = this.measureHeight();\n            }\n            return this.cellHeight;\n        },\n        set: function (value) {\n            this.cellHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"columnSpan\", {\n        /**\n         * Gets or sets a value that indicates the total number of columns that cell `spans` within a PdfGrid.\n         * @private\n         */\n        get: function () {\n            return this.colSpan;\n        },\n        set: function (value) {\n            if (value < 1) {\n                throw Error('Invalid span specified, must be greater than or equal to 1');\n            }\n            else {\n                this.colSpan = value;\n                this.row.columnSpanExists = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"width\", {\n        /**\n         * Gets the `width` of the PdfGrid cell.[Read-Only].\n         * @private\n         */\n        get: function () {\n            if (this.cellWidth === 0 || this.row.grid.isComplete) {\n                this.cellWidth = this.measureWidth();\n            }\n            return Math.round(this.cellWidth);\n        },\n        set: function (value) {\n            this.cellWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Calculates the width`.\n     * @private\n     */\n    PdfGridCell.prototype.measureWidth = function () {\n        // .. Calculate the cell text width.\n        // .....Add border widths, cell spacings and paddings to the width.\n        var width = 0;\n        var layouter = new PdfStringLayouter();\n        if (typeof this.objectValue === 'string') {\n            /* tslint:disable */\n            var slr = layouter.layout(this.objectValue, this.getTextFont(), this.stringFormat, new SizeF(Number.MAX_VALUE, Number.MAX_VALUE), false, new SizeF(0, 0));\n            width += slr.actualSize.width;\n            width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n        }\n        else if (this.objectValue instanceof PdfGrid) {\n            width = this.objectValue.size.width;\n            //width += this.objectValue.style.cellSpacing;\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            width += this.objectValue.width;\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            var webLink = this.objectValue;\n            var result = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(0, 0), false, new SizeF(0, 0));\n            /* tslint:enable */\n            width += result.actualSize.width;\n            width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n        }\n        if (!(this.objectValue instanceof PdfGrid)) {\n            if (this.style.cellPadding != null) {\n                width += (this.style.cellPadding.left + this.style.cellPadding.right);\n            }\n            else {\n                width += (this.row.grid.style.cellPadding.left + this.row.grid.style.cellPadding.right);\n            }\n        }\n        else {\n            if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n                if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n                    width += this.style.cellPadding.left;\n                }\n                if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n                    width += this.style.cellPadding.right;\n                }\n            }\n            else {\n                if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n                    width += this.row.grid.style.cellPadding.left;\n                }\n                if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n                    width += this.row.grid.style.cellPadding.right;\n                }\n            }\n        }\n        width += this.row.grid.style.cellSpacing;\n        return width;\n    };\n    /**\n     * Draw the `cell background`.\n     * @private\n     */\n    PdfGridCell.prototype.drawCellBackground = function (graphics, bounds) {\n        var backgroundBrush = this.getBackgroundBrush();\n        //graphics.isTemplateGraphics = true;\n        if (backgroundBrush != null) {\n            graphics.save();\n            graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);\n            graphics.restore();\n        }\n        if (this.style.backgroundImage != null) {\n            var image = this.getBackgroundImage();\n            graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);\n        }\n    };\n    /**\n     * `Adjusts the text layout area`.\n     * @private\n     */\n    /* tslint:disable */\n    PdfGridCell.prototype.adjustContentLayoutArea = function (bounds) {\n        //Add Padding value to its Cell Bounds\n        var returnBounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);\n        if (!(this.objectValue instanceof PdfGrid)) {\n            if (typeof this.style.cellPadding === 'undefined' || this.style.cellPadding == null) {\n                returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n                returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n                returnBounds.width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n                returnBounds.height -= (this.gridRow.grid.style.cellPadding.bottom + this.gridRow.grid.style.cellPadding.top);\n                returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n            }\n            else {\n                returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n                returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n                returnBounds.width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n                returnBounds.width -= (this.cellStyle.borders.left.width + this.cellStyle.borders.right.width);\n                returnBounds.height -= (this.style.cellPadding.bottom + this.style.cellPadding.top);\n                returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n                if (this.rowSpan === 1) {\n                    returnBounds.width -= (this.style.borders.left.width);\n                }\n            }\n        }\n        else {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                if (typeof this.gridRow.grid.style.cellPadding.left !== 'undefined' && this.gridRow.grid.style.cellPadding.hasLeftPad) {\n                    returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n                    returnBounds.width -= this.gridRow.grid.style.cellPadding.left;\n                }\n                if (typeof this.gridRow.grid.style.cellPadding.top !== 'undefined' && this.gridRow.grid.style.cellPadding.hasTopPad) {\n                    returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n                    returnBounds.height -= this.gridRow.grid.style.cellPadding.top;\n                }\n                if (typeof this.gridRow.grid.style.cellPadding.right !== 'undefined' && this.gridRow.grid.style.cellPadding.hasRightPad) {\n                    returnBounds.width -= this.gridRow.grid.style.cellPadding.right;\n                }\n                if (typeof this.gridRow.grid.style.cellPadding.bottom !== 'undefined' && this.gridRow.grid.style.cellPadding.hasBottomPad) {\n                    returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom;\n                }\n            }\n            else {\n                if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n                    returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n                    returnBounds.width -= this.style.cellPadding.left;\n                }\n                if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n                    returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n                    returnBounds.height -= this.style.cellPadding.top;\n                }\n                if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n                    returnBounds.width -= this.style.cellPadding.right;\n                }\n                if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n                    returnBounds.height -= this.style.cellPadding.bottom;\n                }\n            }\n            returnBounds.width -= (this.cellStyle.borders.left.width + this.cellStyle.borders.right.width);\n            returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n        }\n        return returnBounds;\n    };\n    /**\n     * `Draws` the specified graphics.\n     * @private\n     */\n    PdfGridCell.prototype.draw = function (graphics, bounds, cancelSubsequentSpans) {\n        var isrowbreak = false;\n        /*if (!this.row.grid.isSingleGrid)\n        {\n            //Check whether the Grid Span to Nextpage\n            if ((this.remainingString != null) || (PdfGridLayouter.repeatRowIndex != -1))\n            {\n                this.DrawParentCells(graphics, bounds, true);\n            }\n            else if (this.row.grid.rows.count > 1)\n            {\n                for (let i : number  = 0; i < this.row.grid.rows.count; i++)\n                {\n                    if (this.row == this.row.grid.rows.getRow(i))\n                    {\n                        if (this.row.grid.rows.getRow(i).rowBreakHeight > 0)\n                            isrowbreak = true;\n                        if ((i > 0) && (isrowbreak))\n                            this.DrawParentCells(graphics, bounds, false);\n                    }\n                }\n            }\n        } */\n        var result = null;\n        /*if (cancelSubsequentSpans)\n        {\n            //..Cancel all subsequent cell spans, if no space exists.\n            let currentCellIndex : number = this.row.cells.indexOf(this);\n            for (let i : number = currentCellIndex + 1; i <= currentCellIndex + this.colSpan; i++)\n            {\n                this.row.cells.getCell(i).isCellMergeContinue = false;\n                this.row.cells.getCell(i).isRowMergeContinue = false;\n            }\n            this.colSpan = 1;\n        }*/\n        //..Skip cells which were already covered by spanmap.\n        if (this.internalIsCellMergeContinue || this.internalIsRowMergeContinue) {\n            if (this.internalIsCellMergeContinue && this.row.grid.style.allowHorizontalOverflow) {\n                if ((this.row.rowOverflowIndex > 0 && (this.row.cells.indexOf(this) != this.row.rowOverflowIndex + 1)) || (this.row.rowOverflowIndex == 0 && this.internalIsCellMergeContinue)) {\n                    return result;\n                }\n            }\n            else {\n                return result;\n            }\n        }\n        //Adjust bounds with Row and Column Spacing\n        bounds = this.adjustOuterLayoutArea(bounds, graphics);\n        this.drawCellBackground(graphics, bounds);\n        var textPen = this.getTextPen();\n        var textBrush = this.getTextBrush();\n        if (typeof textPen === 'undefined' && typeof textBrush === 'undefined') {\n            textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n        }\n        var font = this.getTextFont();\n        var strFormat = this.getStringFormat();\n        var innerLayoutArea = bounds;\n        if (innerLayoutArea.height >= graphics.clientSize.height) {\n            // If to break row to next page.\n            if (this.row.grid.allowRowBreakAcrossPages) {\n                innerLayoutArea.height -= innerLayoutArea.y;\n                //bounds.height -= bounds.y;\n                // if(this.row.grid.isChildGrid)\n                // {\n                //     innerLayoutArea.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n                // }\n            }\n            // if user choose to cut the row whose height is more than page height.\n            // else\n            // {\n            //     innerLayoutArea.height = graphics.clientSize.height;\n            //     bounds.height = graphics.clientSize.height;\n            // }\n        }\n        innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea);\n        if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n            var temp = void 0;\n            var layoutRectangle = void 0;\n            if (innerLayoutArea.height < font.height)\n                layoutRectangle = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, font.height);\n            else\n                layoutRectangle = innerLayoutArea;\n            if (innerLayoutArea.height < font.height && this.row.grid.isChildGrid && this.row.grid.ParentCell != null) {\n                var height = layoutRectangle.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom - this.row.grid.style.cellPadding.bottom;\n                if (this.row.grid.splitChildRowIndex != -1) {\n                    this.fontSpilt = true;\n                    this.row.rowFontSplit = true;\n                }\n                if (height > 0 && height < font.height)\n                    layoutRectangle.height = height;\n                // else if (height + this.row.grid.style.cellPadding.bottom > 0 && height + this.row.grid.style.cellPadding.bottom < font.height)\n                //     layoutRectangle.height = height + this.row.grid.style.cellPadding.bottom;\n                // else if (bounds.height < font.height)\n                //     layoutRectangle.height = bounds.height;\n                // else if (bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom < font.height)\n                //     layoutRectangle.height = bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;                        \n            }\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                layoutRectangle.width -= this.gridRow.grid.style.cellSpacing;\n                bounds.width -= this.gridRow.grid.style.cellSpacing;\n            }\n            if (this.isFinish) {\n                // if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined'){\n                //     this.remaining = '';\n                //     graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                // } else {\n                temp = this.remaining === '' ? this.remaining : this.objectValue;\n                graphics.drawString(temp, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined') {\n                    this.remaining = '';\n                    //graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                }\n            }\n            else {\n                if (typeof this.remaining == 'undefined' || this.remaining === null) {\n                    this.remaining = '';\n                }\n                if (this.row.repeatFlag) {\n                    graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                }\n                //  else {\n                //     if(this.row.grid.ParentCell.row.repeatFlag) {\n                //         graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);                    \n                //     } else {\n                //         layoutRectangle.height = this.row.height;\n                //         graphics.drawString((this.objectValue as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                //         bounds.height = this.row.height;\n                //     }\n                //  }\n                this.isFinish = true;\n                //graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n            }\n            result = graphics.stringLayoutResult;\n            // if(this.row.grid.isChildGrid && this.row.rowBreakHeight > 0 && result !=null) {\n            //     bounds.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n            // }\n        }\n        else if (this.objectValue instanceof PdfGrid) {\n            var childGrid = this.objectValue;\n            childGrid.isChildGrid = true;\n            childGrid.ParentCell = this;\n            var layoutRect = void 0;\n            layoutRect = innerLayoutArea;\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                bounds.width -= this.gridRow.grid.style.cellSpacing;\n            }\n            // layoutRect = bounds;\n            // if (this.style.cellPadding != null){\n            //     layoutRect = bounds;            \n            // } else if((this.row.grid.style.cellPadding != null) && (childGrid.style.cellPadding.bottom === 0.5) && (childGrid.style.cellPadding.top === 0.5)\n            //                               && (childGrid.style.cellPadding.left === 5.76) && (childGrid.style.cellPadding.right === 5.76)\n            //                               && (this.gridRow.grid.style.cellSpacing === 0) && (childGrid.style.cellSpacing === 0)) {\n            //     layoutRect = innerLayoutArea;\n            // }\n            // if(this.objectValue.style.cellPadding != null && typeof this.objectValue.style.cellPadding !== 'undefined'){\n            //     layoutRect = bounds;\n            // }           \n            var layouter = new PdfGridLayouter(childGrid);\n            var format = new PdfGridLayoutFormat();\n            if (this.row.grid.LayoutFormat != null)\n                format = this.row.grid.LayoutFormat;\n            else\n                format.layout = PdfLayoutType.Paginate;\n            var param = new PdfLayoutParams();\n            if (graphics.layer != null) {\n                // Define layout parameters.\n                param.page = graphics.page;\n                param.bounds = layoutRect;\n                param.format = format;\n                //Set the span \n                childGrid.setSpan();\n                childGrid.checkSpan();\n                // Draw the child grid.\n                var childGridResult = layouter.Layouter(param);\n                //let childGridResult : PdfLayoutResult = layouter.innerLayout(param);\n                this.value = childGrid;\n                if (this.row.grid.splitChildRowIndex !== -1) {\n                    this.height = this.row.rowBreakHeightValue;\n                }\n                if (param.page != childGridResult.page) //&& (isWidthGreaterthanParent != true))\n                 {\n                    childGridResult.bounds.height = this.row.rowBreakHeightValue;\n                    if (this.row.rowBreakHeight == 0)\n                        this.row.NestedGridLayoutResult = childGridResult;\n                    else\n                        this.row.rowBreakHeight = this.row.rowBreakHeightValue;\n                    //bounds.height = this.row.rowBreakHeight;\n                    //After drawing paginated nested grid, the bounds of the parent grid in start page should be corrected for borders.\n                    //bounds.height = graphics.clientSize.height - bounds.y;\n                }\n            }\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            var imageBounds = void 0;\n            if (this.objectValue.width <= innerLayoutArea.width) {\n                imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.objectValue.width, innerLayoutArea.height);\n            }\n            else {\n                imageBounds = innerLayoutArea;\n            }\n            graphics.drawImage(this.objectValue, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height);\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            this.objectValue.draw(graphics.currentPage, innerLayoutArea);\n        }\n        else if (typeof this.objectValue === 'undefined') {\n            this.objectValue = \"\";\n            graphics.drawString(this.objectValue, font, textPen, textBrush, innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height, strFormat);\n            if (this.style.cellPadding != null && this.style.cellPadding.bottom == 0 && this.style.cellPadding.left == 0 && this.style.cellPadding.right == 0 && this.style.cellPadding.top == 0) {\n                bounds.width -= (this.style.borders.left.width + this.style.borders.right.width);\n            }\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                bounds.width -= this.gridRow.grid.style.cellSpacing;\n            }\n        }\n        if (this.style.borders != null) {\n            if (!this.fontSpilt)\n                this.drawCellBorders(graphics, bounds);\n            else {\n                if (this.row.grid.ParentCell.row.grid.splitChildRowIndex != -1) {\n                    this.row.rowFontSplit = false;\n                    this.drawCellBorders(graphics, bounds);\n                }\n            }\n        }\n        return result;\n    };\n    /* tslint:enable */\n    /**\n     * Draws the `cell border` constructed by drawing lines.\n     * @private\n     */\n    PdfGridCell.prototype.drawCellBorders = function (graphics, bounds) {\n        if (this.row.grid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside) {\n            bounds.x += this.style.borders.left.width;\n            bounds.y += this.style.borders.top.width;\n            bounds.width -= this.style.borders.right.width;\n            bounds.height -= this.style.borders.bottom.width;\n        }\n        var p1 = new PointF(bounds.x, bounds.y + bounds.height);\n        var p2 = new PointF(bounds.x, bounds.y);\n        var pen = this.cellStyle.borders.left;\n        if (this.cellStyle.borders.left.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        // SetTransparency(ref graphics, pen);\n        if (pen.width !== 0) {\n            graphics.drawLine(pen, p1, p2);\n        }\n        p1 = new PointF(bounds.x + bounds.width, bounds.y);\n        p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n        pen = this.cellStyle.borders.right;\n        if ((bounds.x + bounds.width) > (graphics.clientSize.width - (pen.width / 2))) {\n            p1 = new PointF(graphics.clientSize.width - (pen.width / 2), bounds.y);\n            p2 = new PointF(graphics.clientSize.width - (pen.width / 2), bounds.y + bounds.height);\n        }\n        if (this.cellStyle.borders.right.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        if (pen.width !== 0) {\n            graphics.drawLine(pen, p1, p2);\n        }\n        p1 = new PointF(bounds.x, bounds.y);\n        p2 = new PointF(bounds.x + bounds.width, bounds.y);\n        pen = this.cellStyle.borders.top;\n        if (this.cellStyle.borders.top.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        if (pen.width !== 0) {\n            graphics.drawLine(pen, p1, p2);\n        }\n        p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n        p2 = new PointF(bounds.x, bounds.y + bounds.height);\n        pen = this.cellStyle.borders.bottom;\n        if ((bounds.y + bounds.height) > (graphics.clientSize.height - (pen.width / 2))) {\n            p1 = new PointF((bounds.x + bounds.width), (graphics.clientSize.height - (pen.width / 2)));\n            p2 = new PointF(bounds.x, (graphics.clientSize.height - (pen.width / 2)));\n        }\n        if (this.cellStyle.borders.bottom.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        if (pen.width !== 0) {\n            graphics.drawLine(pen, p1, p2);\n        }\n    };\n    // private setTransparency(graphics : PdfGraphics, pen : PdfPen) : void {\n    //     let alpha : number = (pen.color.a / 255)as number;\n    //     graphics.save();\n    //     graphics.setTransparency(alpha);\n    // }\n    /**\n     * `Adjusts the outer layout area`.\n     * @private\n     */\n    /* tslint:disable */\n    PdfGridCell.prototype.adjustOuterLayoutArea = function (bounds, g) {\n        var isHeader = false;\n        var cellSpacing = this.row.grid.style.cellSpacing;\n        if (cellSpacing > 0) {\n            bounds = new RectangleF(bounds.x + cellSpacing, bounds.y + cellSpacing, bounds.width - cellSpacing, bounds.height - cellSpacing);\n        }\n        var currentColIndex = this.row.cells.indexOf(this);\n        if (this.columnSpan > 1 || (this.row.rowOverflowIndex > 0 && (currentColIndex == this.row.rowOverflowIndex + 1) && this.isCellMergeContinue)) {\n            var span = this.columnSpan;\n            if (span == 1 && this.isCellMergeContinue) {\n                for (var j = currentColIndex + 1; j < this.row.grid.columns.count; j++) {\n                    if (this.row.cells.getCell(j).isCellMergeContinue)\n                        span++;\n                    else\n                        break;\n                }\n            }\n            var totalWidth = 0;\n            for (var i = currentColIndex; i < currentColIndex + span; i++) {\n                if (this.row.grid.style.allowHorizontalOverflow) {\n                    var width = void 0;\n                    var compWidth = this.row.grid.size.width < g.clientSize.width ? this.row.grid.size.width : g.clientSize.width;\n                    if (this.row.grid.size.width > g.clientSize.width) {\n                        width = bounds.x + totalWidth + this.row.grid.columns.getColumn(i).width;\n                    }\n                    else {\n                        width = totalWidth + this.row.grid.columns.getColumn(i).width;\n                    }\n                    if (width > compWidth) {\n                        break;\n                    }\n                }\n                totalWidth += this.row.grid.columns.getColumn(i).width;\n            }\n            totalWidth -= this.row.grid.style.cellSpacing;\n            bounds.width = totalWidth;\n        }\n        if (this.rowSpan > 1 || this.row.rowSpanExists) {\n            var span = this.rowSpan;\n            var currentRowIndex = this.row.grid.rows.rowCollection.indexOf(this.row);\n            if (currentRowIndex == -1) {\n                currentRowIndex = this.row.grid.headers.indexOf(this.row);\n                if (currentRowIndex != -1) {\n                    isHeader = true;\n                }\n            }\n            // if (span == 1 && this.isCellMergeContinue) {\n            //         for (let j : number = currentRowIndex + 1; j < this.row.grid.rows.count; j++)\n            //         {\n            //             let flag : boolean = (isHeader ? this.row.grid.headers.getHeader(j).cells.getCell(currentColIndex).isCellMergeContinue : this.row.grid.rows.getRow(j).cells.getCell(currentColIndex).isCellMergeContinue);\n            //             if (flag)\n            //                 span++;\n            //             else\n            //                 break;\n            //         }\n            // }\n            var totalHeight = 0;\n            var max = 0;\n            for (var i = currentRowIndex; i < currentRowIndex + span; i++) {\n                totalHeight += (isHeader ? this.row.grid.headers.getHeader(i).height : this.row.grid.rows.getRow(i).height);\n                var row = this.row.grid.rows.getRow(i);\n                var rowIndex = this.row.grid.rows.rowCollection.indexOf(row);\n                /*if (this.rowSpan > 1)\n                    {\n                        for (let k : number = 0; k < this.row.cells.count; k++) {\n                            let cell : PdfGridCell = this.row.cells.getCell(k);\n                            if(cell.rowSpan>1)\n                            {\n                                let tempHeight : number =0;\n                                \n                                for (let j :number = i; j < i +cell.rowSpan; j++)\n                                {\n                                    if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                        this.row.grid.rows.getRow(j).isRowHeightSet = false;\n                                    tempHeight += this.row.grid.rows.getRow(j).height;\n                                    if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                        this.row.grid.rows.getRow(j).isRowHeightSet = true;\n                                }\n                                //To check the Row spanned cell height is greater than the total spanned row height.\n                                if(cell.height>tempHeight)\n                                {\n                                    if (max < (cell.height - tempHeight))\n                                    {\n                                        max = cell.height - tempHeight;\n                                        if (this.rowSpanRemainingHeight != 0 && max > this.rowSpanRemainingHeight)\n                                        {\n                                            max += this.rowSpanRemainingHeight;\n                                        }\n                                        let index :number = row.cells.indexOf(cell);\n                                        //set the m_rowspanRemainingHeight to last rowspanned row.\n                                        this.row.grid.rows.getRow((rowIndex +cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight = max;\n                                        this.rowSpanRemainingHeight = this.row.grid.rows.getRow((rowIndex + cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (!this.row.grid.rows.getRow(i).isRowSpanRowHeightSet)\n                    this.row.grid.rows.getRow(i).isRowHeightSet = true;*/\n            }\n            var cellIndex = this.row.cells.indexOf(this);\n            totalHeight -= this.row.grid.style.cellSpacing;\n            // if (this.row.cells.getCell(cellIndex).height > totalHeight && (!this.row.grid.rows.getRow((currentRowIndex + span) - 1).isRowHeightSet)) {\n            //      this.row.grid.rows.getRow((currentRowIndex + span) - 1).cells.getCell(cellIndex).rowSpanRemainingHeight = this.row.cells.getCell(cellIndex).height - totalHeight;\n            //      totalHeight = this.row.cells.getCell(cellIndex).height;\n            //      bounds.height = totalHeight;\n            // } else {\n            bounds.height = totalHeight;\n            //  }\n            if (!this.row.rowMergeComplete) {\n                bounds.height = totalHeight;\n            }\n        }\n        return bounds;\n    };\n    /* tslint:enable */\n    /**\n     * Gets the `text font`.\n     * @private\n     */\n    PdfGridCell.prototype.getTextFont = function () {\n        if (typeof this.style.font !== 'undefined' && this.style.font != null) {\n            return this.style.font;\n        }\n        else if (typeof this.row.style.font !== 'undefined' && this.row.style.font != null) {\n            return this.row.style.font;\n        }\n        else if (typeof this.row.grid.style.font !== 'undefined' && this.row.grid.style.font != null) {\n            return this.row.grid.style.font;\n        }\n        else {\n            return PdfDocument.defaultFont;\n        }\n    };\n    /**\n     * Gets the `text brush`.\n     * @private\n     */\n    PdfGridCell.prototype.getTextBrush = function () {\n        if (typeof this.style.textBrush !== 'undefined' && this.style.textBrush != null) {\n            return this.style.textBrush;\n        }\n        else if (typeof this.row.style.textBrush !== 'undefined' && this.row.style.textBrush != null) {\n            return this.row.style.textBrush;\n        }\n        else {\n            return this.row.grid.style.textBrush;\n        }\n    };\n    /**\n     * Gets the `text pen`.\n     * @private\n     */\n    PdfGridCell.prototype.getTextPen = function () {\n        if (typeof this.style.textPen !== 'undefined' && this.style.textPen != null) {\n            return this.style.textPen;\n        }\n        else if (typeof this.row.style.textPen !== 'undefined' && this.row.style.textPen != null) {\n            return this.row.style.textPen;\n        }\n        else {\n            return this.row.grid.style.textPen;\n        }\n    };\n    /**\n     * Gets the `background brush`.\n     * @private\n     */\n    PdfGridCell.prototype.getBackgroundBrush = function () {\n        if (typeof this.style.backgroundBrush !== 'undefined' && this.style.backgroundBrush != null) {\n            return this.style.backgroundBrush;\n        }\n        else if (typeof this.row.style.backgroundBrush !== 'undefined' && this.row.style.backgroundBrush != null) {\n            return this.row.style.backgroundBrush;\n        }\n        else {\n            return this.row.grid.style.backgroundBrush;\n        }\n    };\n    /**\n     * Gets the `background image`.\n     * @private\n     */\n    PdfGridCell.prototype.getBackgroundImage = function () {\n        if (typeof this.style.backgroundImage !== 'undefined' && this.style.backgroundImage != null) {\n            return this.style.backgroundImage;\n        }\n        else if (typeof this.row.style.backgroundImage !== 'undefined' && this.row.style.backgroundImage != null) {\n            return this.row.style.backgroundImage;\n        }\n        else {\n            return this.row.grid.style.backgroundImage;\n        }\n    };\n    /**\n     * Gets the current `StringFormat`.\n     * @private\n     */\n    PdfGridCell.prototype.getStringFormat = function () {\n        if (typeof this.style.stringFormat !== 'undefined' && this.style.stringFormat != null) {\n            return this.style.stringFormat;\n        }\n        else {\n            return this.stringFormat;\n        }\n    };\n    /**\n     * Calculates the `height`.\n     * @private\n     */\n    PdfGridCell.prototype.measureHeight = function () {\n        // .. Calculate the cell text height.\n        // .....Add border widths, cell spacings and paddings to the height.\n        var width = this.calculateWidth();\n        // //check whether the Current PdfGridCell has padding\n        if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n            width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n            //width -= (this.style.borders.left.width + this.style.borders.right.width);\n        }\n        else {\n            width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n            width -= (this.style.borders.left.width + this.style.borders.right.width);\n        }\n        var height = 0;\n        var layouter = new PdfStringLayouter();\n        if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n            var currentValue = this.objectValue;\n            /* tslint:disable */\n            if (!this.isFinish)\n                currentValue = !(this.remaining === null || this.remaining === '' ||\n                    typeof this.remaining === 'undefined') ? this.remaining : this.objectValue;\n            var slr = null;\n            var cellIndex = this.row.cells.indexOf(this);\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                width -= this.gridRow.grid.style.cellSpacing * 2;\n            }\n            if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n                if (this.gridRow.grid.isChildGrid) {\n                    if (width < 0) {\n                        this.tempval = width;\n                        if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                            this.tempval += (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n                        }\n                        else {\n                            this.tempval += (this.style.cellPadding.right + this.style.cellPadding.left);\n                            this.tempval += (this.style.borders.left.width + this.style.borders.right.width);\n                        }\n                    }\n                    else {\n                        this.tempval = width;\n                    }\n                    slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(this.tempval, 0), false, new SizeF(0, 0));\n                    height += slr.actualSize.height;\n                }\n                else {\n                    slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n                    height += slr.actualSize.height;\n                }\n            }\n            /* tslint:enable */\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        else if (this.objectValue instanceof PdfGrid) {\n            var cellIndex = this.row.cells.indexOf(this);\n            var internalWidth = 0;\n            if ((this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined')) {\n                internalWidth = this.calculateWidth();\n                if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n                    internalWidth -= this.style.cellPadding.left;\n                }\n                if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n                    internalWidth -= this.style.cellPadding.right;\n                }\n            }\n            else if ((this.row.grid.style.cellPadding != null || typeof this.row.grid.style.cellPadding !== 'undefined')) {\n                internalWidth = this.calculateWidth();\n                if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n                    internalWidth -= this.row.grid.style.cellPadding.left;\n                }\n                if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n                    internalWidth -= this.row.grid.style.cellPadding.right;\n                }\n            }\n            else {\n                internalWidth = this.calculateWidth();\n            }\n            this.objectValue.tempWidth = internalWidth;\n            if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n                height = this.objectValue.size.height;\n            }\n            else {\n                height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n            }\n            if (this.gridRow.grid.style.cellSpacing !== 0) {\n                width -= this.gridRow.grid.style.cellSpacing * 2;\n                //height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);\n            }\n            if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n                if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n                    height += this.row.grid.style.cellPadding.top;\n                }\n                if (this.row.grid.style.cellPadding.hasBottomPad && typeof this.row.grid.style.cellPadding.bottom !== 'undefined') {\n                    height += this.row.grid.style.cellPadding.bottom;\n                }\n            }\n            height += this.objectValue.style.cellSpacing;\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            height += this.objectValue.height;\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            var webLink = this.objectValue;\n            /* tslint:disable */\n            var slr = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n            /* tslint:enable */\n            height += slr.actualSize.height;\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        else if (typeof this.objectValue === 'undefined') {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n            }\n            else {\n                width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n                width -= (this.style.borders.left.width + this.style.borders.right.width);\n            }\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        //Add padding top and bottom value to height\n        if (!(this.objectValue instanceof PdfGrid)) {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);\n            }\n            else {\n                height += (this.style.cellPadding.top + this.style.cellPadding.bottom);\n            }\n        }\n        else {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n                    height += this.row.grid.style.cellPadding.top;\n                }\n                if (typeof this.row.grid.style.cellPadding.bottom !== 'undefined' && this.row.grid.style.cellPadding.hasBottomPad) {\n                    height += this.row.grid.style.cellPadding.bottom;\n                }\n            }\n            else {\n                if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n                    height += this.style.cellPadding.top;\n                }\n                if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n                    height += this.style.cellPadding.bottom;\n                }\n            }\n        }\n        height += this.row.grid.style.cellSpacing;\n        return height;\n    };\n    /**\n     * return the calculated `width` of the cell.\n     * @private\n     */\n    PdfGridCell.prototype.calculateWidth = function () {\n        var cellIndex = this.row.cells.indexOf(this);\n        var rowindex = this.row.grid.rows.rowCollection.indexOf(this.row);\n        var columnSpan = this.columnSpan;\n        var width = 0;\n        if (columnSpan === 1) {\n            for (var i = 0; i < columnSpan; i++) {\n                width += this.row.grid.columns.getColumn(cellIndex + i).width;\n            }\n        }\n        else if (columnSpan > 1) {\n            for (var i = 0; i < columnSpan; i++) {\n                width += this.row.grid.columns.getColumn(cellIndex + i).width;\n                if ((i + 1) < columnSpan) {\n                    this.row.cells.getCell(cellIndex + i + 1).hasColSpan = true;\n                }\n            }\n        }\n        if (this.parent != null && this.parent.row.width > 0) {\n            if ((this.row.grid.isChildGrid) && this.parent != null && (this.row.width > this.parent.row.width)) {\n                width = 0;\n                for (var j = 0; j < this.parent.columnSpan; j++) {\n                    width += this.parent.row.grid.columns.getColumn(j).width;\n                }\n                width = width / this.row.cells.count;\n            }\n        }\n        return width;\n    };\n    return PdfGridCell;\n}());\nexport { PdfGridCell };\n/**\n * `PdfGridCellCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridCell' objects.\n * @private\n */\nvar PdfGridCellCollection = /** @class */ (function () {\n    //Constructor\n    /**\n     * Initializes a new instance of the `PdfGridCellCollection` class with the row.\n     * @private\n     */\n    function PdfGridCellCollection(row) {\n        /**\n         * @hidden\n         * @private\n         */\n        this.cells = [];\n        this.gridRow = row;\n    }\n    //Properties\n    /**\n     * Gets the current `cell`.\n     * @private\n     */\n    PdfGridCellCollection.prototype.getCell = function (index) {\n        if (index < 0 || index >= this.count) {\n            throw new Error('IndexOutOfRangeException');\n        }\n        return this.cells[index];\n    };\n    Object.defineProperty(PdfGridCellCollection.prototype, \"count\", {\n        /**\n         * Gets the cells `count`.[Read-Only].\n         * @private\n         */\n        get: function () {\n            return this.cells.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridCellCollection.prototype.add = function (cell) {\n        if (typeof cell === 'undefined') {\n            var tempcell = new PdfGridCell();\n            this.add(tempcell);\n            return cell;\n        }\n        else {\n            cell.row = this.gridRow;\n            this.cells.push(cell);\n        }\n    };\n    /**\n     * Returns the `index of` a particular cell in the collection.\n     * @private\n     */\n    PdfGridCellCollection.prototype.indexOf = function (cell) {\n        return this.cells.indexOf(cell);\n    };\n    return PdfGridCellCollection;\n}());\nexport { PdfGridCellCollection };\n"]},"metadata":{},"sourceType":"module"}