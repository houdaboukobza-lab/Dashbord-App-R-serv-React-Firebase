{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfBorders, PdfPaddings } from './pdf-borders';\nimport { PdfBorderOverlapStyle } from './../../tables/light-tables/enum';\n/**\n * Base class for the `grid style`,\n */\n\nvar PdfGridStyleBase =\n/** @class */\nfunction () {\n  function PdfGridStyleBase() {}\n\n  Object.defineProperty(PdfGridStyleBase.prototype, \"backgroundBrush\", {\n    // Properties\n\n    /**\n     * Gets or sets the `background brush`.\n     * @private\n     */\n    get: function () {\n      return this.gridBackgroundBrush;\n    },\n    set: function (value) {\n      this.gridBackgroundBrush = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyleBase.prototype, \"textBrush\", {\n    /**\n     * Gets or sets the `text brush`.\n     * @private\n     */\n    get: function () {\n      return this.gridTextBrush;\n    },\n    set: function (value) {\n      this.gridTextBrush = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyleBase.prototype, \"textPen\", {\n    /**\n     * Gets or sets the `text pen`.\n     * @private\n     */\n    get: function () {\n      return this.gridTextPen;\n    },\n    set: function (value) {\n      this.gridTextPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyleBase.prototype, \"font\", {\n    /**\n     * Gets or sets the `font`.\n     * @private\n     */\n    get: function () {\n      return this.gridFont;\n    },\n    set: function (value) {\n      this.gridFont = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyleBase.prototype, \"backgroundImage\", {\n    /**\n     * Gets or sets the `background Image`.\n     * @private\n     */\n    get: function () {\n      return this.gridBackgroundImage;\n    },\n    set: function (value) {\n      this.gridBackgroundImage = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridStyleBase;\n}();\n\nexport { PdfGridStyleBase };\n/**\n * `PdfGridStyle` class provides customization of the appearance for the 'PdfGrid'.\n */\n\nvar PdfGridStyle =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridStyle, _super); //constructor\n\n  /**\n   * Initialize a new instance for `PdfGridStyle` class.\n   * @private\n   */\n\n\n  function PdfGridStyle() {\n    var _this = _super.call(this) || this;\n\n    _this.gridBorderOverlapStyle = PdfBorderOverlapStyle.Overlap;\n    _this.bAllowHorizontalOverflow = false;\n    _this.gridHorizontalOverflowType = PdfHorizontalOverflowType.LastPage;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridStyle.prototype, \"cellSpacing\", {\n    //Properties\n\n    /**\n     * Gets or sets the `cell spacing` of the 'PdfGrid'.\n     * @private\n     */\n    get: function () {\n      if (typeof this.gridCellSpacing === 'undefined') {\n        this.gridCellSpacing = 0;\n      }\n\n      return this.gridCellSpacing;\n    },\n    set: function (value) {\n      this.gridCellSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyle.prototype, \"horizontalOverflowType\", {\n    /**\n     * Gets or sets the type of the `horizontal overflow` of the 'PdfGrid'.\n     * @private\n     */\n    get: function () {\n      return this.gridHorizontalOverflowType;\n    },\n    set: function (value) {\n      this.gridHorizontalOverflowType = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyle.prototype, \"allowHorizontalOverflow\", {\n    /**\n     * Gets or sets a value indicating whether to `allow horizontal overflow`.\n     * @private\n     */\n    get: function () {\n      return this.bAllowHorizontalOverflow;\n    },\n    set: function (value) {\n      this.bAllowHorizontalOverflow = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyle.prototype, \"cellPadding\", {\n    /**\n     * Gets or sets the `cell padding`.\n     * @private\n     */\n    get: function () {\n      if (typeof this.gridCellPadding === 'undefined') {\n        this.gridCellPadding = new PdfPaddings();\n      }\n\n      return this.gridCellPadding;\n    },\n    set: function (value) {\n      if (typeof this.gridCellPadding === 'undefined') {\n        this.gridCellPadding = new PdfPaddings();\n        this.gridCellPadding = value;\n      } else {\n        this.gridCellPadding = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridStyle.prototype, \"borderOverlapStyle\", {\n    /**\n     * Gets or sets the `border overlap style` of the 'PdfGrid'.\n     * @private\n     */\n    get: function () {\n      return this.gridBorderOverlapStyle;\n    },\n    set: function (value) {\n      this.gridBorderOverlapStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridStyle;\n}(PdfGridStyleBase);\n\nexport { PdfGridStyle };\n/**\n * `PdfGridCellStyle` class provides customization of the appearance for the 'PdfGridCell'.\n */\n\nvar PdfGridCellStyle =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridCellStyle, _super);\n  /**\n   * Initializes a new instance of the `PdfGridCellStyle` class.\n   * @private\n   */\n\n\n  function PdfGridCellStyle() {\n    var _this = _super.call(this) || this;\n    /**\n     * @hidden\n     * @private\n     */\n\n\n    _this.gridCellBorders = PdfBorders.default;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridCellStyle.prototype, \"stringFormat\", {\n    //Properties\n\n    /**\n     * Gets the `string format` of the 'PdfGridCell'.\n     * @private\n     */\n    get: function () {\n      return this.format;\n    },\n    set: function (value) {\n      this.format = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCellStyle.prototype, \"borders\", {\n    /**\n     * Gets or sets the `border` of the 'PdfGridCell'.\n     * @private\n     */\n    get: function () {\n      return this.gridCellBorders;\n    },\n    set: function (value) {\n      this.gridCellBorders = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridCellStyle.prototype, \"cellPadding\", {\n    /**\n     * Gets or sets the `cell padding`.\n     * @private\n     */\n    get: function () {\n      return this.gridCellPadding;\n    },\n    set: function (value) {\n      if (this.gridCellPadding == null || typeof this.gridCellPadding === 'undefined') {\n        this.gridCellPadding = new PdfPaddings();\n      }\n\n      this.gridCellPadding = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridCellStyle;\n}(PdfGridStyleBase);\n\nexport { PdfGridCellStyle };\n/**\n * `PdfGridRowStyle` class provides customization of the appearance for the `PdfGridRow`.\n */\n\nvar PdfGridRowStyle =\n/** @class */\nfunction () {\n  // public setBackgroundImage(value : PdfImage) : void {\n  //     this.gridRowBackgroundImage = value;\n  //     if (typeof this.parent !== 'undefined') {\n  //         for (let i : number = 0; i < this.parent.cells.count; i++) {\n  //             this.parent.cells.getCell(i).style.backgroundImage = value;\n  //         }\n  //     }\n  // }\n  // Constructor\n\n  /**\n   * Initializes a new instance of the `PdfGridRowStyle` class.\n   * @private\n   */\n  function PdfGridRowStyle() {//\n  }\n\n  Object.defineProperty(PdfGridRowStyle.prototype, \"backgroundBrush\", {\n    // Properties\n\n    /**\n     * Gets or sets the `background brush`.\n     * @private\n     */\n    get: function () {\n      return this.gridRowBackgroundBrush;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridRowStyle.prototype.setBackgroundBrush = function (value) {\n    this.gridRowBackgroundBrush = value;\n\n    if (typeof this.parent !== 'undefined') {\n      for (var i = 0; i < this.parent.cells.count; i++) {\n        this.parent.cells.getCell(i).style.backgroundBrush = value;\n      }\n    }\n  };\n\n  Object.defineProperty(PdfGridRowStyle.prototype, \"textBrush\", {\n    /**\n     * Gets or sets the `text brush`.\n     * @private\n     */\n    get: function () {\n      return this.gridRowTextBrush;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridRowStyle.prototype.setTextBrush = function (value) {\n    this.gridRowTextBrush = value;\n\n    if (typeof this.parent !== 'undefined') {\n      for (var i = 0; i < this.parent.cells.count; i++) {\n        this.parent.cells.getCell(i).style.textBrush = value;\n      }\n    }\n  };\n\n  Object.defineProperty(PdfGridRowStyle.prototype, \"textPen\", {\n    /**\n     * Gets or sets the `text pen`.\n     * @private\n     */\n    get: function () {\n      return this.gridRowTextPen;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridRowStyle.prototype.setTextPen = function (value) {\n    this.gridRowTextPen = value;\n\n    if (typeof this.parent !== 'undefined') {\n      for (var i = 0; i < this.parent.cells.count; i++) {\n        this.parent.cells.getCell(i).style.textPen = value;\n      }\n    }\n  };\n\n  Object.defineProperty(PdfGridRowStyle.prototype, \"font\", {\n    /**\n     * Gets or sets the `font`.\n     * @private\n     */\n    get: function () {\n      return this.gridRowFont;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridRowStyle.prototype.setFont = function (value) {\n    this.gridRowFont = value;\n\n    if (typeof this.parent !== 'undefined') {\n      for (var i = 0; i < this.parent.cells.count; i++) {\n        this.parent.cells.getCell(i).style.font = value;\n      }\n    }\n  };\n\n  Object.defineProperty(PdfGridRowStyle.prototype, \"border\", {\n    /**\n     * Gets or sets the `border` of the current row.\n     * @private\n     */\n    get: function () {\n      if (typeof this.gridRowBorder === 'undefined') {\n        this.setBorder(new PdfBorders());\n      }\n\n      return this.gridRowBorder;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridRowStyle.prototype.setBorder = function (value) {\n    this.gridRowBorder = value;\n\n    if (typeof this.parent !== 'undefined') {\n      for (var i = 0; i < this.parent.cells.count; i++) {\n        this.parent.cells.getCell(i).style.borders = value;\n      }\n    }\n  };\n  /**\n   * sets the `parent row` of the current object.\n   * @private\n   */\n\n\n  PdfGridRowStyle.prototype.setParent = function (parent) {\n    this.parent = parent;\n  };\n\n  Object.defineProperty(PdfGridRowStyle.prototype, \"backgroundImage\", {\n    /**\n     * Gets or sets the `backgroundImage` of the 'PdfGridCell'.\n     * @private\n     */\n    get: function () {\n      return this.gridRowBackgroundImage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridRowStyle;\n}();\n\nexport { PdfGridRowStyle };\n/**\n * public Enum for `PdfHorizontalOverflowType`.\n * @private\n */\n\nexport var PdfHorizontalOverflowType;\n\n(function (PdfHorizontalOverflowType) {\n  /**\n   * Specifies the type of `NextPage`.\n   * @private\n   */\n  PdfHorizontalOverflowType[PdfHorizontalOverflowType[\"NextPage\"] = 0] = \"NextPage\";\n  /**\n   * Specifies the type of `LastPage`.\n   * @private\n   */\n\n  PdfHorizontalOverflowType[PdfHorizontalOverflowType[\"LastPage\"] = 1] = \"LastPage\";\n})(PdfHorizontalOverflowType || (PdfHorizontalOverflowType = {}));","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/styles/style.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfBorders","PdfPaddings","PdfBorderOverlapStyle","PdfGridStyleBase","defineProperty","get","gridBackgroundBrush","set","value","enumerable","configurable","gridTextBrush","gridTextPen","gridFont","gridBackgroundImage","PdfGridStyle","_super","_this","call","gridBorderOverlapStyle","Overlap","bAllowHorizontalOverflow","gridHorizontalOverflowType","PdfHorizontalOverflowType","LastPage","gridCellSpacing","gridCellPadding","PdfGridCellStyle","gridCellBorders","default","format","PdfGridRowStyle","gridRowBackgroundBrush","setBackgroundBrush","parent","i","cells","count","getCell","style","backgroundBrush","gridRowTextBrush","setTextBrush","textBrush","gridRowTextPen","setTextPen","textPen","gridRowFont","setFont","font","gridRowBorder","setBorder","borders","setParent","gridRowBackgroundImage"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfBorders, PdfPaddings } from './pdf-borders';\nimport { PdfBorderOverlapStyle } from './../../tables/light-tables/enum';\n/**\n * Base class for the `grid style`,\n */\nvar PdfGridStyleBase = /** @class */ (function () {\n    function PdfGridStyleBase() {\n    }\n    Object.defineProperty(PdfGridStyleBase.prototype, \"backgroundBrush\", {\n        // Properties\n        /**\n         * Gets or sets the `background brush`.\n         * @private\n         */\n        get: function () {\n            return this.gridBackgroundBrush;\n        },\n        set: function (value) {\n            this.gridBackgroundBrush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyleBase.prototype, \"textBrush\", {\n        /**\n         * Gets or sets the `text brush`.\n         * @private\n         */\n        get: function () {\n            return this.gridTextBrush;\n        },\n        set: function (value) {\n            this.gridTextBrush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyleBase.prototype, \"textPen\", {\n        /**\n         * Gets or sets the `text pen`.\n         * @private\n         */\n        get: function () {\n            return this.gridTextPen;\n        },\n        set: function (value) {\n            this.gridTextPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyleBase.prototype, \"font\", {\n        /**\n         * Gets or sets the `font`.\n         * @private\n         */\n        get: function () {\n            return this.gridFont;\n        },\n        set: function (value) {\n            this.gridFont = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyleBase.prototype, \"backgroundImage\", {\n        /**\n         * Gets or sets the `background Image`.\n         * @private\n         */\n        get: function () {\n            return this.gridBackgroundImage;\n        },\n        set: function (value) {\n            this.gridBackgroundImage = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridStyleBase;\n}());\nexport { PdfGridStyleBase };\n/**\n * `PdfGridStyle` class provides customization of the appearance for the 'PdfGrid'.\n */\nvar PdfGridStyle = /** @class */ (function (_super) {\n    __extends(PdfGridStyle, _super);\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGridStyle` class.\n     * @private\n     */\n    function PdfGridStyle() {\n        var _this = _super.call(this) || this;\n        _this.gridBorderOverlapStyle = PdfBorderOverlapStyle.Overlap;\n        _this.bAllowHorizontalOverflow = false;\n        _this.gridHorizontalOverflowType = PdfHorizontalOverflowType.LastPage;\n        return _this;\n    }\n    Object.defineProperty(PdfGridStyle.prototype, \"cellSpacing\", {\n        //Properties\n        /**\n         * Gets or sets the `cell spacing` of the 'PdfGrid'.\n         * @private\n         */\n        get: function () {\n            if (typeof this.gridCellSpacing === 'undefined') {\n                this.gridCellSpacing = 0;\n            }\n            return this.gridCellSpacing;\n        },\n        set: function (value) {\n            this.gridCellSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyle.prototype, \"horizontalOverflowType\", {\n        /**\n         * Gets or sets the type of the `horizontal overflow` of the 'PdfGrid'.\n         * @private\n         */\n        get: function () {\n            return this.gridHorizontalOverflowType;\n        },\n        set: function (value) {\n            this.gridHorizontalOverflowType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyle.prototype, \"allowHorizontalOverflow\", {\n        /**\n         * Gets or sets a value indicating whether to `allow horizontal overflow`.\n         * @private\n         */\n        get: function () {\n            return this.bAllowHorizontalOverflow;\n        },\n        set: function (value) {\n            this.bAllowHorizontalOverflow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyle.prototype, \"cellPadding\", {\n        /**\n         * Gets or sets the `cell padding`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.gridCellPadding === 'undefined') {\n                this.gridCellPadding = new PdfPaddings();\n            }\n            return this.gridCellPadding;\n        },\n        set: function (value) {\n            if (typeof this.gridCellPadding === 'undefined') {\n                this.gridCellPadding = new PdfPaddings();\n                this.gridCellPadding = value;\n            }\n            else {\n                this.gridCellPadding = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyle.prototype, \"borderOverlapStyle\", {\n        /**\n         * Gets or sets the `border overlap style` of the 'PdfGrid'.\n         * @private\n         */\n        get: function () {\n            return this.gridBorderOverlapStyle;\n        },\n        set: function (value) {\n            this.gridBorderOverlapStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridStyle;\n}(PdfGridStyleBase));\nexport { PdfGridStyle };\n/**\n * `PdfGridCellStyle` class provides customization of the appearance for the 'PdfGridCell'.\n */\nvar PdfGridCellStyle = /** @class */ (function (_super) {\n    __extends(PdfGridCellStyle, _super);\n    /**\n     * Initializes a new instance of the `PdfGridCellStyle` class.\n     * @private\n     */\n    function PdfGridCellStyle() {\n        var _this = _super.call(this) || this;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridCellBorders = PdfBorders.default;\n        return _this;\n    }\n    Object.defineProperty(PdfGridCellStyle.prototype, \"stringFormat\", {\n        //Properties\n        /**\n         * Gets the `string format` of the 'PdfGridCell'.\n         * @private\n         */\n        get: function () {\n            return this.format;\n        },\n        set: function (value) {\n            this.format = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCellStyle.prototype, \"borders\", {\n        /**\n         * Gets or sets the `border` of the 'PdfGridCell'.\n         * @private\n         */\n        get: function () {\n            return this.gridCellBorders;\n        },\n        set: function (value) {\n            this.gridCellBorders = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCellStyle.prototype, \"cellPadding\", {\n        /**\n         * Gets or sets the `cell padding`.\n         * @private\n         */\n        get: function () {\n            return this.gridCellPadding;\n        },\n        set: function (value) {\n            if (this.gridCellPadding == null || typeof this.gridCellPadding === 'undefined') {\n                this.gridCellPadding = new PdfPaddings();\n            }\n            this.gridCellPadding = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridCellStyle;\n}(PdfGridStyleBase));\nexport { PdfGridCellStyle };\n/**\n * `PdfGridRowStyle` class provides customization of the appearance for the `PdfGridRow`.\n */\nvar PdfGridRowStyle = /** @class */ (function () {\n    // public setBackgroundImage(value : PdfImage) : void {\n    //     this.gridRowBackgroundImage = value;\n    //     if (typeof this.parent !== 'undefined') {\n    //         for (let i : number = 0; i < this.parent.cells.count; i++) {\n    //             this.parent.cells.getCell(i).style.backgroundImage = value;\n    //         }\n    //     }\n    // }\n    // Constructor\n    /**\n     * Initializes a new instance of the `PdfGridRowStyle` class.\n     * @private\n     */\n    function PdfGridRowStyle() {\n        //\n    }\n    Object.defineProperty(PdfGridRowStyle.prototype, \"backgroundBrush\", {\n        // Properties\n        /**\n         * Gets or sets the `background brush`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowBackgroundBrush;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridRowStyle.prototype.setBackgroundBrush = function (value) {\n        this.gridRowBackgroundBrush = value;\n        if (typeof this.parent !== 'undefined') {\n            for (var i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.backgroundBrush = value;\n            }\n        }\n    };\n    Object.defineProperty(PdfGridRowStyle.prototype, \"textBrush\", {\n        /**\n         * Gets or sets the `text brush`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowTextBrush;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridRowStyle.prototype.setTextBrush = function (value) {\n        this.gridRowTextBrush = value;\n        if (typeof this.parent !== 'undefined') {\n            for (var i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.textBrush = value;\n            }\n        }\n    };\n    Object.defineProperty(PdfGridRowStyle.prototype, \"textPen\", {\n        /**\n         * Gets or sets the `text pen`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowTextPen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridRowStyle.prototype.setTextPen = function (value) {\n        this.gridRowTextPen = value;\n        if (typeof this.parent !== 'undefined') {\n            for (var i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.textPen = value;\n            }\n        }\n    };\n    Object.defineProperty(PdfGridRowStyle.prototype, \"font\", {\n        /**\n         * Gets or sets the `font`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowFont;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridRowStyle.prototype.setFont = function (value) {\n        this.gridRowFont = value;\n        if (typeof this.parent !== 'undefined') {\n            for (var i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.font = value;\n            }\n        }\n    };\n    Object.defineProperty(PdfGridRowStyle.prototype, \"border\", {\n        /**\n         * Gets or sets the `border` of the current row.\n         * @private\n         */\n        get: function () {\n            if (typeof this.gridRowBorder === 'undefined') {\n                this.setBorder(new PdfBorders());\n            }\n            return this.gridRowBorder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridRowStyle.prototype.setBorder = function (value) {\n        this.gridRowBorder = value;\n        if (typeof this.parent !== 'undefined') {\n            for (var i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.borders = value;\n            }\n        }\n    };\n    /**\n     * sets the `parent row` of the current object.\n     * @private\n     */\n    PdfGridRowStyle.prototype.setParent = function (parent) {\n        this.parent = parent;\n    };\n    Object.defineProperty(PdfGridRowStyle.prototype, \"backgroundImage\", {\n        /**\n         * Gets or sets the `backgroundImage` of the 'PdfGridCell'.\n         * @private\n         */\n        get: function () {\n            return this.gridRowBackgroundImage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridRowStyle;\n}());\nexport { PdfGridRowStyle };\n/**\n * public Enum for `PdfHorizontalOverflowType`.\n * @private\n */\nexport var PdfHorizontalOverflowType;\n(function (PdfHorizontalOverflowType) {\n    /**\n     * Specifies the type of `NextPage`.\n     * @private\n     */\n    PdfHorizontalOverflowType[PdfHorizontalOverflowType[\"NextPage\"] = 0] = \"NextPage\";\n    /**\n     * Specifies the type of `LastPage`.\n     * @private\n     */\n    PdfHorizontalOverflowType[PdfHorizontalOverflowType[\"LastPage\"] = 1] = \"LastPage\";\n})(PdfHorizontalOverflowType || (PdfHorizontalOverflowType = {}));\n"]},"metadata":{},"sourceType":"module"}