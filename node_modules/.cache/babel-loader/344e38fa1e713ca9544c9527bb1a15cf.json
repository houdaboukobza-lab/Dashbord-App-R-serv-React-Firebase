{"ast":null,"code":"/**\n * PdfPageSettings.ts class for EJ2-PDF\n */\nimport { SizeF, PointF } from './../drawing/pdf-drawing';\nimport { PdfPageSize } from './pdf-page-size';\nimport { PdfPageRotateAngle, PdfPageOrientation } from './enum';\nimport { PdfMargins } from './../graphics/pdf-margins';\n/**\n * The class provides various `setting` related with PDF pages.\n */\n\nvar PdfPageSettings =\n/** @class */\nfunction () {\n  function PdfPageSettings(margins) {\n    //Fields\n\n    /**\n     * The page `margins`.\n     * @private\n     */\n    this.pageMargins = new PdfMargins();\n    /**\n     * The page `size`.\n     * @default a4\n     * @private\n     */\n\n    this.pageSize = PdfPageSize.a4;\n    /**\n     * The page `rotation angle`.\n     * @default PdfPageRotateAngle.RotateAngle0\n     * @private\n     */\n\n    this.rotateAngle = PdfPageRotateAngle.RotateAngle0;\n    /**\n     * The page `orientation`.\n     * @default PdfPageOrientation.Portrait\n     * @private\n     */\n\n    this.pageOrientation = PdfPageOrientation.Portrait;\n    /**\n     * The page `origin`.\n     * @default 0,0\n     * @private\n     */\n\n    this.pageOrigin = new PointF(0, 0);\n    /**\n     * Checks the Whether the `rotation` is applied or not.\n     * @default false\n     * @private\n     */\n\n    this.isRotation = false;\n\n    if (typeof margins === 'number') {\n      this.pageMargins.setMargins(margins);\n    }\n  }\n\n  Object.defineProperty(PdfPageSettings.prototype, \"size\", {\n    //Properties\n\n    /**\n     * Gets or sets the `size` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageSize;\n    },\n    set: function (value) {\n      this.setSize(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"orientation\", {\n    /**\n     * Gets or sets the page `orientation`.\n     * @private\n     */\n    get: function () {\n      return this.pageOrientation;\n    },\n    set: function (orientation) {\n      if (this.pageOrientation !== orientation) {\n        this.pageOrientation = orientation;\n        this.updateSize(orientation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"margins\", {\n    /**\n     * Gets or sets the `margins` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageMargins;\n    },\n    set: function (value) {\n      this.pageMargins = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"width\", {\n    /**\n     * Gets or sets the `width` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageSize.width;\n    },\n    set: function (value) {\n      this.pageSize.width = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"height\", {\n    /**\n     * Gets or sets the `height` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageSize.height;\n    },\n    set: function (value) {\n      this.pageSize.height = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"origin\", {\n    /**\n     * Gets or sets the `origin` of the page.\n     * @private\n     */\n    get: function () {\n      return this.pageOrigin;\n    },\n    set: function (value) {\n      this.pageOrigin = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPageSettings.prototype, \"rotate\", {\n    /**\n     * Gets or sets the number of degrees by which the page should be `rotated` clockwise when displayed or printed.\n     * @private\n     */\n    get: function () {\n      return this.rotateAngle;\n    },\n    set: function (value) {\n      this.rotateAngle = value;\n      this.isRotation = true;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Methods\n\n  /**\n   * `Update page size` depending on orientation.\n   * @private\n   */\n\n  PdfPageSettings.prototype.updateSize = function (orientation) {\n    var min = Math.min(this.pageSize.width, this.pageSize.height);\n    var max = Math.max(this.pageSize.width, this.pageSize.height);\n\n    switch (orientation) {\n      case PdfPageOrientation.Portrait:\n        this.pageSize = new SizeF(min, max);\n        break;\n\n      case PdfPageOrientation.Landscape:\n        this.pageSize = new SizeF(max, min);\n        break;\n    }\n  };\n  /**\n   * Creates a `clone` of the object.\n   * @private\n   */\n\n\n  PdfPageSettings.prototype.clone = function () {\n    var settings = this;\n    settings.pageMargins = this.pageMargins.clone(); // if (GetTransition() != null)\n    // {\n    //     settings.Transition = (PdfPageTransition)Transition.clone();\n    // }\n\n    return settings;\n  };\n  /**\n   * Returns `size`, shrinked by the margins.\n   * @private\n   */\n\n\n  PdfPageSettings.prototype.getActualSize = function () {\n    var width = this.width - (this.margins.left + this.margins.right);\n    var height = this.height - (this.margins.top + this.margins.bottom);\n    var size = new SizeF(width, height);\n    return size;\n  };\n  /**\n   * Sets `size` to the page aaccording to the orientation.\n   * @private\n   */\n\n\n  PdfPageSettings.prototype.setSize = function (size) {\n    var min = Math.min(size.width, size.height);\n    var max = Math.max(size.width, size.height);\n\n    if (this.orientation === PdfPageOrientation.Portrait) {\n      this.pageSize = new SizeF(min, max);\n    } else {\n      this.pageSize = new SizeF(max, min);\n    }\n  };\n\n  return PdfPageSettings;\n}();\n\nexport { PdfPageSettings };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-settings.js"],"names":["SizeF","PointF","PdfPageSize","PdfPageRotateAngle","PdfPageOrientation","PdfMargins","PdfPageSettings","margins","pageMargins","pageSize","a4","rotateAngle","RotateAngle0","pageOrientation","Portrait","pageOrigin","isRotation","setMargins","Object","defineProperty","prototype","get","set","value","setSize","enumerable","configurable","orientation","updateSize","width","height","min","Math","max","Landscape","clone","settings","getActualSize","left","right","top","bottom","size"],"mappings":"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","sourcesContent":["/**\n * PdfPageSettings.ts class for EJ2-PDF\n */\nimport { SizeF, PointF } from './../drawing/pdf-drawing';\nimport { PdfPageSize } from './pdf-page-size';\nimport { PdfPageRotateAngle, PdfPageOrientation } from './enum';\nimport { PdfMargins } from './../graphics/pdf-margins';\n/**\n * The class provides various `setting` related with PDF pages.\n */\nvar PdfPageSettings = /** @class */ (function () {\n    function PdfPageSettings(margins) {\n        //Fields\n        /**\n         * The page `margins`.\n         * @private\n         */\n        this.pageMargins = new PdfMargins();\n        /**\n         * The page `size`.\n         * @default a4\n         * @private\n         */\n        this.pageSize = PdfPageSize.a4;\n        /**\n         * The page `rotation angle`.\n         * @default PdfPageRotateAngle.RotateAngle0\n         * @private\n         */\n        this.rotateAngle = PdfPageRotateAngle.RotateAngle0;\n        /**\n         * The page `orientation`.\n         * @default PdfPageOrientation.Portrait\n         * @private\n         */\n        this.pageOrientation = PdfPageOrientation.Portrait;\n        /**\n         * The page `origin`.\n         * @default 0,0\n         * @private\n         */\n        this.pageOrigin = new PointF(0, 0);\n        /**\n         * Checks the Whether the `rotation` is applied or not.\n         * @default false\n         * @private\n         */\n        this.isRotation = false;\n        if (typeof margins === 'number') {\n            this.pageMargins.setMargins(margins);\n        }\n    }\n    Object.defineProperty(PdfPageSettings.prototype, \"size\", {\n        //Properties\n        /**\n         * Gets or sets the `size` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageSize;\n        },\n        set: function (value) {\n            this.setSize(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"orientation\", {\n        /**\n         * Gets or sets the page `orientation`.\n         * @private\n         */\n        get: function () {\n            return this.pageOrientation;\n        },\n        set: function (orientation) {\n            if (this.pageOrientation !== orientation) {\n                this.pageOrientation = orientation;\n                this.updateSize(orientation);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"margins\", {\n        /**\n         * Gets or sets the `margins` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageMargins;\n        },\n        set: function (value) {\n            this.pageMargins = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"width\", {\n        /**\n         * Gets or sets the `width` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageSize.width;\n        },\n        set: function (value) {\n            this.pageSize.width = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"height\", {\n        /**\n         * Gets or sets the `height` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageSize.height;\n        },\n        set: function (value) {\n            this.pageSize.height = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"origin\", {\n        /**\n         * Gets or sets the `origin` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageOrigin;\n        },\n        set: function (value) {\n            this.pageOrigin = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"rotate\", {\n        /**\n         * Gets or sets the number of degrees by which the page should be `rotated` clockwise when displayed or printed.\n         * @private\n         */\n        get: function () {\n            return this.rotateAngle;\n        },\n        set: function (value) {\n            this.rotateAngle = value;\n            this.isRotation = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Methods\n    /**\n     * `Update page size` depending on orientation.\n     * @private\n     */\n    PdfPageSettings.prototype.updateSize = function (orientation) {\n        var min = Math.min(this.pageSize.width, this.pageSize.height);\n        var max = Math.max(this.pageSize.width, this.pageSize.height);\n        switch (orientation) {\n            case PdfPageOrientation.Portrait:\n                this.pageSize = new SizeF(min, max);\n                break;\n            case PdfPageOrientation.Landscape:\n                this.pageSize = new SizeF(max, min);\n                break;\n        }\n    };\n    /**\n     * Creates a `clone` of the object.\n     * @private\n     */\n    PdfPageSettings.prototype.clone = function () {\n        var settings = this;\n        settings.pageMargins = this.pageMargins.clone();\n        // if (GetTransition() != null)\n        // {\n        //     settings.Transition = (PdfPageTransition)Transition.clone();\n        // }\n        return settings;\n    };\n    /**\n     * Returns `size`, shrinked by the margins.\n     * @private\n     */\n    PdfPageSettings.prototype.getActualSize = function () {\n        var width = this.width - (this.margins.left + this.margins.right);\n        var height = this.height - (this.margins.top + this.margins.bottom);\n        var size = new SizeF(width, height);\n        return size;\n    };\n    /**\n     * Sets `size` to the page aaccording to the orientation.\n     * @private\n     */\n    PdfPageSettings.prototype.setSize = function (size) {\n        var min = Math.min(size.width, size.height);\n        var max = Math.max(size.width, size.height);\n        if (this.orientation === PdfPageOrientation.Portrait) {\n            this.pageSize = new SizeF(min, max);\n        }\n        else {\n            this.pageSize = new SizeF(max, min);\n        }\n    };\n    return PdfPageSettings;\n}());\nexport { PdfPageSettings };\n"]},"metadata":{},"sourceType":"module"}