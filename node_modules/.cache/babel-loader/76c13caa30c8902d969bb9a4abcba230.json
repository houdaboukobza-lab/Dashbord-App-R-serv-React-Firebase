{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfWriter } from './../input-output/pdf-writer';\nimport { PdfMainObjectCollection } from './../input-output/pdf-main-object-collection';\nimport { PdfDocumentBase } from './pdf-document-base';\nimport { PdfCrossTable } from './../input-output/pdf-cross-table';\nimport { PdfCatalog } from './pdf-catalog';\nimport { PdfPageSettings } from './../pages/pdf-page-settings';\nimport { PdfSectionCollection } from './../pages/pdf-section-collection';\nimport { PdfDocumentPageCollection } from './../pages/pdf-document-page-collection';\nimport { PdfCacheCollection } from './../general/pdf-cache-collection';\nimport { PdfColorSpace } from './../graphics/enum';\nimport { PdfDocumentTemplate } from './pdf-document-template';\nimport { PdfFontFamily } from './../graphics/fonts/enum';\nimport { PdfStandardFont } from './../graphics/fonts/pdf-standard-font';\n/**\n * Represents a PDF document and can be used to create a new PDF document from the scratch.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\n\nvar PdfDocument =\n/** @class */\nfunction (_super) {\n  __extends(PdfDocument, _super);\n\n  function PdfDocument(isMerging) {\n    var _this = _super.call(this) || this;\n    /**\n     * Default `margin` value.\n     * @default 40.0\n     * @private\n     */\n\n\n    _this.defaultMargin = 40.0;\n    /**\n     * Internal variable to store instance of `StreamWriter` classes..\n     * @default null\n     * @private\n     */\n\n    _this.streamWriter = null;\n    _this.document = _this;\n    var isMerge = false;\n\n    if (typeof isMerging === 'undefined') {\n      PdfDocument.cacheCollection = new PdfCacheCollection();\n      isMerge = false;\n    } else {\n      isMerge = isMerging;\n    }\n\n    var objects = new PdfMainObjectCollection();\n\n    _this.setMainObjectCollection(objects);\n\n    var crossTable = new PdfCrossTable();\n    crossTable.isMerging = isMerge;\n    crossTable.document = _this;\n\n    _this.setCrossTable(crossTable);\n\n    var catalog = new PdfCatalog();\n\n    _this.setCatalog(catalog);\n\n    objects.add(catalog);\n    catalog.position = -1;\n    _this.sectionCollection = new PdfSectionCollection(_this);\n    _this.documentPageCollection = new PdfDocumentPageCollection(_this);\n    catalog.pages = _this.sectionCollection;\n    return _this;\n  }\n\n  Object.defineProperty(PdfDocument, \"defaultFont\", {\n    //Properties\n\n    /**\n     * Gets the `default font`. It is used for complex objects when font is not explicitly defined.\n     * @private\n     */\n    get: function () {\n      if (this.defaultStandardFont == null) {\n        this.defaultStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 8);\n      }\n\n      return this.defaultStandardFont;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"sections\", {\n    /**\n     * Gets the collection of the `sections` in the document.\n     * @private\n     */\n    get: function () {\n      return this.sectionCollection;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"pageSettings\", {\n    /**\n     * Gets the document's page setting.\n     * @public\n     */\n    get: function () {\n      if (this.settings == null) {\n        this.settings = new PdfPageSettings(this.defaultMargin);\n      }\n\n      return this.settings;\n    },\n\n    /**\n     * Sets the document's page setting.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     *\n     * // sets the right margin of the page\n     * document.pageSettings.margins.right = 0;\n     * // set the page size.\n     * document.pageSettings.size = new SizeF(500, 500);\n     * // change the page orientation to landscape\n     * document.pageSettings.orientation = PdfPageOrientation.Landscape;\n     * // apply 90 degree rotation on the page\n     * document.pageSettings.rotate = PdfPageRotateAngle.RotateAngle90;\n     *\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // set the specified Point\n     * let point : PointF = new PointF(page1.getClientSize().width - 200, page1.getClientSize().height - 200);\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, point);\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    set: function (value) {\n      this.settings = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"pages\", {\n    /**\n     * Represents the collection of pages in the PDF document.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * //\n     * // get the collection of pages in the document\n     * let pageCollection : PdfDocumentPageCollection  = document.pages;\n     * //\n     * // add pages\n     * let page1 : PdfPage = pageCollection.add();\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    get: function () {\n      return this.documentPageCollection;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument, \"cache\", {\n    /**\n     * Gets collection of the `cached objects`.\n     * @private\n     */\n    get: function () {\n      if (typeof PdfDocument.cacheCollection === 'undefined' || PdfDocument.cacheCollection == null) {\n        return new PdfCacheCollection();\n      }\n\n      return PdfDocument.cacheCollection;\n    },\n\n    /**\n     * Sets collection of the `cached objects`.\n     * @private\n     */\n    set: function (value) {\n      this.cacheCollection = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument, \"enableCache\", {\n    /**\n     * Gets the value of enable cache.\n     * @private\n     */\n    get: function () {\n      return this.isCacheEnabled;\n    },\n\n    /**\n     * Sets thie value of enable cache.\n     * @private\n     */\n    set: function (value) {\n      this.isCacheEnabled = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"colorSpace\", {\n    /* tslint:disable */\n\n    /**\n     * Gets or sets the `color space` of the document. This property can be used to create PDF document in RGB, Gray scale or CMYK color spaces.\n     * @private\n     */\n    get: function () {\n      if (this.pdfColorSpace === PdfColorSpace.Rgb || this.pdfColorSpace === PdfColorSpace.Cmyk || this.pdfColorSpace === PdfColorSpace.GrayScale) {\n        return this.pdfColorSpace;\n      } else {\n        return PdfColorSpace.Rgb;\n      }\n    },\n    set: function (value) {\n      if (value === PdfColorSpace.Rgb || value === PdfColorSpace.Cmyk || value === PdfColorSpace.GrayScale) {\n        this.pdfColorSpace = value;\n      } else {\n        this.pdfColorSpace = PdfColorSpace.Rgb;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocument.prototype, \"template\", {\n    /* tslint:enable */\n\n    /**\n     * Gets or sets a `template` to all pages in the document.\n     * @private\n     */\n    get: function () {\n      if (this.pageTemplate == null) {\n        this.pageTemplate = new PdfDocumentTemplate();\n      }\n\n      return this.pageTemplate;\n    },\n    set: function (value) {\n      this.pageTemplate = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfDocument.prototype.docSave = function (stream, arg2, arg3) {\n    this.checkPagesPresence();\n\n    if (stream === null) {\n      throw new Error('ArgumentNullException : stream');\n    }\n\n    this.streamWriter = stream;\n    var writer = new PdfWriter(stream);\n    writer.document = this;\n\n    if (typeof arg2 === 'boolean' && typeof arg3 === 'undefined') {\n      return this.crossTable.save(writer);\n    } else {\n      this.crossTable.save(writer, arg2);\n    }\n  };\n  /**\n   * Checks the pages `presence`.\n   * @private\n   */\n\n\n  PdfDocument.prototype.checkPagesPresence = function () {\n    if (this.pages.count === 0) {\n      this.pages.add();\n    }\n  };\n  /**\n   * disposes the current instance of `PdfDocument` class.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // add a new page to the document\n   * let page1 : PdfPage = document.pages.add();\n   * // set the font\n   * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n   * // create black brush\n   * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n   * // draw the text\n   * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n   * // save the document\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   */\n\n\n  PdfDocument.prototype.destroy = function () {\n    this.catalog = undefined;\n    this.colorSpace = undefined;\n    this.currentSavingObj = undefined;\n    this.documentPageCollection = undefined;\n    this.isStreamCopied = undefined;\n    this.pageSettings = undefined;\n    this.pageTemplate = undefined;\n    this.pdfColorSpace = undefined;\n    this.sectionCollection = undefined;\n    PdfDocument.cache.destroy();\n    this.crossTable.pdfObjects.destroy();\n    PdfDocument.cache = undefined;\n    this.streamWriter.destroy();\n  };\n  /**\n   * `Font` used in complex objects to draw strings and text when it is not defined explicitly.\n   * @default null\n   * @private\n   */\n\n\n  PdfDocument.defaultStandardFont = null;\n  /**\n   * Indicates whether enable cache or not\n   * @default true\n   * @private\n   */\n\n  PdfDocument.isCacheEnabled = true;\n  return PdfDocument;\n}(PdfDocumentBase);\n\nexport { PdfDocument };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-document.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfWriter","PdfMainObjectCollection","PdfDocumentBase","PdfCrossTable","PdfCatalog","PdfPageSettings","PdfSectionCollection","PdfDocumentPageCollection","PdfCacheCollection","PdfColorSpace","PdfDocumentTemplate","PdfFontFamily","PdfStandardFont","PdfDocument","_super","isMerging","_this","call","defaultMargin","streamWriter","document","isMerge","cacheCollection","objects","setMainObjectCollection","crossTable","setCrossTable","catalog","setCatalog","add","position","sectionCollection","documentPageCollection","pages","defineProperty","get","defaultStandardFont","Helvetica","enumerable","configurable","settings","set","value","isCacheEnabled","pdfColorSpace","Rgb","Cmyk","GrayScale","pageTemplate","docSave","stream","arg2","arg3","checkPagesPresence","Error","writer","save","count","destroy","undefined","colorSpace","currentSavingObj","isStreamCopied","pageSettings","cache","pdfObjects"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfWriter } from './../input-output/pdf-writer';\nimport { PdfMainObjectCollection } from './../input-output/pdf-main-object-collection';\nimport { PdfDocumentBase } from './pdf-document-base';\nimport { PdfCrossTable } from './../input-output/pdf-cross-table';\nimport { PdfCatalog } from './pdf-catalog';\nimport { PdfPageSettings } from './../pages/pdf-page-settings';\nimport { PdfSectionCollection } from './../pages/pdf-section-collection';\nimport { PdfDocumentPageCollection } from './../pages/pdf-document-page-collection';\nimport { PdfCacheCollection } from './../general/pdf-cache-collection';\nimport { PdfColorSpace } from './../graphics/enum';\nimport { PdfDocumentTemplate } from './pdf-document-template';\nimport { PdfFontFamily } from './../graphics/fonts/enum';\nimport { PdfStandardFont } from './../graphics/fonts/pdf-standard-font';\n/**\n * Represents a PDF document and can be used to create a new PDF document from the scratch.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfDocument = /** @class */ (function (_super) {\n    __extends(PdfDocument, _super);\n    function PdfDocument(isMerging) {\n        var _this = _super.call(this) || this;\n        /**\n         * Default `margin` value.\n         * @default 40.0\n         * @private\n         */\n        _this.defaultMargin = 40.0;\n        /**\n         * Internal variable to store instance of `StreamWriter` classes..\n         * @default null\n         * @private\n         */\n        _this.streamWriter = null;\n        _this.document = _this;\n        var isMerge = false;\n        if (typeof isMerging === 'undefined') {\n            PdfDocument.cacheCollection = new PdfCacheCollection();\n            isMerge = false;\n        }\n        else {\n            isMerge = isMerging;\n        }\n        var objects = new PdfMainObjectCollection();\n        _this.setMainObjectCollection(objects);\n        var crossTable = new PdfCrossTable();\n        crossTable.isMerging = isMerge;\n        crossTable.document = _this;\n        _this.setCrossTable(crossTable);\n        var catalog = new PdfCatalog();\n        _this.setCatalog(catalog);\n        objects.add(catalog);\n        catalog.position = -1;\n        _this.sectionCollection = new PdfSectionCollection(_this);\n        _this.documentPageCollection = new PdfDocumentPageCollection(_this);\n        catalog.pages = _this.sectionCollection;\n        return _this;\n    }\n    Object.defineProperty(PdfDocument, \"defaultFont\", {\n        //Properties\n        /**\n         * Gets the `default font`. It is used for complex objects when font is not explicitly defined.\n         * @private\n         */\n        get: function () {\n            if (this.defaultStandardFont == null) {\n                this.defaultStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 8);\n            }\n            return this.defaultStandardFont;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"sections\", {\n        /**\n         * Gets the collection of the `sections` in the document.\n         * @private\n         */\n        get: function () {\n            return this.sectionCollection;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"pageSettings\", {\n        /**\n         * Gets the document's page setting.\n         * @public\n         */\n        get: function () {\n            if (this.settings == null) {\n                this.settings = new PdfPageSettings(this.defaultMargin);\n            }\n            return this.settings;\n        },\n        /**\n         * Sets the document's page setting.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         *\n         * // sets the right margin of the page\n         * document.pageSettings.margins.right = 0;\n         * // set the page size.\n         * document.pageSettings.size = new SizeF(500, 500);\n         * // change the page orientation to landscape\n         * document.pageSettings.orientation = PdfPageOrientation.Landscape;\n         * // apply 90 degree rotation on the page\n         * document.pageSettings.rotate = PdfPageRotateAngle.RotateAngle90;\n         *\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * // set the specified Point\n         * let point : PointF = new PointF(page1.getClientSize().width - 200, page1.getClientSize().height - 200);\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, point);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this.settings = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"pages\", {\n        /**\n         * Represents the collection of pages in the PDF document.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * //\n         * // get the collection of pages in the document\n         * let pageCollection : PdfDocumentPageCollection  = document.pages;\n         * //\n         * // add pages\n         * let page1 : PdfPage = pageCollection.add();\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.documentPageCollection;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument, \"cache\", {\n        /**\n         * Gets collection of the `cached objects`.\n         * @private\n         */\n        get: function () {\n            if (typeof PdfDocument.cacheCollection === 'undefined' || PdfDocument.cacheCollection == null) {\n                return new PdfCacheCollection();\n            }\n            return PdfDocument.cacheCollection;\n        },\n        /**\n         * Sets collection of the `cached objects`.\n         * @private\n         */\n        set: function (value) {\n            this.cacheCollection = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument, \"enableCache\", {\n        /**\n         * Gets the value of enable cache.\n         * @private\n         */\n        get: function () {\n            return this.isCacheEnabled;\n        },\n        /**\n         * Sets thie value of enable cache.\n         * @private\n         */\n        set: function (value) {\n            this.isCacheEnabled = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"colorSpace\", {\n        /* tslint:disable */\n        /**\n         * Gets or sets the `color space` of the document. This property can be used to create PDF document in RGB, Gray scale or CMYK color spaces.\n         * @private\n         */\n        get: function () {\n            if ((this.pdfColorSpace === PdfColorSpace.Rgb) || ((this.pdfColorSpace === PdfColorSpace.Cmyk)\n                || (this.pdfColorSpace === PdfColorSpace.GrayScale))) {\n                return this.pdfColorSpace;\n            }\n            else {\n                return PdfColorSpace.Rgb;\n            }\n        },\n        set: function (value) {\n            if ((value === PdfColorSpace.Rgb) || ((value === PdfColorSpace.Cmyk) ||\n                (value === PdfColorSpace.GrayScale))) {\n                this.pdfColorSpace = value;\n            }\n            else {\n                this.pdfColorSpace = PdfColorSpace.Rgb;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"template\", {\n        /* tslint:enable */\n        /**\n         * Gets or sets a `template` to all pages in the document.\n         * @private\n         */\n        get: function () {\n            if (this.pageTemplate == null) {\n                this.pageTemplate = new PdfDocumentTemplate();\n            }\n            return this.pageTemplate;\n        },\n        set: function (value) {\n            this.pageTemplate = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfDocument.prototype.docSave = function (stream, arg2, arg3) {\n        this.checkPagesPresence();\n        if (stream === null) {\n            throw new Error('ArgumentNullException : stream');\n        }\n        this.streamWriter = stream;\n        var writer = new PdfWriter(stream);\n        writer.document = this;\n        if (typeof arg2 === 'boolean' && typeof arg3 === 'undefined') {\n            return this.crossTable.save(writer);\n        }\n        else {\n            this.crossTable.save(writer, arg2);\n        }\n    };\n    /**\n     * Checks the pages `presence`.\n     * @private\n     */\n    PdfDocument.prototype.checkPagesPresence = function () {\n        if (this.pages.count === 0) {\n            this.pages.add();\n        }\n    };\n    /**\n     * disposes the current instance of `PdfDocument` class.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a new page to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set the font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // create black brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfDocument.prototype.destroy = function () {\n        this.catalog = undefined;\n        this.colorSpace = undefined;\n        this.currentSavingObj = undefined;\n        this.documentPageCollection = undefined;\n        this.isStreamCopied = undefined;\n        this.pageSettings = undefined;\n        this.pageTemplate = undefined;\n        this.pdfColorSpace = undefined;\n        this.sectionCollection = undefined;\n        PdfDocument.cache.destroy();\n        this.crossTable.pdfObjects.destroy();\n        PdfDocument.cache = undefined;\n        this.streamWriter.destroy();\n    };\n    /**\n     * `Font` used in complex objects to draw strings and text when it is not defined explicitly.\n     * @default null\n     * @private\n     */\n    PdfDocument.defaultStandardFont = null;\n    /**\n     * Indicates whether enable cache or not\n     * @default true\n     * @private\n     */\n    PdfDocument.isCacheEnabled = true;\n    return PdfDocument;\n}(PdfDocumentBase));\nexport { PdfDocument };\n"]},"metadata":{},"sourceType":"module"}