{"ast":null,"code":"/**\n * public Enum for `PdfFontStyle`.\n * @private\n */\nexport var PdfFontStyle;\n\n(function (PdfFontStyle) {\n  /**\n   * Specifies the type of `Regular`.\n   * @private\n   */\n  PdfFontStyle[PdfFontStyle[\"Regular\"] = 0] = \"Regular\";\n  /**\n   * Specifies the type of `Bold`.\n   * @private\n   */\n\n  PdfFontStyle[PdfFontStyle[\"Bold\"] = 1] = \"Bold\";\n  /**\n   * Specifies the type of `Italic`.\n   * @private\n   */\n\n  PdfFontStyle[PdfFontStyle[\"Italic\"] = 2] = \"Italic\";\n  /**\n   * Specifies the type of `Underline`.\n   * @private\n   */\n\n  PdfFontStyle[PdfFontStyle[\"Underline\"] = 4] = \"Underline\";\n  /**\n   * Specifies the type of `Strikeout`.\n   * @private\n   */\n\n  PdfFontStyle[PdfFontStyle[\"Strikeout\"] = 8] = \"Strikeout\";\n})(PdfFontStyle || (PdfFontStyle = {}));\n/**\n * Specifies the font family from the standard font.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // create new standard font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * ```\n */\n\n\nexport var PdfFontFamily;\n\n(function (PdfFontFamily) {\n  /**\n   * Specifies the `Helvetica` font.\n   */\n  PdfFontFamily[PdfFontFamily[\"Helvetica\"] = 0] = \"Helvetica\";\n  /**\n   * Specifies the `Courier` font.\n   */\n\n  PdfFontFamily[PdfFontFamily[\"Courier\"] = 1] = \"Courier\";\n  /**\n   * Specifies the `TimesRoman` font.\n   */\n\n  PdfFontFamily[PdfFontFamily[\"TimesRoman\"] = 2] = \"TimesRoman\";\n  /**\n   * Specifies the `Symbol` font.\n   */\n\n  PdfFontFamily[PdfFontFamily[\"Symbol\"] = 3] = \"Symbol\";\n  /**\n   * Specifies the `ZapfDingbats` font.\n   */\n\n  PdfFontFamily[PdfFontFamily[\"ZapfDingbats\"] = 4] = \"ZapfDingbats\";\n})(PdfFontFamily || (PdfFontFamily = {}));\n/**\n * public Enum for `PdfFontType`.\n * @private\n */\n\n\nexport var PdfFontType;\n\n(function (PdfFontType) {\n  /**\n   * Specifies the type of `Standard`.\n   * @private\n   */\n  PdfFontType[PdfFontType[\"Standard\"] = 0] = \"Standard\";\n  /**\n   * Specifies the type of `TrueType`.\n   * @private\n   */\n\n  PdfFontType[PdfFontType[\"TrueType\"] = 1] = \"TrueType\";\n  /**\n   * Specifies the type of `TrueTypeEmbedded`.\n   * @private\n   */\n\n  PdfFontType[PdfFontType[\"TrueTypeEmbedded\"] = 2] = \"TrueTypeEmbedded\";\n})(PdfFontType || (PdfFontType = {}));\n/**\n * public Enum for `PdfWordWrapType`.\n * @private\n */\n\n\nexport var PdfWordWrapType;\n\n(function (PdfWordWrapType) {\n  /**\n   * Specifies the type of `None`.\n   * @private\n   */\n  PdfWordWrapType[PdfWordWrapType[\"None\"] = 0] = \"None\";\n  /**\n   * Specifies the type of `Word`.\n   * @private\n   */\n\n  PdfWordWrapType[PdfWordWrapType[\"Word\"] = 1] = \"Word\";\n  /**\n   * Specifies the type of `WordOnly`.\n   * @private\n   */\n\n  PdfWordWrapType[PdfWordWrapType[\"WordOnly\"] = 2] = \"WordOnly\";\n  /**\n   * Specifies the type of `Character`.\n   * @private\n   */\n\n  PdfWordWrapType[PdfWordWrapType[\"Character\"] = 3] = \"Character\";\n})(PdfWordWrapType || (PdfWordWrapType = {}));\n/**\n * public Enum for `PdfSubSuperScript`.\n * @private\n */\n\n\nexport var PdfSubSuperScript;\n\n(function (PdfSubSuperScript) {\n  /**\n   * Specifies the type of `None`.\n   * @private\n   */\n  PdfSubSuperScript[PdfSubSuperScript[\"None\"] = 0] = \"None\";\n  /**\n   * Specifies the type of `SuperScript`.\n   * @private\n   */\n\n  PdfSubSuperScript[PdfSubSuperScript[\"SuperScript\"] = 1] = \"SuperScript\";\n  /**\n   * Specifies the type of `SubScript`.\n   * @private\n   */\n\n  PdfSubSuperScript[PdfSubSuperScript[\"SubScript\"] = 2] = \"SubScript\";\n})(PdfSubSuperScript || (PdfSubSuperScript = {}));\n/**\n * public Enum for `FontEncoding`.\n * @private\n */\n\n\nexport var FontEncoding;\n\n(function (FontEncoding) {\n  /**\n   * Specifies the type of `Unknown`.\n   * @private\n   */\n  FontEncoding[FontEncoding[\"Unknown\"] = 0] = \"Unknown\";\n  /**\n   * Specifies the type of `StandardEncoding`.\n   * @private\n   */\n\n  FontEncoding[FontEncoding[\"StandardEncoding\"] = 1] = \"StandardEncoding\";\n  /**\n   * Specifies the type of `MacRomanEncoding`.\n   * @private\n   */\n\n  FontEncoding[FontEncoding[\"MacRomanEncoding\"] = 2] = \"MacRomanEncoding\";\n  /**\n   * Specifies the type of `MacExpertEncoding`.\n   * @private\n   */\n\n  FontEncoding[FontEncoding[\"MacExpertEncoding\"] = 3] = \"MacExpertEncoding\";\n  /**\n   * Specifies the type of `WinAnsiEncoding`.\n   * @private\n   */\n\n  FontEncoding[FontEncoding[\"WinAnsiEncoding\"] = 4] = \"WinAnsiEncoding\";\n  /**\n   * Specifies the type of `PdfDocEncoding`.\n   * @private\n   */\n\n  FontEncoding[FontEncoding[\"PdfDocEncoding\"] = 5] = \"PdfDocEncoding\";\n  /**\n   * Specifies the type of `IdentityH`.\n   * @private\n   */\n\n  FontEncoding[FontEncoding[\"IdentityH\"] = 6] = \"IdentityH\";\n})(FontEncoding || (FontEncoding = {}));\n/**\n * public Enum for `TtfCmapFormat`.\n * @private\n */\n\n\nexport var TtfCmapFormat;\n\n(function (TtfCmapFormat) {\n  /**\n   * This is the Apple standard character to glyph index mapping table.\n   * @private\n   */\n  TtfCmapFormat[TtfCmapFormat[\"Apple\"] = 0] = \"Apple\";\n  /**\n   * This is the Microsoft standard character to glyph index mapping table.\n   * @private\n   */\n\n  TtfCmapFormat[TtfCmapFormat[\"Microsoft\"] = 4] = \"Microsoft\";\n  /**\n   * Format 6: Trimmed table mapping.\n   * @private\n   */\n\n  TtfCmapFormat[TtfCmapFormat[\"Trimmed\"] = 6] = \"Trimmed\";\n})(TtfCmapFormat || (TtfCmapFormat = {}));\n/**\n * Enumerator that implements CMAP encodings.\n * @private\n */\n\n\nexport var TtfCmapEncoding;\n\n(function (TtfCmapEncoding) {\n  /**\n   * Unknown encoding.\n   * @private\n   */\n  TtfCmapEncoding[TtfCmapEncoding[\"Unknown\"] = 0] = \"Unknown\";\n  /**\n   * When building a symbol font for Windows.\n   * @private\n   */\n\n  TtfCmapEncoding[TtfCmapEncoding[\"Symbol\"] = 1] = \"Symbol\";\n  /**\n   * When building a Unicode font for Windows.\n   * @private\n   */\n\n  TtfCmapEncoding[TtfCmapEncoding[\"Unicode\"] = 2] = \"Unicode\";\n  /**\n   * For font that will be used on a Macintosh.\n   * @private\n   */\n\n  TtfCmapEncoding[TtfCmapEncoding[\"Macintosh\"] = 3] = \"Macintosh\";\n})(TtfCmapEncoding || (TtfCmapEncoding = {}));\n/**\n * Ttf platform ID.\n * @private\n */\n\n\nexport var TtfPlatformID;\n\n(function (TtfPlatformID) {\n  /**\n   * Apple platform.\n   * @private\n   */\n  TtfPlatformID[TtfPlatformID[\"AppleUnicode\"] = 0] = \"AppleUnicode\";\n  /**\n   * Macintosh platform.\n   * @private\n   */\n\n  TtfPlatformID[TtfPlatformID[\"Macintosh\"] = 1] = \"Macintosh\";\n  /**\n   * Iso platform.\n   * @private\n   */\n\n  TtfPlatformID[TtfPlatformID[\"Iso\"] = 2] = \"Iso\";\n  /**\n   * Microsoft platform.\n   * @private\n   */\n\n  TtfPlatformID[TtfPlatformID[\"Microsoft\"] = 3] = \"Microsoft\";\n})(TtfPlatformID || (TtfPlatformID = {}));\n/**\n * Microsoft encoding ID.\n * @private\n */\n\n\nexport var TtfMicrosoftEncodingID;\n\n(function (TtfMicrosoftEncodingID) {\n  /**\n   * Undefined encoding.\n   * @private\n   */\n  TtfMicrosoftEncodingID[TtfMicrosoftEncodingID[\"Undefined\"] = 0] = \"Undefined\";\n  /**\n   * Unicode encoding.\n   * @private\n   */\n\n  TtfMicrosoftEncodingID[TtfMicrosoftEncodingID[\"Unicode\"] = 1] = \"Unicode\";\n})(TtfMicrosoftEncodingID || (TtfMicrosoftEncodingID = {}));\n/**\n * Macintosh encoding ID.\n * @private\n */\n\n\nexport var TtfMacintoshEncodingID;\n\n(function (TtfMacintoshEncodingID) {\n  /**\n   * Roman encoding.\n   * @private\n   */\n  TtfMacintoshEncodingID[TtfMacintoshEncodingID[\"Roman\"] = 0] = \"Roman\";\n  /**\n   * Japanese encoding.\n   * @private\n   */\n\n  TtfMacintoshEncodingID[TtfMacintoshEncodingID[\"Japanese\"] = 1] = \"Japanese\";\n  /**\n   * Chinese encoding.\n   * @private\n   */\n\n  TtfMacintoshEncodingID[TtfMacintoshEncodingID[\"Chinese\"] = 2] = \"Chinese\";\n})(TtfMacintoshEncodingID || (TtfMacintoshEncodingID = {}));\n/**\n * Enumerator that implements font descriptor flags.\n * @private\n */\n\n\nexport var FontDescriptorFlags;\n\n(function (FontDescriptorFlags) {\n  /**\n   * All glyphs have the same width (as opposed to proportional or variable-pitch fonts, which have different widths).\n   * @private\n   */\n  FontDescriptorFlags[FontDescriptorFlags[\"FixedPitch\"] = 1] = \"FixedPitch\";\n  /**\n   * Glyphs have serifs, which are short strokes drawn at an angle on the top and\n   * bottom of glyph stems (as opposed to sans serif fonts, which do not).\n   * @private\n   */\n\n  FontDescriptorFlags[FontDescriptorFlags[\"Serif\"] = 2] = \"Serif\";\n  /**\n   * Font contains glyphs outside the Adobe standard Latin character set. The\n   * flag and the nonsymbolic flag cannot both be set or both be clear.\n   * @private\n   */\n\n  FontDescriptorFlags[FontDescriptorFlags[\"Symbolic\"] = 4] = \"Symbolic\";\n  /**\n   * Glyphs resemble cursive handwriting.\n   * @private\n   */\n\n  FontDescriptorFlags[FontDescriptorFlags[\"Script\"] = 8] = \"Script\";\n  /**\n   * Font uses the Adobe standard Latin character set or a subset of it.\n   * @private\n   */\n\n  FontDescriptorFlags[FontDescriptorFlags[\"Nonsymbolic\"] = 32] = \"Nonsymbolic\";\n  /**\n   * Glyphs have dominant vertical strokes that are slanted.\n   * @private\n   */\n\n  FontDescriptorFlags[FontDescriptorFlags[\"Italic\"] = 64] = \"Italic\";\n  /**\n   * Bold font.\n   * @private\n   */\n\n  FontDescriptorFlags[FontDescriptorFlags[\"ForceBold\"] = 262144] = \"ForceBold\";\n})(FontDescriptorFlags || (FontDescriptorFlags = {}));\n/**\n * true type font composite glyph flags.\n * @private\n */\n\n\nexport var TtfCompositeGlyphFlags;\n\n(function (TtfCompositeGlyphFlags) {\n  /**\n   * The Arg1And2AreWords.\n   * @private\n   */\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"Arg1And2AreWords\"] = 1] = \"Arg1And2AreWords\";\n  /**\n   * The ArgsAreXyValues.\n   * @private\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"ArgsAreXyValues\"] = 2] = \"ArgsAreXyValues\";\n  /**\n   * The RoundXyToGrid.\n   * @private\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"RoundXyToGrid\"] = 4] = \"RoundXyToGrid\";\n  /**\n   * The WeHaveScale.\n   * @private\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveScale\"] = 8] = \"WeHaveScale\";\n  /**\n   * The Reserved.\n   * @private\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"Reserved\"] = 16] = \"Reserved\";\n  /**\n   * The MoreComponents.\n   * @private\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"MoreComponents\"] = 32] = \"MoreComponents\";\n  /**\n   * The WeHaveAnXyScale.\n   * @private\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveAnXyScale\"] = 64] = \"WeHaveAnXyScale\";\n  /**\n   * The WeHaveTwoByTwo\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveTwoByTwo\"] = 128] = \"WeHaveTwoByTwo\";\n  /**\n   * The WeHaveInstructions.\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveInstructions\"] = 256] = \"WeHaveInstructions\";\n  /**\n   * The UseMyMetrics.\n   */\n\n  TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"UseMyMetrics\"] = 512] = \"UseMyMetrics\";\n})(TtfCompositeGlyphFlags || (TtfCompositeGlyphFlags = {}));","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/enum.js"],"names":["PdfFontStyle","PdfFontFamily","PdfFontType","PdfWordWrapType","PdfSubSuperScript","FontEncoding","TtfCmapFormat","TtfCmapEncoding","TtfPlatformID","TtfMicrosoftEncodingID","TtfMacintoshEncodingID","FontDescriptorFlags","TtfCompositeGlyphFlags"],"mappings":"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","sourcesContent":["/**\n * public Enum for `PdfFontStyle`.\n * @private\n */\nexport var PdfFontStyle;\n(function (PdfFontStyle) {\n    /**\n     * Specifies the type of `Regular`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Regular\"] = 0] = \"Regular\";\n    /**\n     * Specifies the type of `Bold`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Bold\"] = 1] = \"Bold\";\n    /**\n     * Specifies the type of `Italic`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Italic\"] = 2] = \"Italic\";\n    /**\n     * Specifies the type of `Underline`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Underline\"] = 4] = \"Underline\";\n    /**\n     * Specifies the type of `Strikeout`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Strikeout\"] = 8] = \"Strikeout\";\n})(PdfFontStyle || (PdfFontStyle = {}));\n/**\n * Specifies the font family from the standard font.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // create new standard font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * ```\n */\nexport var PdfFontFamily;\n(function (PdfFontFamily) {\n    /**\n     * Specifies the `Helvetica` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"Helvetica\"] = 0] = \"Helvetica\";\n    /**\n     * Specifies the `Courier` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"Courier\"] = 1] = \"Courier\";\n    /**\n     * Specifies the `TimesRoman` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"TimesRoman\"] = 2] = \"TimesRoman\";\n    /**\n     * Specifies the `Symbol` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"Symbol\"] = 3] = \"Symbol\";\n    /**\n     * Specifies the `ZapfDingbats` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"ZapfDingbats\"] = 4] = \"ZapfDingbats\";\n})(PdfFontFamily || (PdfFontFamily = {}));\n/**\n * public Enum for `PdfFontType`.\n * @private\n */\nexport var PdfFontType;\n(function (PdfFontType) {\n    /**\n     * Specifies the type of `Standard`.\n     * @private\n     */\n    PdfFontType[PdfFontType[\"Standard\"] = 0] = \"Standard\";\n    /**\n     * Specifies the type of `TrueType`.\n     * @private\n     */\n    PdfFontType[PdfFontType[\"TrueType\"] = 1] = \"TrueType\";\n    /**\n     * Specifies the type of `TrueTypeEmbedded`.\n     * @private\n     */\n    PdfFontType[PdfFontType[\"TrueTypeEmbedded\"] = 2] = \"TrueTypeEmbedded\";\n})(PdfFontType || (PdfFontType = {}));\n/**\n * public Enum for `PdfWordWrapType`.\n * @private\n */\nexport var PdfWordWrapType;\n(function (PdfWordWrapType) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfWordWrapType[PdfWordWrapType[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Word`.\n     * @private\n     */\n    PdfWordWrapType[PdfWordWrapType[\"Word\"] = 1] = \"Word\";\n    /**\n     * Specifies the type of `WordOnly`.\n     * @private\n     */\n    PdfWordWrapType[PdfWordWrapType[\"WordOnly\"] = 2] = \"WordOnly\";\n    /**\n     * Specifies the type of `Character`.\n     * @private\n     */\n    PdfWordWrapType[PdfWordWrapType[\"Character\"] = 3] = \"Character\";\n})(PdfWordWrapType || (PdfWordWrapType = {}));\n/**\n * public Enum for `PdfSubSuperScript`.\n * @private\n */\nexport var PdfSubSuperScript;\n(function (PdfSubSuperScript) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfSubSuperScript[PdfSubSuperScript[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `SuperScript`.\n     * @private\n     */\n    PdfSubSuperScript[PdfSubSuperScript[\"SuperScript\"] = 1] = \"SuperScript\";\n    /**\n     * Specifies the type of `SubScript`.\n     * @private\n     */\n    PdfSubSuperScript[PdfSubSuperScript[\"SubScript\"] = 2] = \"SubScript\";\n})(PdfSubSuperScript || (PdfSubSuperScript = {}));\n/**\n * public Enum for `FontEncoding`.\n * @private\n */\nexport var FontEncoding;\n(function (FontEncoding) {\n    /**\n     * Specifies the type of `Unknown`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * Specifies the type of `StandardEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"StandardEncoding\"] = 1] = \"StandardEncoding\";\n    /**\n     * Specifies the type of `MacRomanEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"MacRomanEncoding\"] = 2] = \"MacRomanEncoding\";\n    /**\n     * Specifies the type of `MacExpertEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"MacExpertEncoding\"] = 3] = \"MacExpertEncoding\";\n    /**\n     * Specifies the type of `WinAnsiEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"WinAnsiEncoding\"] = 4] = \"WinAnsiEncoding\";\n    /**\n     * Specifies the type of `PdfDocEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"PdfDocEncoding\"] = 5] = \"PdfDocEncoding\";\n    /**\n     * Specifies the type of `IdentityH`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"IdentityH\"] = 6] = \"IdentityH\";\n})(FontEncoding || (FontEncoding = {}));\n/**\n * public Enum for `TtfCmapFormat`.\n * @private\n */\nexport var TtfCmapFormat;\n(function (TtfCmapFormat) {\n    /**\n     * This is the Apple standard character to glyph index mapping table.\n     * @private\n     */\n    TtfCmapFormat[TtfCmapFormat[\"Apple\"] = 0] = \"Apple\";\n    /**\n     * This is the Microsoft standard character to glyph index mapping table.\n     * @private\n     */\n    TtfCmapFormat[TtfCmapFormat[\"Microsoft\"] = 4] = \"Microsoft\";\n    /**\n     * Format 6: Trimmed table mapping.\n     * @private\n     */\n    TtfCmapFormat[TtfCmapFormat[\"Trimmed\"] = 6] = \"Trimmed\";\n})(TtfCmapFormat || (TtfCmapFormat = {}));\n/**\n * Enumerator that implements CMAP encodings.\n * @private\n */\nexport var TtfCmapEncoding;\n(function (TtfCmapEncoding) {\n    /**\n     * Unknown encoding.\n     * @private\n     */\n    TtfCmapEncoding[TtfCmapEncoding[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * When building a symbol font for Windows.\n     * @private\n     */\n    TtfCmapEncoding[TtfCmapEncoding[\"Symbol\"] = 1] = \"Symbol\";\n    /**\n     * When building a Unicode font for Windows.\n     * @private\n     */\n    TtfCmapEncoding[TtfCmapEncoding[\"Unicode\"] = 2] = \"Unicode\";\n    /**\n     * For font that will be used on a Macintosh.\n     * @private\n     */\n    TtfCmapEncoding[TtfCmapEncoding[\"Macintosh\"] = 3] = \"Macintosh\";\n})(TtfCmapEncoding || (TtfCmapEncoding = {}));\n/**\n * Ttf platform ID.\n * @private\n */\nexport var TtfPlatformID;\n(function (TtfPlatformID) {\n    /**\n     * Apple platform.\n     * @private\n     */\n    TtfPlatformID[TtfPlatformID[\"AppleUnicode\"] = 0] = \"AppleUnicode\";\n    /**\n     * Macintosh platform.\n     * @private\n     */\n    TtfPlatformID[TtfPlatformID[\"Macintosh\"] = 1] = \"Macintosh\";\n    /**\n     * Iso platform.\n     * @private\n     */\n    TtfPlatformID[TtfPlatformID[\"Iso\"] = 2] = \"Iso\";\n    /**\n     * Microsoft platform.\n     * @private\n     */\n    TtfPlatformID[TtfPlatformID[\"Microsoft\"] = 3] = \"Microsoft\";\n})(TtfPlatformID || (TtfPlatformID = {}));\n/**\n * Microsoft encoding ID.\n * @private\n */\nexport var TtfMicrosoftEncodingID;\n(function (TtfMicrosoftEncodingID) {\n    /**\n     * Undefined encoding.\n     * @private\n     */\n    TtfMicrosoftEncodingID[TtfMicrosoftEncodingID[\"Undefined\"] = 0] = \"Undefined\";\n    /**\n     * Unicode encoding.\n     * @private\n     */\n    TtfMicrosoftEncodingID[TtfMicrosoftEncodingID[\"Unicode\"] = 1] = \"Unicode\";\n})(TtfMicrosoftEncodingID || (TtfMicrosoftEncodingID = {}));\n/**\n * Macintosh encoding ID.\n * @private\n */\nexport var TtfMacintoshEncodingID;\n(function (TtfMacintoshEncodingID) {\n    /**\n     * Roman encoding.\n     * @private\n     */\n    TtfMacintoshEncodingID[TtfMacintoshEncodingID[\"Roman\"] = 0] = \"Roman\";\n    /**\n     * Japanese encoding.\n     * @private\n     */\n    TtfMacintoshEncodingID[TtfMacintoshEncodingID[\"Japanese\"] = 1] = \"Japanese\";\n    /**\n     * Chinese encoding.\n     * @private\n     */\n    TtfMacintoshEncodingID[TtfMacintoshEncodingID[\"Chinese\"] = 2] = \"Chinese\";\n})(TtfMacintoshEncodingID || (TtfMacintoshEncodingID = {}));\n/**\n * Enumerator that implements font descriptor flags.\n * @private\n */\nexport var FontDescriptorFlags;\n(function (FontDescriptorFlags) {\n    /**\n     * All glyphs have the same width (as opposed to proportional or variable-pitch fonts, which have different widths).\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"FixedPitch\"] = 1] = \"FixedPitch\";\n    /**\n     * Glyphs have serifs, which are short strokes drawn at an angle on the top and\n     * bottom of glyph stems (as opposed to sans serif fonts, which do not).\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"Serif\"] = 2] = \"Serif\";\n    /**\n     * Font contains glyphs outside the Adobe standard Latin character set. The\n     * flag and the nonsymbolic flag cannot both be set or both be clear.\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"Symbolic\"] = 4] = \"Symbolic\";\n    /**\n     * Glyphs resemble cursive handwriting.\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"Script\"] = 8] = \"Script\";\n    /**\n     * Font uses the Adobe standard Latin character set or a subset of it.\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"Nonsymbolic\"] = 32] = \"Nonsymbolic\";\n    /**\n     * Glyphs have dominant vertical strokes that are slanted.\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"Italic\"] = 64] = \"Italic\";\n    /**\n     * Bold font.\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"ForceBold\"] = 262144] = \"ForceBold\";\n})(FontDescriptorFlags || (FontDescriptorFlags = {}));\n/**\n * true type font composite glyph flags.\n * @private\n */\nexport var TtfCompositeGlyphFlags;\n(function (TtfCompositeGlyphFlags) {\n    /**\n     * The Arg1And2AreWords.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"Arg1And2AreWords\"] = 1] = \"Arg1And2AreWords\";\n    /**\n     * The ArgsAreXyValues.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"ArgsAreXyValues\"] = 2] = \"ArgsAreXyValues\";\n    /**\n     * The RoundXyToGrid.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"RoundXyToGrid\"] = 4] = \"RoundXyToGrid\";\n    /**\n     * The WeHaveScale.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveScale\"] = 8] = \"WeHaveScale\";\n    /**\n     * The Reserved.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"Reserved\"] = 16] = \"Reserved\";\n    /**\n     * The MoreComponents.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"MoreComponents\"] = 32] = \"MoreComponents\";\n    /**\n     * The WeHaveAnXyScale.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveAnXyScale\"] = 64] = \"WeHaveAnXyScale\";\n    /**\n     * The WeHaveTwoByTwo\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveTwoByTwo\"] = 128] = \"WeHaveTwoByTwo\";\n    /**\n     * The WeHaveInstructions.\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveInstructions\"] = 256] = \"WeHaveInstructions\";\n    /**\n     * The UseMyMetrics.\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"UseMyMetrics\"] = 512] = \"UseMyMetrics\";\n})(TtfCompositeGlyphFlags || (TtfCompositeGlyphFlags = {}));\n"]},"metadata":{},"sourceType":"module"}