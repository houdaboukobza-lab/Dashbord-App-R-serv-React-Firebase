{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { sum, getPoint, templateAnimate } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { ColumnSeries } from './column-series';\n/**\n * `HistogramSeries` Module used to render the histogram series.\n */\n\nvar HistogramSeries =\n/** @class */\nfunction (_super) {\n  __extends(HistogramSeries, _super);\n\n  function HistogramSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render Histogram series.\n   * @return {void}\n   * @private\n   */\n\n\n  HistogramSeries.prototype.render = function (series) {\n    _super.prototype.render.call(this, series);\n\n    if (series.showNormalDistribution) {\n      this.renderNormalDistribution(series);\n    }\n  };\n  /**\n   * To calculate bin interval for Histogram series.\n   * @return number\n   * @private\n   */\n\n\n  HistogramSeries.prototype.calculateBinInterval = function (yValues, series) {\n    var mean = sum(yValues) / yValues.length;\n    var sumValue = 0;\n\n    for (var _i = 0, yValues_1 = yValues; _i < yValues_1.length; _i++) {\n      var value = yValues_1[_i];\n      sumValue += (value - mean) * (value - mean);\n    }\n\n    series.histogramValues.mean = mean;\n    series.histogramValues.sDValue = Math.round(Math.sqrt(sumValue / yValues.length - 1));\n    series.histogramValues.binWidth = series.binInterval || Math.round(3.5 * series.histogramValues.sDValue / Math.pow(yValues.length, 1 / 3));\n  };\n  /**\n   * Add data points for Histogram series.\n   * @return {object[]}\n   * @private\n   */\n\n\n  HistogramSeries.prototype.processInternalData = function (data, series) {\n    var _a;\n\n    var updatedData = [];\n    var yValues = [];\n    var binWidth;\n    var keys = Object.keys(data);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      yValues.push(data[key][series.yName]);\n    }\n\n    series.histogramValues = {\n      yValues: yValues\n    };\n    var min = Math.min.apply(Math, series.histogramValues.yValues);\n    var max = Math.max.apply(Math, series.histogramValues.yValues);\n    this.calculateBinInterval(series.histogramValues.yValues, series);\n    binWidth = series.histogramValues.binWidth;\n    var yCount;\n\n    for (var j = 0; j < data.length;) {\n      yCount = yValues.filter(function (y) {\n        return y >= min && y < min + binWidth;\n      }).length;\n\n      if (min + binWidth === max) {\n        yCount += yValues.filter(function (y) {\n          return y >= max;\n        }).length;\n      }\n\n      updatedData.push((_a = {\n        'x': min + binWidth / 2\n      }, _a[series.yName] = yCount, _a));\n      min = min + binWidth;\n      j += yCount;\n    }\n\n    return updatedData;\n  };\n  /**\n   * Render Normal Distribution for Histogram series.\n   * @return {void}\n   * @private\n   */\n\n\n  HistogramSeries.prototype.renderNormalDistribution = function (series) {\n    var min = series.xAxis.actualRange.min;\n    var max = series.xAxis.actualRange.max;\n    var xValue;\n    var pointLocation;\n    var yValue;\n    var direction = '';\n    var startPoint = 'M';\n    var yValuesCount = series.histogramValues.yValues.length;\n    var binWidth = series.histogramValues.binWidth;\n    var mean = series.histogramValues.mean;\n    var sDValue = series.histogramValues.sDValue;\n    var pointsCount = 500;\n    var del = (max - min) / (pointsCount - 1);\n    var distributionLine;\n    var points = series.points.length;\n\n    if (points) {\n      for (var i = 0; i < pointsCount; i++) {\n        xValue = min + i * del;\n        yValue = Math.exp(-(xValue - mean) * (xValue - mean) / (2 * sDValue * sDValue)) / (sDValue * Math.sqrt(2 * Math.PI));\n        pointLocation = getPoint(xValue, yValue * binWidth * yValuesCount, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, series);\n        direction += startPoint + ' ' + pointLocation.x + ' ' + pointLocation.y + ' ';\n        startPoint = 'L';\n      }\n    }\n\n    distributionLine = series.chart.renderer.drawPath(new PathOption(series.chart.element.id + '_Series_' + series.index + '_NDLine', 'transparent', 2, series.chart.themeStyle.errorBar, series.opacity, series.dashArray, direction), new Int32Array([series.clipRect.x, series.clipRect.y]));\n    distributionLine.style.visibility = !series.chart.enableCanvas ? series.animation.enable && series.chart.animateSeries ? 'hidden' : 'visible' : null;\n\n    if (!series.chart.enableCanvas) {\n      series.seriesElement.appendChild(distributionLine);\n    }\n  };\n  /**\n   * Animates the series.\n   * @param  {Series} series - Defines the series to animate.\n   * @return {void}\n   */\n\n\n  HistogramSeries.prototype.doAnimation = function (series) {\n    _super.prototype.doAnimation.call(this, series);\n\n    if (series.showNormalDistribution) {\n      templateAnimate(series.seriesElement.lastElementChild, series.animation.duration, 500, 'FadeIn');\n    }\n  };\n  /**\n   * Get module name.\n   */\n\n\n  HistogramSeries.prototype.getModuleName = function () {\n    return 'HistogramSeries';\n    /**\n     * return the module name\n     */\n  };\n  /**\n   * To destroy the histogram series.\n   * @return {void}\n   * @private\n   */\n\n\n  HistogramSeries.prototype.destroy = function (chart) {\n    /**\n     * Destroy method performed here\n     */\n  };\n\n  return HistogramSeries;\n}(ColumnSeries);\n\nexport { HistogramSeries };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-charts/src/chart/series/histogram-series.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","sum","getPoint","templateAnimate","PathOption","ColumnSeries","HistogramSeries","_super","apply","arguments","render","series","call","showNormalDistribution","renderNormalDistribution","calculateBinInterval","yValues","mean","length","sumValue","_i","yValues_1","value","histogramValues","sDValue","Math","round","sqrt","binWidth","binInterval","pow","processInternalData","data","_a","updatedData","keys","i","key","push","yName","min","max","yCount","j","filter","y","xAxis","actualRange","xValue","pointLocation","yValue","direction","startPoint","yValuesCount","pointsCount","del","distributionLine","points","exp","PI","yAxis","chart","requireInvertedAxis","x","renderer","drawPath","element","id","index","themeStyle","errorBar","opacity","dashArray","Int32Array","clipRect","style","visibility","enableCanvas","animation","enable","animateSeries","seriesElement","appendChild","doAnimation","lastElementChild","duration","getModuleName","destroy"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { sum, getPoint, templateAnimate } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { ColumnSeries } from './column-series';\n/**\n * `HistogramSeries` Module used to render the histogram series.\n */\nvar HistogramSeries = /** @class */ (function (_super) {\n    __extends(HistogramSeries, _super);\n    function HistogramSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render Histogram series.\n     * @return {void}\n     * @private\n     */\n    HistogramSeries.prototype.render = function (series) {\n        _super.prototype.render.call(this, series);\n        if (series.showNormalDistribution) {\n            this.renderNormalDistribution(series);\n        }\n    };\n    /**\n     * To calculate bin interval for Histogram series.\n     * @return number\n     * @private\n     */\n    HistogramSeries.prototype.calculateBinInterval = function (yValues, series) {\n        var mean = sum(yValues) / yValues.length;\n        var sumValue = 0;\n        for (var _i = 0, yValues_1 = yValues; _i < yValues_1.length; _i++) {\n            var value = yValues_1[_i];\n            sumValue += (value - mean) * (value - mean);\n        }\n        series.histogramValues.mean = mean;\n        series.histogramValues.sDValue = Math.round(Math.sqrt(sumValue / yValues.length - 1));\n        series.histogramValues.binWidth = series.binInterval ||\n            Math.round((3.5 * series.histogramValues.sDValue) / Math.pow(yValues.length, 1 / 3));\n    };\n    /**\n     * Add data points for Histogram series.\n     * @return {object[]}\n     * @private\n     */\n    HistogramSeries.prototype.processInternalData = function (data, series) {\n        var _a;\n        var updatedData = [];\n        var yValues = [];\n        var binWidth;\n        var keys = Object.keys(data);\n        for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            yValues.push(data[key][series.yName]);\n        }\n        series.histogramValues = {\n            yValues: yValues\n        };\n        var min = Math.min.apply(Math, series.histogramValues.yValues);\n        var max = Math.max.apply(Math, series.histogramValues.yValues);\n        this.calculateBinInterval(series.histogramValues.yValues, series);\n        binWidth = series.histogramValues.binWidth;\n        var yCount;\n        for (var j = 0; j < data.length;) {\n            yCount = yValues.filter(function (y) { return y >= min && y < (min + (binWidth)); }).length;\n            if ((min + binWidth) === max) {\n                yCount += yValues.filter(function (y) { return y >= max; }).length;\n            }\n            updatedData.push((_a = {\n                    'x': min + binWidth / 2\n                },\n                _a[series.yName] = yCount,\n                _a));\n            min = min + binWidth;\n            j += yCount;\n        }\n        return updatedData;\n    };\n    /**\n     * Render Normal Distribution for Histogram series.\n     * @return {void}\n     * @private\n     */\n    HistogramSeries.prototype.renderNormalDistribution = function (series) {\n        var min = series.xAxis.actualRange.min;\n        var max = series.xAxis.actualRange.max;\n        var xValue;\n        var pointLocation;\n        var yValue;\n        var direction = '';\n        var startPoint = 'M';\n        var yValuesCount = series.histogramValues.yValues.length;\n        var binWidth = series.histogramValues.binWidth;\n        var mean = series.histogramValues.mean;\n        var sDValue = series.histogramValues.sDValue;\n        var pointsCount = 500;\n        var del = (max - min) / (pointsCount - 1);\n        var distributionLine;\n        var points = series.points.length;\n        if (points) {\n            for (var i = 0; i < pointsCount; i++) {\n                xValue = min + i * del;\n                yValue = Math.exp(-(xValue - mean) * (xValue - mean) / (2 * sDValue * sDValue)) /\n                    (sDValue * Math.sqrt(2 * Math.PI));\n                pointLocation = getPoint(xValue, yValue * binWidth * yValuesCount, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, series);\n                direction += startPoint + ' ' + (pointLocation.x) + ' ' + (pointLocation.y) + ' ';\n                startPoint = 'L';\n            }\n        }\n        distributionLine = series.chart.renderer.drawPath(new PathOption(series.chart.element.id + '_Series_' + series.index + '_NDLine', 'transparent', 2, series.chart.themeStyle.errorBar, series.opacity, series.dashArray, direction), new Int32Array([series.clipRect.x, series.clipRect.y]));\n        distributionLine.style.visibility = (!series.chart.enableCanvas) ? ((series.animation.enable &&\n            series.chart.animateSeries) ? 'hidden' : 'visible') : null;\n        if (!series.chart.enableCanvas) {\n            series.seriesElement.appendChild(distributionLine);\n        }\n    };\n    /**\n     * Animates the series.\n     * @param  {Series} series - Defines the series to animate.\n     * @return {void}\n     */\n    HistogramSeries.prototype.doAnimation = function (series) {\n        _super.prototype.doAnimation.call(this, series);\n        if (series.showNormalDistribution) {\n            templateAnimate(series.seriesElement.lastElementChild, series.animation.duration, 500, 'FadeIn');\n        }\n    };\n    /**\n     * Get module name.\n     */\n    HistogramSeries.prototype.getModuleName = function () {\n        return 'HistogramSeries';\n        /**\n         * return the module name\n         */\n    };\n    /**\n     * To destroy the histogram series.\n     * @return {void}\n     * @private\n     */\n    HistogramSeries.prototype.destroy = function (chart) {\n        /**\n         * Destroy method performed here\n         */\n    };\n    return HistogramSeries;\n}(ColumnSeries));\nexport { HistogramSeries };\n"]},"metadata":{},"sourceType":"module"}