{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Category } from '../axis/category-axis';\nimport { triggerLabelRender } from '../../common/utils/helper';\nimport { withIn, firstToLowerCase } from '../../common/utils/helper';\nimport { extend, getValue } from '@syncfusion/ej2-base';\n/**\n * Category module is used to render category axis.\n */\n\nvar DateTimeCategory =\n/** @class */\nfunction (_super) {\n  __extends(DateTimeCategory, _super);\n  /**\n   * Constructor for the category module.\n   * @private\n   */\n\n\n  function DateTimeCategory(chart) {\n    return _super.call(this, chart) || this;\n  }\n  /**\n   * The function to calculate the range and labels for the axis.\n   * @return {void}\n   * @private\n   */\n\n\n  DateTimeCategory.prototype.calculateRangeAndInterval = function (size, axis) {\n    this.axisSize = size;\n    this.calculateRange(axis, size);\n    this.getActualRange(axis, size);\n    this.applyRangePadding(axis, size);\n    this.calculateVisibleLabels(axis);\n  };\n  /**\n   * Calculate label for the axis.\n   * @private\n   */\n\n\n  DateTimeCategory.prototype.calculateVisibleLabels = function (axis) {\n    /*! Generate axis labels */\n    axis.visibleLabels = [];\n    var labelStyle;\n    var padding = axis.labelPlacement === 'BetweenTicks' ? 0.5 : 0;\n\n    if (axis.intervalType === 'Auto') {\n      this.calculateDateTimeNiceInterval(axis, this.axisSize, parseInt(axis.labels[0], 10), parseInt(axis.labels[axis.labels.length - 1], 10));\n    } else {\n      axis.actualIntervalType = axis.intervalType;\n    }\n\n    axis.format = this.chart.intl.getDateFormat({\n      format: axis.labelFormat || this.blazorCustomFormat(axis),\n      type: firstToLowerCase(axis.skeletonType),\n      skeleton: this.getSkeleton(axis, null, null, this.chart.isBlazor)\n    });\n\n    for (var i = 0; i < axis.labels.length; i++) {\n      labelStyle = extend({}, getValue('properties', axis.labelStyle), null, true);\n\n      if (!this.sameInterval(axis.labels.map(Number)[i], axis.labels.map(Number)[i - 1], axis.actualIntervalType, i) || axis.isIndexed) {\n        if (withIn(i - padding, axis.visibleRange)) {\n          triggerLabelRender(this.chart, i, axis.isIndexed ? this.getIndexedAxisLabel(axis.labels[i], axis.format) : axis.format(new Date(axis.labels.map(Number)[i])), labelStyle, axis);\n        }\n      }\n    }\n\n    if (axis.getMaxLabelWidth) {\n      axis.getMaxLabelWidth(this.chart);\n    }\n  };\n  /** @private */\n\n\n  DateTimeCategory.prototype.blazorCustomFormat = function (axis) {\n    if (this.chart.isBlazor && axis.actualIntervalType === 'Years') {\n      return 'yyyy';\n    } else {\n      return '';\n    }\n  };\n  /**\n   * To get the Indexed axis label text with axis format for DateTimeCategory axis\n   * @param value\n   * @param format\n   */\n\n\n  DateTimeCategory.prototype.getIndexedAxisLabel = function (value, format) {\n    var texts = value.split(',');\n\n    for (var i = 0; i < texts.length; i++) {\n      texts[i] = format(new Date(parseInt(texts[i], 10)));\n    }\n\n    return texts.join(', ');\n  };\n  /**\n   * get same interval\n   */\n\n\n  DateTimeCategory.prototype.sameInterval = function (currentDate, previousDate, type, index) {\n    var sameValue;\n\n    if (index === 0) {\n      sameValue = false;\n    } else {\n      switch (type) {\n        case 'Years':\n          sameValue = new Date(currentDate).getFullYear() === new Date(previousDate).getFullYear();\n          break;\n\n        case 'Months':\n          sameValue = new Date(currentDate).getFullYear() === new Date(previousDate).getFullYear() && new Date(currentDate).getMonth() === new Date(previousDate).getMonth();\n          break;\n\n        case 'Days':\n          sameValue = Math.abs(currentDate - previousDate) < 24 * 60 * 60 * 1000 && new Date(currentDate).getDay() === new Date(previousDate).getDay();\n          break;\n\n        case 'Hours':\n          sameValue = Math.abs(currentDate - previousDate) < 60 * 60 * 1000 && new Date(currentDate).getDay() === new Date(previousDate).getDay();\n          break;\n\n        case 'Minutes':\n          sameValue = Math.abs(currentDate - previousDate) < 60 * 1000 && new Date(currentDate).getMinutes() === new Date(previousDate).getMinutes();\n          break;\n\n        case 'Seconds':\n          sameValue = Math.abs(currentDate - previousDate) < 1000 && new Date(currentDate).getDay() === new Date(previousDate).getDay();\n          break;\n      }\n    }\n\n    return sameValue;\n  };\n  /**\n   * Get module name\n   */\n\n\n  DateTimeCategory.prototype.getModuleName = function () {\n    /**\n     * Returns the module name\n     */\n    return 'DateTimeCategory';\n  };\n  /**\n   * To destroy the category axis.\n   * @return {void}\n   * @private\n   */\n\n\n  DateTimeCategory.prototype.destroy = function (chart) {\n    /**\n     * Destroy method performed here\n     */\n  };\n\n  return DateTimeCategory;\n}(Category);\n\nexport { DateTimeCategory };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-charts/src/chart/axis/date-time-category-axis.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Category","triggerLabelRender","withIn","firstToLowerCase","extend","getValue","DateTimeCategory","_super","chart","call","calculateRangeAndInterval","size","axis","axisSize","calculateRange","getActualRange","applyRangePadding","calculateVisibleLabels","visibleLabels","labelStyle","padding","labelPlacement","intervalType","calculateDateTimeNiceInterval","parseInt","labels","length","actualIntervalType","format","intl","getDateFormat","labelFormat","blazorCustomFormat","type","skeletonType","skeleton","getSkeleton","isBlazor","i","sameInterval","map","Number","isIndexed","visibleRange","getIndexedAxisLabel","Date","getMaxLabelWidth","value","texts","split","join","currentDate","previousDate","index","sameValue","getFullYear","getMonth","Math","abs","getDay","getMinutes","getModuleName","destroy"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Category } from '../axis/category-axis';\nimport { triggerLabelRender } from '../../common/utils/helper';\nimport { withIn, firstToLowerCase } from '../../common/utils/helper';\nimport { extend, getValue } from '@syncfusion/ej2-base';\n/**\n * Category module is used to render category axis.\n */\nvar DateTimeCategory = /** @class */ (function (_super) {\n    __extends(DateTimeCategory, _super);\n    /**\n     * Constructor for the category module.\n     * @private\n     */\n    function DateTimeCategory(chart) {\n        return _super.call(this, chart) || this;\n    }\n    /**\n     * The function to calculate the range and labels for the axis.\n     * @return {void}\n     * @private\n     */\n    DateTimeCategory.prototype.calculateRangeAndInterval = function (size, axis) {\n        this.axisSize = size;\n        this.calculateRange(axis, size);\n        this.getActualRange(axis, size);\n        this.applyRangePadding(axis, size);\n        this.calculateVisibleLabels(axis);\n    };\n    /**\n     * Calculate label for the axis.\n     * @private\n     */\n    DateTimeCategory.prototype.calculateVisibleLabels = function (axis) {\n        /*! Generate axis labels */\n        axis.visibleLabels = [];\n        var labelStyle;\n        var padding = axis.labelPlacement === 'BetweenTicks' ? 0.5 : 0;\n        if (axis.intervalType === 'Auto') {\n            this.calculateDateTimeNiceInterval(axis, this.axisSize, parseInt(axis.labels[0], 10), parseInt(axis.labels[axis.labels.length - 1], 10));\n        }\n        else {\n            axis.actualIntervalType = axis.intervalType;\n        }\n        axis.format = this.chart.intl.getDateFormat({\n            format: axis.labelFormat || this.blazorCustomFormat(axis), type: firstToLowerCase(axis.skeletonType),\n            skeleton: this.getSkeleton(axis, null, null, this.chart.isBlazor)\n        });\n        for (var i = 0; i < axis.labels.length; i++) {\n            labelStyle = (extend({}, getValue('properties', axis.labelStyle), null, true));\n            if (!this.sameInterval(axis.labels.map(Number)[i], axis.labels.map(Number)[i - 1], axis.actualIntervalType, i)\n                || axis.isIndexed) {\n                if (withIn(i - padding, axis.visibleRange)) {\n                    triggerLabelRender(this.chart, i, (axis.isIndexed ? this.getIndexedAxisLabel(axis.labels[i], axis.format) :\n                        axis.format(new Date(axis.labels.map(Number)[i]))), labelStyle, axis);\n                }\n            }\n        }\n        if (axis.getMaxLabelWidth) {\n            axis.getMaxLabelWidth(this.chart);\n        }\n    };\n    /** @private */\n    DateTimeCategory.prototype.blazorCustomFormat = function (axis) {\n        if (this.chart.isBlazor && axis.actualIntervalType === 'Years') {\n            return 'yyyy';\n        }\n        else {\n            return '';\n        }\n    };\n    /**\n     * To get the Indexed axis label text with axis format for DateTimeCategory axis\n     * @param value\n     * @param format\n     */\n    DateTimeCategory.prototype.getIndexedAxisLabel = function (value, format) {\n        var texts = value.split(',');\n        for (var i = 0; i < texts.length; i++) {\n            texts[i] = format(new Date(parseInt(texts[i], 10)));\n        }\n        return texts.join(', ');\n    };\n    /**\n     * get same interval\n     */\n    DateTimeCategory.prototype.sameInterval = function (currentDate, previousDate, type, index) {\n        var sameValue;\n        if (index === 0) {\n            sameValue = false;\n        }\n        else {\n            switch (type) {\n                case 'Years':\n                    sameValue = new Date(currentDate).getFullYear() === new Date(previousDate).getFullYear();\n                    break;\n                case 'Months':\n                    sameValue = new Date(currentDate).getFullYear() === new Date(previousDate).getFullYear() &&\n                        new Date(currentDate).getMonth() === new Date(previousDate).getMonth();\n                    break;\n                case 'Days':\n                    sameValue = (Math.abs(currentDate - previousDate) < 24 * 60 * 60 * 1000 &&\n                        new Date(currentDate).getDay() === new Date(previousDate).getDay());\n                    break;\n                case 'Hours':\n                    sameValue = (Math.abs(currentDate - previousDate) < 60 * 60 * 1000 &&\n                        new Date(currentDate).getDay() === new Date(previousDate).getDay());\n                    break;\n                case 'Minutes':\n                    sameValue = (Math.abs(currentDate - previousDate) < 60 * 1000 &&\n                        new Date(currentDate).getMinutes() === new Date(previousDate).getMinutes());\n                    break;\n                case 'Seconds':\n                    sameValue = (Math.abs(currentDate - previousDate) < 1000 &&\n                        new Date(currentDate).getDay() === new Date(previousDate).getDay());\n                    break;\n            }\n        }\n        return sameValue;\n    };\n    /**\n     * Get module name\n     */\n    DateTimeCategory.prototype.getModuleName = function () {\n        /**\n         * Returns the module name\n         */\n        return 'DateTimeCategory';\n    };\n    /**\n     * To destroy the category axis.\n     * @return {void}\n     * @private\n     */\n    DateTimeCategory.prototype.destroy = function (chart) {\n        /**\n         * Destroy method performed here\n         */\n    };\n    return DateTimeCategory;\n}(Category));\nexport { DateTimeCategory };\n"]},"metadata":{},"sourceType":"module"}