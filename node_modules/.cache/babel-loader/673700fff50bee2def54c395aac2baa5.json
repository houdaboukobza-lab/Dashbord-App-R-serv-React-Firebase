{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `AtrIndicator` module is used to render ATR indicator.\n */\n\nvar AtrIndicator =\n/** @class */\nfunction (_super) {\n  __extends(AtrIndicator, _super);\n\n  function AtrIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the predictions using Average True Range approach\n   * @private\n   */\n\n\n  AtrIndicator.prototype.initDataSource = function (indicator, chart) {\n    var validData = indicator.points;\n\n    if (validData.length > 0 && validData.length > indicator.period) {\n      this.calculateATRPoints(indicator, validData);\n    }\n  };\n  /**\n   *  To calculate Average True Range indicator points\n   * @private\n   */\n\n\n  AtrIndicator.prototype.calculateATRPoints = function (indicator, validData) {\n    var average = 0;\n    var highLow = 0;\n    var highClose = 0;\n    var lowClose = 0;\n    var trueRange = 0;\n    var points = [];\n    var temp = [];\n    var period = indicator.period;\n    var sum = 0;\n    var y = 'y';\n    var signalSeries = indicator.targetSeries[0];\n\n    for (var i = 0; i < validData.length; i++) {\n      /**\n       * Current High less the current Low\n       * Current High less the previous Close (absolute value)\n       * Current Low less the previous Close (absolute value)\n       */\n      highLow = Number(validData[i].high) - Number(validData[i].low);\n\n      if (i > 0) {\n        //\n        highClose = Math.abs(Number(validData[i].high) - Number(validData[i - 1].close));\n        lowClose = Math.abs(Number(validData[i].low) - Number(validData[i - 1].close));\n      }\n      /**\n       * To find the maximum of highLow, highClose, lowClose\n       */\n\n\n      trueRange = Math.max(highLow, highClose, lowClose);\n      sum = sum + trueRange;\n      /**\n       * Push the x and y values for the Average true range indicator\n       */\n\n      if (i >= period) {\n        average = (Number(temp[i - 1][y]) * (period - 1) + trueRange) / period;\n        points.push(this.getDataPoint(validData[i].x, average, validData[i], signalSeries, points.length));\n      } else {\n        average = sum / period;\n\n        if (i === period - 1) {\n          points.push(this.getDataPoint(validData[i].x, average, validData[i], signalSeries, points.length));\n        }\n      }\n\n      temp[i] = {\n        x: validData[i].x,\n        y: average\n      };\n    }\n\n    this.setSeriesRange(points, indicator);\n  };\n  /**\n   * To destroy the Average true range indicator.\n   * @return {void}\n   * @private\n   */\n\n\n  AtrIndicator.prototype.destroy = function (chart) {\n    /**\n     * Destroy the Average true range indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n\n\n  AtrIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the Indicator\n     */\n    return 'AtrIndicator';\n  };\n\n  return AtrIndicator;\n}(TechnicalAnalysis);\n\nexport { AtrIndicator };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/atr-indicator.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","TechnicalAnalysis","AtrIndicator","_super","apply","arguments","initDataSource","indicator","chart","validData","points","length","period","calculateATRPoints","average","highLow","highClose","lowClose","trueRange","temp","sum","y","signalSeries","targetSeries","i","Number","high","low","Math","abs","close","max","push","getDataPoint","x","setSeriesRange","destroy","getModuleName"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `AtrIndicator` module is used to render ATR indicator.\n */\nvar AtrIndicator = /** @class */ (function (_super) {\n    __extends(AtrIndicator, _super);\n    function AtrIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the predictions using Average True Range approach\n     * @private\n     */\n    AtrIndicator.prototype.initDataSource = function (indicator, chart) {\n        var validData = indicator.points;\n        if (validData.length > 0 && validData.length > indicator.period) {\n            this.calculateATRPoints(indicator, validData);\n        }\n    };\n    /**\n     *  To calculate Average True Range indicator points\n     * @private\n     */\n    AtrIndicator.prototype.calculateATRPoints = function (indicator, validData) {\n        var average = 0;\n        var highLow = 0;\n        var highClose = 0;\n        var lowClose = 0;\n        var trueRange = 0;\n        var points = [];\n        var temp = [];\n        var period = indicator.period;\n        var sum = 0;\n        var y = 'y';\n        var signalSeries = indicator.targetSeries[0];\n        for (var i = 0; i < validData.length; i++) {\n            /**\n             * Current High less the current Low\n             * Current High less the previous Close (absolute value)\n             * Current Low less the previous Close (absolute value)\n             */\n            highLow = Number(validData[i].high) - Number(validData[i].low);\n            if (i > 0) {\n                //\n                highClose = Math.abs(Number(validData[i].high) - Number(validData[i - 1].close));\n                lowClose = Math.abs(Number(validData[i].low) - Number(validData[i - 1].close));\n            }\n            /**\n             * To find the maximum of highLow, highClose, lowClose\n             */\n            trueRange = Math.max(highLow, highClose, lowClose);\n            sum = sum + trueRange;\n            /**\n             * Push the x and y values for the Average true range indicator\n             */\n            if (i >= period) {\n                average = (Number(temp[i - 1][y]) * (period - 1) + trueRange) / period;\n                points.push(this.getDataPoint(validData[i].x, average, validData[i], signalSeries, points.length));\n            }\n            else {\n                average = sum / period;\n                if (i === period - 1) {\n                    points.push(this.getDataPoint(validData[i].x, average, validData[i], signalSeries, points.length));\n                }\n            }\n            temp[i] = { x: validData[i].x, y: average };\n        }\n        this.setSeriesRange(points, indicator);\n    };\n    /**\n     * To destroy the Average true range indicator.\n     * @return {void}\n     * @private\n     */\n    AtrIndicator.prototype.destroy = function (chart) {\n        /**\n         * Destroy the Average true range indicator\n         */\n    };\n    /**\n     * Get module name.\n     */\n    AtrIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the Indicator\n         */\n        return 'AtrIndicator';\n    };\n    return AtrIndicator;\n}(TechnicalAnalysis));\nexport { AtrIndicator };\n"]},"metadata":{},"sourceType":"module"}