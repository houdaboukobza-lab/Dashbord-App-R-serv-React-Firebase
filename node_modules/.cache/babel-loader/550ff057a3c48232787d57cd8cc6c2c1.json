{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfTrueTypeFont.ts class for EJ2-PDF\n */\n\n\nimport { UnicodeTrueTypeFont } from './unicode-true-type-font';\nimport { PdfFont } from './pdf-font';\nimport { PdfFontStyle } from './enum';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfTextDirection } from './../enum';\nimport { RtlRenderer } from './rtl-renderer'; //https://www.giftofspeed.com/base64-encoder/\n\nvar PdfTrueTypeFont =\n/** @class */\nfunction (_super) {\n  __extends(PdfTrueTypeFont, _super);\n\n  function PdfTrueTypeFont(base64String, size, style) {\n    var _this = _super.call(this, size) || this;\n    /**\n     * Indicates whether the font is embedded or not.\n     * @private\n     */\n\n\n    _this.isEmbedFont = false;\n    /**\n     * Indicates whether the font is unicoded or not.\n     * @private\n     */\n\n    _this.isUnicode = true;\n\n    if (style !== undefined) {\n      _this.createFontInternal(base64String, style);\n    } else {\n      _this.createFontInternal(base64String, PdfFontStyle.Regular);\n    }\n\n    return _this;\n  }\n\n  PdfTrueTypeFont.prototype.equalsToFont = function (font) {\n    var result = false; //let result : boolean = this.fontInternal.equalsToFont(font);\n\n    return result;\n  };\n\n  PdfTrueTypeFont.prototype.getLineWidth = function (line, format) {\n    var width = 0;\n\n    if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n      var returnValue = this.getUnicodeLineWidth(line,\n      /*out*/\n      width, format);\n      width = returnValue.width;\n    } else {\n      width = this.fontInternal.getLineWidth(line);\n    }\n\n    var size = this.metrics.getSize(format);\n    width *= PdfFont.charSizeMultiplier * size;\n    width = this.applyFormatSettings(line, format, width);\n    return width;\n  };\n  /**\n   * Returns width of the char.\n   */\n\n\n  PdfTrueTypeFont.prototype.getCharWidth = function (charCode, format) {\n    var codeWidth = this.fontInternal.getCharWidth(charCode);\n    var size = this.metrics.getSize(format);\n    codeWidth *= 0.001 * size;\n    return codeWidth;\n  }; //Implementation\n\n\n  PdfTrueTypeFont.prototype.createFontInternal = function (base64String, style) {\n    this.fontInternal = new UnicodeTrueTypeFont(base64String, this.size);\n    this.calculateStyle(style);\n    this.initializeInternals();\n  };\n\n  PdfTrueTypeFont.prototype.calculateStyle = function (style) {\n    var iStyle = this.fontInternal.ttfMetrics.macStyle;\n\n    if ((style & PdfFontStyle.Underline) !== 0) {\n      iStyle |= PdfFontStyle.Underline;\n    }\n\n    if ((style & PdfFontStyle.Strikeout) !== 0) {\n      iStyle |= PdfFontStyle.Strikeout;\n    }\n\n    this.setStyle(iStyle);\n  };\n\n  PdfTrueTypeFont.prototype.initializeInternals = function () {\n    var equalFont = null;\n\n    if (PdfDocument.enableCache) {\n      // Search for the similar fonts.\n      equalFont = PdfDocument.cache.search(this);\n    }\n\n    var internals = null; // There is not equal font in the cache.\n\n    if (equalFont !== null && equalFont !== undefined) {\n      // Get the settings from the cached font.\n      internals = equalFont.getInternals();\n      var metrics = equalFont.metrics;\n      metrics = metrics.clone();\n      metrics.size = this.size;\n      this.metrics = metrics;\n      this.fontInternal = equalFont.fontInternal;\n    } else {\n      if (equalFont == null) {\n        if (this.fontInternal instanceof UnicodeTrueTypeFont) {\n          this.fontInternal.isEmbed = this.isEmbedFont;\n        }\n\n        this.fontInternal.createInternals();\n        internals = this.fontInternal.getInternals();\n        this.metrics = this.fontInternal.metrics;\n      }\n    }\n\n    this.metrics.isUnicodeFont = true;\n    this.setInternals(internals); //this.ttfReader = (this.fontInternal as UnicodeTrueTypeFont).ttfReader;\n  };\n  /**\n   * Stores used symbols.\n   */\n\n\n  PdfTrueTypeFont.prototype.setSymbols = function (text) {\n    var internalFont = this.fontInternal;\n\n    if (internalFont != null) {\n      internalFont.setSymbols(text);\n    }\n  };\n\n  Object.defineProperty(PdfTrueTypeFont.prototype, \"Unicode\", {\n    /**\n     * Property\n     *\n     */\n    get: function () {\n      return this.isUnicode;\n    },\n    enumerable: true,\n    configurable: true\n  }); // public get Font() : UnicodeTrueTypeFont {\n  //     return this.fontInternal as UnicodeTrueTypeFont;\n  // }\n\n  PdfTrueTypeFont.prototype.getUnicodeLineWidth = function (line,\n  /*out*/\n  width, format) {\n    // if (line == null) {\n    //     throw new Error('ArgumentNullException : line');\n    // }\n    width = 0;\n    var glyphIndices = null;\n    var rtlRender = new RtlRenderer();\n    /* tslint:disable-next-line:max-line-length */\n\n    var result = rtlRender.getGlyphIndex(line, this, format.textDirection === PdfTextDirection.RightToLeft ? true : false,\n    /*out*/\n    glyphIndices, true);\n    var resultGlyph = result.success;\n    glyphIndices = result.glyphs;\n\n    if (resultGlyph && glyphIndices !== null) {\n      var ttfReader = this.fontInternal.ttfReader;\n\n      for (var i = 0, len = glyphIndices.length; i < len; i++) {\n        var glyphIndex = glyphIndices[i];\n        var glyph = ttfReader.getGlyph(glyphIndex);\n\n        if (glyph !== null && typeof glyph !== 'undefined') {\n          width += glyph.width;\n        }\n      }\n    }\n\n    return {\n      success: resultGlyph,\n      width: width\n    };\n  };\n\n  return PdfTrueTypeFont;\n}(PdfFont);\n\nexport { PdfTrueTypeFont };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-true-type-font.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","UnicodeTrueTypeFont","PdfFont","PdfFontStyle","PdfDocument","PdfTextDirection","RtlRenderer","PdfTrueTypeFont","_super","base64String","size","style","_this","call","isEmbedFont","isUnicode","undefined","createFontInternal","Regular","equalsToFont","font","result","getLineWidth","line","format","width","textDirection","None","returnValue","getUnicodeLineWidth","fontInternal","metrics","getSize","charSizeMultiplier","applyFormatSettings","getCharWidth","charCode","codeWidth","calculateStyle","initializeInternals","iStyle","ttfMetrics","macStyle","Underline","Strikeout","setStyle","equalFont","enableCache","cache","search","internals","getInternals","clone","isEmbed","createInternals","isUnicodeFont","setInternals","setSymbols","text","internalFont","defineProperty","get","enumerable","configurable","glyphIndices","rtlRender","getGlyphIndex","RightToLeft","resultGlyph","success","glyphs","ttfReader","i","len","length","glyphIndex","glyph","getGlyph"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfTrueTypeFont.ts class for EJ2-PDF\n */\nimport { UnicodeTrueTypeFont } from './unicode-true-type-font';\nimport { PdfFont } from './pdf-font';\nimport { PdfFontStyle } from './enum';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfTextDirection } from './../enum';\nimport { RtlRenderer } from './rtl-renderer';\n//https://www.giftofspeed.com/base64-encoder/\nvar PdfTrueTypeFont = /** @class */ (function (_super) {\n    __extends(PdfTrueTypeFont, _super);\n    function PdfTrueTypeFont(base64String, size, style) {\n        var _this = _super.call(this, size) || this;\n        /**\n         * Indicates whether the font is embedded or not.\n         * @private\n         */\n        _this.isEmbedFont = false;\n        /**\n         * Indicates whether the font is unicoded or not.\n         * @private\n         */\n        _this.isUnicode = true;\n        if (style !== undefined) {\n            _this.createFontInternal(base64String, style);\n        }\n        else {\n            _this.createFontInternal(base64String, PdfFontStyle.Regular);\n        }\n        return _this;\n    }\n    PdfTrueTypeFont.prototype.equalsToFont = function (font) {\n        var result = false;\n        //let result : boolean = this.fontInternal.equalsToFont(font);\n        return result;\n    };\n    PdfTrueTypeFont.prototype.getLineWidth = function (line, format) {\n        var width = 0;\n        if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n            var returnValue = this.getUnicodeLineWidth(line, /*out*/ width, format);\n            width = returnValue.width;\n        }\n        else {\n            width = this.fontInternal.getLineWidth(line);\n        }\n        var size = this.metrics.getSize(format);\n        width *= (PdfFont.charSizeMultiplier * size);\n        width = this.applyFormatSettings(line, format, width);\n        return width;\n    };\n    /**\n     * Returns width of the char.\n     */\n    PdfTrueTypeFont.prototype.getCharWidth = function (charCode, format) {\n        var codeWidth = this.fontInternal.getCharWidth(charCode);\n        var size = this.metrics.getSize(format);\n        codeWidth *= (0.001 * size);\n        return codeWidth;\n    };\n    //Implementation\n    PdfTrueTypeFont.prototype.createFontInternal = function (base64String, style) {\n        this.fontInternal = new UnicodeTrueTypeFont(base64String, this.size);\n        this.calculateStyle(style);\n        this.initializeInternals();\n    };\n    PdfTrueTypeFont.prototype.calculateStyle = function (style) {\n        var iStyle = this.fontInternal.ttfMetrics.macStyle;\n        if ((style & PdfFontStyle.Underline) !== 0) {\n            iStyle |= PdfFontStyle.Underline;\n        }\n        if ((style & PdfFontStyle.Strikeout) !== 0) {\n            iStyle |= PdfFontStyle.Strikeout;\n        }\n        this.setStyle(iStyle);\n    };\n    PdfTrueTypeFont.prototype.initializeInternals = function () {\n        var equalFont = null;\n        if (PdfDocument.enableCache) {\n            // Search for the similar fonts.\n            equalFont = PdfDocument.cache.search(this);\n        }\n        var internals = null;\n        // There is not equal font in the cache.\n        if (equalFont !== null && equalFont !== undefined) {\n            // Get the settings from the cached font.\n            internals = equalFont.getInternals();\n            var metrics = equalFont.metrics;\n            metrics = metrics.clone();\n            metrics.size = this.size;\n            this.metrics = metrics;\n            this.fontInternal = equalFont.fontInternal;\n        }\n        else {\n            if (equalFont == null) {\n                if (this.fontInternal instanceof UnicodeTrueTypeFont) {\n                    this.fontInternal.isEmbed = this.isEmbedFont;\n                }\n                this.fontInternal.createInternals();\n                internals = this.fontInternal.getInternals();\n                this.metrics = this.fontInternal.metrics;\n            }\n        }\n        this.metrics.isUnicodeFont = true;\n        this.setInternals(internals);\n        //this.ttfReader = (this.fontInternal as UnicodeTrueTypeFont).ttfReader;\n    };\n    /**\n     * Stores used symbols.\n     */\n    PdfTrueTypeFont.prototype.setSymbols = function (text) {\n        var internalFont = this.fontInternal;\n        if (internalFont != null) {\n            internalFont.setSymbols(text);\n        }\n    };\n    Object.defineProperty(PdfTrueTypeFont.prototype, \"Unicode\", {\n        /**\n         * Property\n         *\n         */\n        get: function () {\n            return this.isUnicode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // public get Font() : UnicodeTrueTypeFont {\n    //     return this.fontInternal as UnicodeTrueTypeFont;\n    // }\n    PdfTrueTypeFont.prototype.getUnicodeLineWidth = function (line, /*out*/ width, format) {\n        // if (line == null) {\n        //     throw new Error('ArgumentNullException : line');\n        // }\n        width = 0;\n        var glyphIndices = null;\n        var rtlRender = new RtlRenderer();\n        /* tslint:disable-next-line:max-line-length */\n        var result = rtlRender.getGlyphIndex(line, this, (format.textDirection === PdfTextDirection.RightToLeft) ? true : false, /*out*/ glyphIndices, true);\n        var resultGlyph = result.success;\n        glyphIndices = result.glyphs;\n        if (resultGlyph && glyphIndices !== null) {\n            var ttfReader = this.fontInternal.ttfReader;\n            for (var i = 0, len = glyphIndices.length; i < len; i++) {\n                var glyphIndex = glyphIndices[i];\n                var glyph = ttfReader.getGlyph(glyphIndex);\n                if (glyph !== null && typeof glyph !== 'undefined') {\n                    width += glyph.width;\n                }\n            }\n        }\n        return { success: resultGlyph, width: width };\n    };\n    return PdfTrueTypeFont;\n}(PdfFont));\nexport { PdfTrueTypeFont };\n"]},"metadata":{},"sourceType":"module"}