{"ast":null,"code":"/**\n * PdfTransformationMatrix.ts class for EJ2-PDF\n */\nimport { PointF } from './../drawing/pdf-drawing';\nimport { PdfNumber } from './../primitives/pdf-number';\n/**\n * Class for representing Root `transformation matrix`.\n */\n\nvar PdfTransformationMatrix =\n/** @class */\nfunction () {\n  function PdfTransformationMatrix(value) {\n    /**\n     * Value for `angle converting`.\n     * @default 180.0 / Math.PI\n     * @private\n     */\n    this.radDegFactor = 180.0 / Math.PI;\n\n    if (typeof value === 'undefined') {\n      this.transformationMatrix = new Matrix(1.00, 0.00, 0.00, 1.00, 0.00, 0.00);\n    } else {\n      this.transformationMatrix = new Matrix(1.00, 0.00, 0.00, -1.00, 0.00, 0.00);\n    }\n  }\n\n  Object.defineProperty(PdfTransformationMatrix.prototype, \"matrix\", {\n    // Properties\n\n    /**\n     * Gets or sets the `internal matrix object`.\n     * @private\n     */\n    get: function () {\n      return this.transformationMatrix;\n    },\n    set: function (value) {\n      this.transformationMatrix = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Public methods\n\n  /**\n   * `Translates` coordinates by specified coordinates.\n   * @private\n   */\n\n  PdfTransformationMatrix.prototype.translate = function (offsetX, offsetY) {\n    this.transformationMatrix.translate(offsetX, offsetY);\n  };\n  /**\n   * `Scales` coordinates by specified coordinates.\n   * @private\n   */\n\n\n  PdfTransformationMatrix.prototype.scale = function (scaleX, scaleY) {\n    this.transformationMatrix.elements[0] = scaleX;\n    this.transformationMatrix.elements[3] = scaleY;\n  };\n  /**\n   * `Rotates` coordinate system in counterclockwise direction.\n   * @private\n   */\n\n\n  PdfTransformationMatrix.prototype.rotate = function (angle) {\n    //Convert from degree to radian \n    angle = angle * Math.PI / 180; //Rotation \n\n    this.transformationMatrix.elements[0] = Math.cos(angle);\n    this.transformationMatrix.elements[1] = Math.sin(angle);\n    this.transformationMatrix.elements[2] = -Math.sin(angle);\n    this.transformationMatrix.elements[3] = Math.cos(angle);\n  }; // Overrides\n\n  /**\n   * Gets `PDF representation`.\n   * @private\n   */\n\n\n  PdfTransformationMatrix.prototype.toString = function () {\n    var builder = '';\n    var whitespace = ' ';\n\n    for (var i = 0, len = this.transformationMatrix.elements.length; i < len; i++) {\n      var temp = this.matrix.elements[i];\n      builder += PdfNumber.floatToString(this.transformationMatrix.elements[i]);\n      builder += whitespace;\n    }\n\n    return builder;\n  }; // Implementation\n\n  /**\n   * `Multiplies` matrices (changes coordinate system.)\n   * @private\n   */\n\n\n  PdfTransformationMatrix.prototype.multiply = function (matrix) {\n    this.transformationMatrix.multiply(matrix.matrix);\n  };\n  /**\n   * Converts `degrees to radians`.\n   * @private\n   */\n\n\n  PdfTransformationMatrix.degreesToRadians = function (degreesX) {\n    return this.degRadFactor * degreesX;\n  };\n  /**\n   * Converts `radians to degrees`.\n   * @private\n   */\n\n\n  PdfTransformationMatrix.prototype.radiansToDegrees = function (radians) {\n    return this.radDegFactor * radians;\n  };\n  /**\n   * `Clones` this instance of PdfTransformationMatrix.\n   * @private\n   */\n\n\n  PdfTransformationMatrix.prototype.clone = function () {\n    return this;\n  }; // Constants\n\n  /**\n   * Value for `angle converting`.\n   * @default Math.PI / 180.0\n   * @private\n   */\n\n\n  PdfTransformationMatrix.degRadFactor = Math.PI / 180.0;\n  return PdfTransformationMatrix;\n}();\n\nexport { PdfTransformationMatrix };\n\nvar Matrix =\n/** @class */\nfunction () {\n  function Matrix(arg1, arg2, arg3, arg4, arg5, arg6) {\n    if (typeof arg1 === 'undefined') {\n      this.metrixElements = [];\n    } else if (typeof arg1 === 'number') {\n      this.metrixElements = [];\n      this.metrixElements.push(arg1);\n      this.metrixElements.push(arg2);\n      this.metrixElements.push(arg3);\n      this.metrixElements.push(arg4);\n      this.metrixElements.push(arg5);\n      this.metrixElements.push(arg6);\n    } else {\n      this.metrixElements = arg1;\n    }\n  }\n\n  Object.defineProperty(Matrix.prototype, \"elements\", {\n    // Properties\n\n    /**\n     * Gets the `elements`.\n     * @private\n     */\n    get: function () {\n      return this.metrixElements;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Matrix.prototype, \"offsetX\", {\n    /**\n     * Gets the off set `X`.\n     * @private\n     */\n    get: function () {\n      return this.metrixElements[4];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Matrix.prototype, \"offsetY\", {\n    /**\n     * Gets the off set `Y`.\n     * @private\n     */\n    get: function () {\n      return this.metrixElements[5];\n    },\n    enumerable: true,\n    configurable: true\n  }); // Implementation\n\n  /**\n   * `Translates` coordinates by specified coordinates.\n   * @private\n   */\n\n  Matrix.prototype.translate = function (offsetX, offsetY) {\n    this.metrixElements[4] = offsetX;\n    this.metrixElements[5] = offsetY;\n  };\n  /**\n   * `Translates` the specified offset X.\n   * @private\n   */\n\n\n  Matrix.prototype.transform = function (point) {\n    var x = point.x;\n    var y = point.y;\n    var x2 = x * this.elements[0] + y * this.elements[2] + this.offsetX;\n    var y2 = x * this.elements[1] + y * this.elements[3] + this.offsetY;\n    return new PointF(x2, y2);\n  };\n  /**\n   * `Multiplies matrices` (changes coordinate system.)\n   * @private\n   */\n\n\n  Matrix.prototype.multiply = function (matrix) {\n    var tempMatrix = [];\n    tempMatrix.push(this.elements[0] * matrix.elements[0] + this.elements[1] * matrix.elements[2]);\n    tempMatrix[1] = this.elements[0] * matrix.elements[1] + this.elements[1] * matrix.elements[3];\n    tempMatrix[2] = this.elements[2] * matrix.elements[0] + this.elements[3] * matrix.elements[2];\n    tempMatrix[3] = this.elements[2] * matrix.elements[1] + this.elements[3] * matrix.elements[3];\n    tempMatrix[4] = this.offsetX * matrix.elements[0] + this.offsetY * matrix.elements[2] + matrix.offsetX;\n    tempMatrix[5] = this.offsetX * matrix.elements[1] + this.offsetY * matrix.elements[3] + matrix.offsetY;\n\n    for (var i = 0; i < tempMatrix.length; i++) {\n      this.elements[i] = tempMatrix[i];\n    }\n  }; // IDisposable Members\n\n  /**\n   * `Dispose` this instance of PdfTransformationMatrix class.\n   * @private\n   */\n\n\n  Matrix.prototype.dispose = function () {\n    this.metrixElements = null;\n  }; // ICloneable Members\n\n  /**\n   * `Clones` this instance of PdfTransformationMatrix class.\n   * @private\n   */\n\n\n  Matrix.prototype.clone = function () {\n    var m = new Matrix(this.metrixElements);\n    return m;\n  };\n\n  return Matrix;\n}();\n\nexport { Matrix };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-transformation-matrix.js"],"names":["PointF","PdfNumber","PdfTransformationMatrix","value","radDegFactor","Math","PI","transformationMatrix","Matrix","Object","defineProperty","prototype","get","set","enumerable","configurable","translate","offsetX","offsetY","scale","scaleX","scaleY","elements","rotate","angle","cos","sin","toString","builder","whitespace","i","len","length","temp","matrix","floatToString","multiply","degreesToRadians","degreesX","degRadFactor","radiansToDegrees","radians","clone","arg1","arg2","arg3","arg4","arg5","arg6","metrixElements","push","transform","point","x","y","x2","y2","tempMatrix","dispose","m"],"mappings":"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","sourcesContent":["/**\n * PdfTransformationMatrix.ts class for EJ2-PDF\n */\nimport { PointF } from './../drawing/pdf-drawing';\nimport { PdfNumber } from './../primitives/pdf-number';\n/**\n * Class for representing Root `transformation matrix`.\n */\nvar PdfTransformationMatrix = /** @class */ (function () {\n    function PdfTransformationMatrix(value) {\n        /**\n         * Value for `angle converting`.\n         * @default 180.0 / Math.PI\n         * @private\n         */\n        this.radDegFactor = 180.0 / Math.PI;\n        if (typeof value === 'undefined') {\n            this.transformationMatrix = new Matrix(1.00, 0.00, 0.00, 1.00, 0.00, 0.00);\n        }\n        else {\n            this.transformationMatrix = new Matrix(1.00, 0.00, 0.00, -1.00, 0.00, 0.00);\n        }\n    }\n    Object.defineProperty(PdfTransformationMatrix.prototype, \"matrix\", {\n        // Properties\n        /**\n         * Gets or sets the `internal matrix object`.\n         * @private\n         */\n        get: function () {\n            return this.transformationMatrix;\n        },\n        set: function (value) {\n            this.transformationMatrix = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Public methods\n    /**\n     * `Translates` coordinates by specified coordinates.\n     * @private\n     */\n    PdfTransformationMatrix.prototype.translate = function (offsetX, offsetY) {\n        this.transformationMatrix.translate(offsetX, offsetY);\n    };\n    /**\n     * `Scales` coordinates by specified coordinates.\n     * @private\n     */\n    PdfTransformationMatrix.prototype.scale = function (scaleX, scaleY) {\n        this.transformationMatrix.elements[0] = scaleX;\n        this.transformationMatrix.elements[3] = scaleY;\n    };\n    /**\n     * `Rotates` coordinate system in counterclockwise direction.\n     * @private\n     */\n    PdfTransformationMatrix.prototype.rotate = function (angle) {\n        //Convert from degree to radian \n        angle = (angle * Math.PI) / 180;\n        //Rotation \n        this.transformationMatrix.elements[0] = Math.cos(angle);\n        this.transformationMatrix.elements[1] = Math.sin(angle);\n        this.transformationMatrix.elements[2] = -Math.sin(angle);\n        this.transformationMatrix.elements[3] = Math.cos(angle);\n    };\n    // Overrides\n    /**\n     * Gets `PDF representation`.\n     * @private\n     */\n    PdfTransformationMatrix.prototype.toString = function () {\n        var builder = '';\n        var whitespace = ' ';\n        for (var i = 0, len = this.transformationMatrix.elements.length; i < len; i++) {\n            var temp = this.matrix.elements[i];\n            builder += PdfNumber.floatToString(this.transformationMatrix.elements[i]);\n            builder += whitespace;\n        }\n        return builder;\n    };\n    // Implementation\n    /**\n     * `Multiplies` matrices (changes coordinate system.)\n     * @private\n     */\n    PdfTransformationMatrix.prototype.multiply = function (matrix) {\n        this.transformationMatrix.multiply(matrix.matrix);\n    };\n    /**\n     * Converts `degrees to radians`.\n     * @private\n     */\n    PdfTransformationMatrix.degreesToRadians = function (degreesX) {\n        return this.degRadFactor * degreesX;\n    };\n    /**\n     * Converts `radians to degrees`.\n     * @private\n     */\n    PdfTransformationMatrix.prototype.radiansToDegrees = function (radians) {\n        return this.radDegFactor * radians;\n    };\n    /**\n     * `Clones` this instance of PdfTransformationMatrix.\n     * @private\n     */\n    PdfTransformationMatrix.prototype.clone = function () {\n        return this;\n    };\n    // Constants\n    /**\n     * Value for `angle converting`.\n     * @default Math.PI / 180.0\n     * @private\n     */\n    PdfTransformationMatrix.degRadFactor = Math.PI / 180.0;\n    return PdfTransformationMatrix;\n}());\nexport { PdfTransformationMatrix };\nvar Matrix = /** @class */ (function () {\n    function Matrix(arg1, arg2, arg3, arg4, arg5, arg6) {\n        if (typeof arg1 === 'undefined') {\n            this.metrixElements = [];\n        }\n        else if (typeof arg1 === 'number') {\n            this.metrixElements = [];\n            this.metrixElements.push(arg1);\n            this.metrixElements.push(arg2);\n            this.metrixElements.push(arg3);\n            this.metrixElements.push(arg4);\n            this.metrixElements.push(arg5);\n            this.metrixElements.push(arg6);\n        }\n        else {\n            this.metrixElements = arg1;\n        }\n    }\n    Object.defineProperty(Matrix.prototype, \"elements\", {\n        // Properties\n        /**\n         * Gets the `elements`.\n         * @private\n         */\n        get: function () {\n            return this.metrixElements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Matrix.prototype, \"offsetX\", {\n        /**\n         * Gets the off set `X`.\n         * @private\n         */\n        get: function () {\n            return this.metrixElements[4];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Matrix.prototype, \"offsetY\", {\n        /**\n         * Gets the off set `Y`.\n         * @private\n         */\n        get: function () {\n            return this.metrixElements[5];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementation\n    /**\n     * `Translates` coordinates by specified coordinates.\n     * @private\n     */\n    Matrix.prototype.translate = function (offsetX, offsetY) {\n        this.metrixElements[4] = offsetX;\n        this.metrixElements[5] = offsetY;\n    };\n    /**\n     * `Translates` the specified offset X.\n     * @private\n     */\n    Matrix.prototype.transform = function (point) {\n        var x = point.x;\n        var y = point.y;\n        var x2 = x * this.elements[0] + y * this.elements[2] + this.offsetX;\n        var y2 = x * this.elements[1] + y * this.elements[3] + this.offsetY;\n        return new PointF(x2, y2);\n    };\n    /**\n     * `Multiplies matrices` (changes coordinate system.)\n     * @private\n     */\n    Matrix.prototype.multiply = function (matrix) {\n        var tempMatrix = [];\n        tempMatrix.push(this.elements[0] * matrix.elements[0] + this.elements[1] * matrix.elements[2]);\n        tempMatrix[1] = (this.elements[0] * matrix.elements[1] + this.elements[1] * matrix.elements[3]);\n        tempMatrix[2] = (this.elements[2] * matrix.elements[0] + this.elements[3] * matrix.elements[2]);\n        tempMatrix[3] = (this.elements[2] * matrix.elements[1] + this.elements[3] * matrix.elements[3]);\n        tempMatrix[4] = (this.offsetX * matrix.elements[0] + this.offsetY * matrix.elements[2] + matrix.offsetX);\n        tempMatrix[5] = (this.offsetX * matrix.elements[1] + this.offsetY * matrix.elements[3] + matrix.offsetY);\n        for (var i = 0; i < tempMatrix.length; i++) {\n            this.elements[i] = tempMatrix[i];\n        }\n    };\n    // IDisposable Members\n    /**\n     * `Dispose` this instance of PdfTransformationMatrix class.\n     * @private\n     */\n    Matrix.prototype.dispose = function () {\n        this.metrixElements = null;\n    };\n    // ICloneable Members\n    /**\n     * `Clones` this instance of PdfTransformationMatrix class.\n     * @private\n     */\n    Matrix.prototype.clone = function () {\n        var m = new Matrix(this.metrixElements);\n        return m;\n    };\n    return Matrix;\n}());\nexport { Matrix };\n"]},"metadata":{},"sourceType":"module"}