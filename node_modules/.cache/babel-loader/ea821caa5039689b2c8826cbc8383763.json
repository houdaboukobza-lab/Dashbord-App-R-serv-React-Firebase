{"ast":null,"code":"/**\n * PdfGraphics.ts class for EJ2-PDF\n */\nimport { PdfColorSpace, TextRenderingMode, PdfFillMode, PdfTextAlignment } from './enum';\nimport { PdfVerticalAlignment, PdfBlendMode } from './enum';\nimport { PdfSubSuperScript } from './fonts/enum';\nimport { PdfStreamWriter } from './../input-output/pdf-stream-writer';\nimport { PdfPen } from './pdf-pen';\nimport { PdfBrush } from './brushes/pdf-brush';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfFont } from './fonts/pdf-font';\nimport { PdfTransformationMatrix } from './pdf-transformation-matrix';\nimport { PointF, SizeF, RectangleF } from './../drawing/pdf-drawing';\nimport { ProcedureSets } from './constants';\nimport { PdfString } from './../primitives/pdf-string';\nimport { PdfStringFormat } from './fonts/pdf-string-format';\nimport { TemporaryDictionary } from './../collections/object-object-pair/dictionary';\nimport { PdfTransparency } from './pdf-transparency';\nimport { PdfStringLayouter, LineType } from './fonts/string-layouter';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { StringTokenizer } from './fonts/string-tokenizer';\nimport { PdfAutomaticFieldInfoCollection } from './../document/automatic-fields/automatic-field-info-collection';\nimport { PdfAutomaticFieldInfo } from './../document/automatic-fields/automatic-field-info';\nimport { Operators } from './../input-output/pdf-operators';\nimport { UnicodeTrueTypeFont } from './fonts/unicode-true-type-font';\nimport { InternalEnum } from './../primitives/pdf-string';\nimport { RtlRenderer } from './fonts/rtl-renderer';\nimport { PdfTextDirection } from './enum';\nimport { PathPointType } from './figures/enum';\nimport { PdfGradientBrush } from './../../implementation/graphics/brushes/pdf-gradient-brush';\nimport { PdfTilingBrush } from './brushes/pdf-tiling-brush';\n/**\n * `PdfGraphics` class represents a graphics context of the objects.\n * It's used for performing all the graphics operations.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * //graphics of the page\n * let page1Graphics : PdfGraphics = page1.graphics;\n * // draw the text on the page1 graphics\n * page1Graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * //\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\n\nvar PdfGraphics =\n/** @class */\nfunction () {\n  function PdfGraphics(arg1, arg2, arg3) {\n    /**\n     * Represents the `Current color space`.\n     * @private\n     */\n    this.currentColorSpace = PdfColorSpace.Rgb;\n    /**\n     * Stores `previous rendering mode`.\n     * @private\n     */\n\n    this.previousTextRenderingMode = TextRenderingMode.Fill;\n    /**\n     * Previous `character spacing` value or 0.\n     * @private\n     */\n\n    this.previousCharacterSpacing = 0.0;\n    /**\n     * Previous `word spacing` value or 0.\n     * @private\n     */\n\n    this.previousWordSpacing = 0.0;\n    /**\n     * The `previously used text scaling` value.\n     * @private\n     */\n\n    this.previousTextScaling = 100.0;\n    /**\n     * Instance of `ProcedureSets` class.\n     * @private\n     */\n\n    this.procedureSets = new ProcedureSets();\n    /**\n     * To check wihether it is a `direct text rendering`.\n     * @default true\n     * @private\n     */\n\n    this.isNormalRender = true;\n    /**\n     * check whether to `use font size` to calculate the shift.\n     * @default false\n     * @private\n     */\n\n    this.isUseFontSize = false;\n    /**\n     * check whether the font is in `italic type`.\n     * @default false\n     * @private\n     */\n\n    this.isItalic = false;\n    /**\n     * Check whether it is an `emf Text Matrix`.\n     * @default false\n     * @private\n     */\n\n    this.isEmfTextScaled = false;\n    /**\n     * Check whether it is an `emf` call.\n     * @default false\n     * @private\n     */\n\n    this.isEmf = false;\n    /**\n     * Check whether it is an `emf plus` call.\n     * @default false\n     * @private\n     */\n\n    this.isEmfPlus = false;\n    /**\n     * Check whether it is in `base line format`.\n     * @default true\n     * @private\n     */\n\n    this.isBaselineFormat = true;\n    /**\n     * Emf Text `Scaling Factor`.\n     * @private\n     */\n\n    this.emfScalingFactor = new SizeF(0, 0);\n    /**\n     * To check whether the `last color space` of document and garphics is saved.\n     * @private\n     */\n\n    this.colorSpaceChanged = false;\n    /**\n     * Stores an instance of `DictionaryProperties`.\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties();\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n\n    this.isOverloadWithPosition = false;\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n\n    this.isPointOverload = false;\n    /**\n     * Current colorspaces.\n     * @hidden\n     * @private\n     */\n\n    this.currentColorSpaces = ['RGB', 'CMYK', 'GrayScale', 'Indexed'];\n    /**\n     * Checks the current image `is optimized` or not.\n     * @default false.\n     * @private\n     */\n\n    this.isImageOptimized = false;\n    /**\n     * Stores the `graphics states`.\n     * @private\n     */\n\n    this.graphicsState = [];\n    /**\n     * Indicates whether the object `had trasparency`.\n     * @default false\n     * @private\n     */\n\n    this.istransparencySet = false;\n    /**\n     * Stores the instance of `PdfAutomaticFieldInfoCollection` class .\n     * @default null\n     * @private\n     */\n\n    this.internalAutomaticFields = null;\n    /**\n     * Stores the index of the start line that should draw with in the next page.\n     * @private\n     */\n\n    this.startCutIndex = -1;\n    this.getResources = arg2;\n    this.canvasSize = arg1;\n\n    if (arg3 instanceof PdfStreamWriter) {\n      this.pdfStreamWriter = arg3;\n    } else {\n      this.pdfStreamWriter = new PdfStreamWriter(arg3);\n    }\n\n    this.initialize();\n  }\n\n  Object.defineProperty(PdfGraphics.prototype, \"stringLayoutResult\", {\n    //  Properties\n\n    /**\n     * Returns the `result` after drawing string.\n     * @private\n     */\n    get: function () {\n      return this.pdfStringLayoutResult;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"size\", {\n    /**\n     * Gets the `size` of the canvas.\n     * @private\n     */\n    get: function () {\n      return this.canvasSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"mediaBoxUpperRightBound\", {\n    /**\n     * Gets and Sets the value of `MediaBox upper right bound`.\n     * @private\n     */\n    get: function () {\n      if (typeof this.internalMediaBoxUpperRightBound === 'undefined') {\n        this.internalMediaBoxUpperRightBound = 0;\n      }\n\n      return this.internalMediaBoxUpperRightBound;\n    },\n    set: function (value) {\n      this.internalMediaBoxUpperRightBound = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"clientSize\", {\n    /**\n     * Gets the `size` of the canvas reduced by margins and page templates.\n     * @private\n     */\n    get: function () {\n      return new SizeF(this.clipBounds.width, this.clipBounds.height);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"colorSpace\", {\n    /**\n     * Gets or sets the current `color space` of the document\n     * @private\n     */\n    get: function () {\n      return this.currentColorSpace;\n    },\n    set: function (value) {\n      this.currentColorSpace = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"streamWriter\", {\n    /**\n     * Gets the `stream writer`.\n     * @private\n     */\n    get: function () {\n      return this.pdfStreamWriter;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"matrix\", {\n    /**\n     * Gets the `transformation matrix` reflecting current transformation.\n     * @private\n     */\n    get: function () {\n      if (this.transformationMatrix == null) {\n        this.transformationMatrix = new PdfTransformationMatrix();\n      }\n\n      return this.transformationMatrix;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"layer\", {\n    /**\n     * Gets the `layer` for the graphics, if exists.\n     * @private\n     */\n    get: function () {\n      return this.pageLayer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"page\", {\n    /**\n     * Gets the `page` for this graphics, if exists.\n     * @private\n     */\n    get: function () {\n      return this.pageLayer.page;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"automaticFields\", {\n    get: function () {\n      if (this.internalAutomaticFields == null || typeof this.internalAutomaticFields === 'undefined') {\n        this.internalAutomaticFields = new PdfAutomaticFieldInfoCollection();\n      }\n\n      return this.internalAutomaticFields;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  /**\n   * `Initializes` this instance.\n   * @private\n   */\n\n  PdfGraphics.prototype.initialize = function () {\n    this.bStateSaved = false;\n    this.currentPen = null;\n    this.currentBrush = null;\n    this.currentFont = null;\n    this.currentColorSpace = PdfColorSpace.Rgb;\n    this.bCSInitialized = false;\n    this.transformationMatrix = null;\n    this.previousTextRenderingMode = -1; //.Fill;\n\n    this.previousCharacterSpacing = -1.0;\n    this.previousWordSpacing = -1.0;\n    this.previousTextScaling = -100.0; // this.m_trasparencies = null;\n\n    this.currentStringFormat = null;\n    this.clipBounds = new RectangleF(new PointF(0, 0), this.size);\n    this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n  };\n\n  PdfGraphics.prototype.drawPdfTemplate = function (template, location, size) {\n    if (typeof size === 'undefined') {\n      if (template == null) {\n        throw Error('ArgumentNullException-template');\n      }\n\n      this.drawPdfTemplate(template, location, template.size);\n    } else {\n      // let crossTable : PdfCrossTable = null;\n      // if (this.pageLayer != null) {\n      //     crossTable = (this.page as PdfPage).section.parentDocument.crossTable;\n      // }\n      if (template == null) {\n        throw Error('ArgumentNullException-template');\n      }\n\n      var scaleX = template.width > 0 ? size.width / template.width : 1;\n      var scaleY = template.height > 0 ? size.height / template.height : 1;\n      var bNeedScale = !(scaleX === 1 && scaleY === 1); // Save state.\n\n      var state = this.save(); // Take into consideration that rect location is bottom/left.\n\n      var matrix = new PdfTransformationMatrix();\n\n      if (this.pageLayer != null) {\n        this.getTranslateTransform(location.x, location.y + size.height, matrix);\n      }\n\n      if (bNeedScale) {\n        this.getScaleTransform(scaleX, scaleY, matrix);\n      }\n\n      this.pdfStreamWriter.modifyCtm(matrix); // Output template.\n\n      var resources = this.getResources.getResources();\n      var name_1 = resources.getName(template);\n      this.pdfStreamWriter.executeObject(name_1); // Restore state.\n\n      this.restore(state); //Transfer automatic fields from template.\n\n      var g = template.graphics;\n\n      if (g != null) {\n        for (var index = 0; index < g.automaticFields.automaticFields.length; index++) {\n          var fieldInfo = g.automaticFields.automaticFields[index];\n          var newLocation = new PointF(fieldInfo.location.x + location.x, fieldInfo.location.y + location.y);\n          var scalingX = template.size.width == 0 ? 0 : size.width / template.size.width;\n          var scalingY = template.size.height == 0 ? 0 : size.height / template.size.height;\n          this.automaticFields.add(new PdfAutomaticFieldInfo(fieldInfo.field, newLocation, scalingX, scalingY));\n          this.page.dictionary.modify();\n        }\n      }\n\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.imageB);\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.imageC);\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.imageI);\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n    }\n  };\n  /* tslint:disable */\n\n  /**\n   * @public\n   */\n\n\n  PdfGraphics.prototype.drawString = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n    if (typeof arg1 === 'string' && arg2 instanceof PdfFont && (arg3 instanceof PdfPen || arg3 === null) && (arg4 instanceof PdfBrush || arg4 === null) && typeof arg5 === 'number' && typeof arg6 === 'number' && (arg7 instanceof PdfStringFormat || arg7 === null) && typeof arg8 === 'undefined') {\n      this.isOverloadWithPosition = true;\n      this.drawString(arg1, arg2, arg3, arg4, arg5, arg6, this.clientSize.width - arg5, 0, arg7);\n    } else {\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      var temparg6 = arg6;\n      var temparg7 = arg7;\n      var temparg8 = arg8;\n      var temparg9 = arg9;\n      var layouter = new PdfStringLayouter();\n      var result = layouter.layout(arg1, arg2, temparg9, new SizeF(temparg7, temparg8), this.isOverloadWithPosition, this.clientSize);\n\n      if (!result.empty) {\n        var rect = this.checkCorrectLayoutRectangle(result.actualSize, temparg5, temparg6, temparg9);\n\n        if (temparg7 <= 0) {\n          temparg5 = rect.x;\n          temparg7 = rect.width;\n        }\n\n        if (temparg8 <= 0) {\n          temparg6 = rect.y;\n          temparg8 = rect.height;\n        }\n\n        this.drawStringLayoutResult(result, arg2, temparg3, temparg4, new RectangleF(temparg5, temparg6, temparg7, temparg8), temparg9);\n        this.isEmfTextScaled = false;\n        this.emfScalingFactor = new SizeF(0, 0);\n      }\n\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n      this.isNormalRender = true;\n      this.pdfStringLayoutResult = result;\n      this.isUseFontSize = false;\n    }\n  };\n  /* tslint:enable */\n\n\n  PdfGraphics.prototype.drawLine = function (arg1, arg2, arg3, arg4, arg5) {\n    if (arg2 instanceof PointF) {\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      this.drawLine(arg1, temparg2.x, temparg2.y, temparg3.x, temparg3.y);\n    } else {\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      this.stateControl(arg1, null, null);\n      var sw = this.streamWriter;\n      sw.beginPath(temparg2, temparg3);\n      sw.appendLineSegment(temparg4, temparg5);\n      sw.strokePath();\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n    }\n  };\n  /* tslint:disable */\n\n\n  PdfGraphics.prototype.drawRectangle = function (arg1, arg2, arg3, arg4, arg5, arg6) {\n    if (arg1 instanceof PdfPen && typeof arg2 === 'number') {\n      var temparg3 = arg3;\n      this.drawRectangle(arg1, null, arg2, temparg3, arg4, arg5);\n    } else if (arg1 instanceof PdfBrush && typeof arg2 === 'number') {\n      var temparg3 = arg3;\n      this.drawRectangle(null, arg1, arg2, temparg3, arg4, arg5);\n    } else {\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      var temparg6 = arg6;\n\n      if (arg2 instanceof PdfTilingBrush) {\n        this.bCSInitialized = false;\n        var xOffset = this.matrix.matrix.offsetX + temparg3;\n        var yOffset = void 0;\n\n        if (this.layer != null && this.layer.page != null) {\n          yOffset = this.layer.page.size.height - this.matrix.matrix.offsetY + temparg4;\n        } else {\n          yOffset = this.clientSize.height - this.matrix.matrix.offsetY + temparg4;\n        }\n\n        arg2.location = new PointF(xOffset, yOffset);\n        arg2.graphics.colorSpace = this.colorSpace;\n      } else if (arg2 instanceof PdfGradientBrush) {\n        arg2.colorSpace = this.colorSpace;\n      }\n\n      if (arg2 instanceof PdfSolidBrush && arg2.color.isEmpty) {\n        arg2 = null;\n      }\n\n      var temparg1 = arg1;\n      var temparg2 = arg2;\n      this.stateControl(temparg1, temparg2, null);\n      this.streamWriter.appendRectangle(temparg3, temparg4, temparg5, temparg6);\n      this.drawPathHelper(temparg1, temparg2, false);\n    }\n  };\n\n  PdfGraphics.prototype.drawPathHelper = function (arg1, arg2, arg3, arg4) {\n    if (typeof arg3 === 'boolean') {\n      var temparg3 = arg3;\n      this.drawPathHelper(arg1, arg2, PdfFillMode.Winding, temparg3);\n    } else {\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var isPen = arg1 != null;\n      var isBrush = arg2 != null;\n      var isEvenOdd = temparg3 === PdfFillMode.Alternate;\n\n      if (isPen && isBrush) {\n        this.streamWriter.fillStrokePath(isEvenOdd);\n      } else if (!isPen && !isBrush) {\n        this.streamWriter.endPath();\n      } else if (isPen) {\n        this.streamWriter.strokePath();\n      } else {\n        this.streamWriter.fillPath(isEvenOdd);\n      }\n    }\n  };\n  /* tslint:disable */\n\n\n  PdfGraphics.prototype.drawImage = function (arg1, arg2, arg3, arg4, arg5) {\n    if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n      var size = arg1.physicalDimension;\n      this.drawImage(arg1, arg2, arg3, size.width, size.height);\n    } else {\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      arg1.save();\n      var matrix = new PdfTransformationMatrix();\n      this.getTranslateTransform(temparg2, temparg3 + temparg5, matrix);\n      this.getScaleTransform(arg4, arg5, matrix);\n      this.pdfStreamWriter.write('q');\n      this.pdfStreamWriter.modifyCtm(matrix); // Output template.\n\n      var resources = this.getResources.getResources();\n\n      if (typeof this.pageLayer !== 'undefined' && this.page != null) {\n        resources.document = this.page.document;\n      }\n\n      var name_2 = resources.getName(arg1);\n\n      if (typeof this.pageLayer !== 'undefined') {\n        this.page.setResources(resources);\n      }\n\n      this.pdfStreamWriter.executeObject(name_2);\n      this.pdfStreamWriter.write(Operators.restoreState);\n      this.pdfStreamWriter.write(Operators.newLine);\n      var resource = this.getResources.getResources();\n      resource.requireProcedureSet(this.procedureSets.imageB);\n      resource.requireProcedureSet(this.procedureSets.imageC);\n      resource.requireProcedureSet(this.procedureSets.imageI);\n      resource.requireProcedureSet(this.procedureSets.text);\n    }\n  }; //Implementation\n\n  /* tslint:disable */\n\n  /**\n   * Returns `bounds` of the line info.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getLineBounds = function (lineIndex, result, font, layoutRectangle, format) {\n    var bounds;\n\n    if (!result.empty && lineIndex < result.lineCount && lineIndex >= 0) {\n      var line = result.lines[lineIndex];\n      var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n      var y = vShift + layoutRectangle.y + result.lineHeight * lineIndex;\n      var lineWidth = line.width;\n      var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n      var lineIndent = this.getLineIndent(line, format, layoutRectangle, lineIndex === 0);\n      hShift += !this.rightToLeft(format) ? lineIndent : 0;\n      var x = layoutRectangle.x + hShift;\n      /* tslint:disable */\n\n      var width = !this.shouldJustify(line, layoutRectangle.width, format) ? lineWidth - lineIndent : layoutRectangle.width - lineIndent;\n      /* tslint:enable */\n\n      var height = result.lineHeight;\n      bounds = new RectangleF(x, y, width, height);\n    } else {\n      bounds = new RectangleF(0, 0, 0, 0);\n    }\n\n    return bounds;\n  };\n  /**\n   * Creates `lay outed rectangle` depending on the text settings.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.checkCorrectLayoutRectangle = function (textSize, x, y, format) {\n    var layoutedRectangle = new RectangleF(x, y, textSize.width, textSize.width);\n\n    if (format != null) {\n      switch (format.alignment) {\n        case PdfTextAlignment.Center:\n          layoutedRectangle.x -= layoutedRectangle.width / 2;\n          break;\n\n        case PdfTextAlignment.Right:\n          layoutedRectangle.x -= layoutedRectangle.width;\n          break;\n      }\n\n      switch (format.lineAlignment) {\n        case PdfVerticalAlignment.Middle:\n          layoutedRectangle.y -= layoutedRectangle.height / 2;\n          break;\n\n        case PdfVerticalAlignment.Bottom:\n          layoutedRectangle.y -= layoutedRectangle.height;\n          break;\n      }\n    }\n\n    return layoutedRectangle;\n  };\n  /**\n   * Sets the `layer` for the graphics.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.setLayer = function (layer) {\n    this.pageLayer = layer;\n    var page = layer.page;\n\n    if (page != null && typeof page !== 'undefined') {\n      page.beginSave = this.pageSave;\n    }\n  };\n  /**\n   * Adding page number field before page saving.\n   * @private\n   */\n\n  /* tslint:disable */\n\n\n  PdfGraphics.prototype.pageSave = function (page) {\n    if (page.graphics.automaticFields != null) {\n      for (var i = 0; i < page.graphics.automaticFields.automaticFields.length; i++) {\n        var fieldInfo = page.graphics.automaticFields.automaticFields[i];\n        fieldInfo.field.performDraw(page.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);\n      }\n    }\n  };\n  /**\n   * `Draws a layout result`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.drawStringLayoutResult = function (result, font, pen, brush, layoutRectangle, format) {\n    if (!result.empty) {\n      this.applyStringSettings(font, pen, brush, format, layoutRectangle); // Set text scaling\n\n      var textScaling = format != null ? format.horizontalScalingFactor : 100.0;\n\n      if (textScaling !== this.previousTextScaling && !this.isEmfTextScaled) {\n        this.pdfStreamWriter.setTextScaling(textScaling);\n        this.previousTextScaling = textScaling;\n      }\n\n      var height = format == null || format.lineSpacing === 0 ? font.height : format.lineSpacing + font.height;\n      var subScript = format != null && format.subSuperScript === PdfSubSuperScript.SubScript;\n      var shift = 0;\n      shift = subScript ? height - (font.height + font.metrics.getDescent(format)) : height - font.metrics.getAscent(format);\n      this.shift = shift;\n      this.pdfStreamWriter.startNextLine(layoutRectangle.x, layoutRectangle.y - shift);\n      this.pdfStreamWriter.setLeading(+height);\n      var resultHeight = 0;\n      var remainingString = '';\n\n      for (var i = 0; i < result.lines.length; i++) {\n        resultHeight += result.lineHeight;\n\n        if (layoutRectangle.y + resultHeight > this.clientSize.height) {\n          this.startCutIndex = i;\n          break;\n        }\n      }\n\n      for (var j = this.startCutIndex; j < result.lines.length && j >= 0; j++) {\n        remainingString += result.lines[j].text;\n      }\n\n      var bounds = new RectangleF(layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height);\n      this.drawLayoutResult(result, font, format, layoutRectangle);\n      this.underlineStrikeoutText(pen, brush, result, font, bounds, format);\n      this.isEmfPlus = false;\n      this.isUseFontSize = false;\n\n      if (this.startCutIndex !== -1) {\n        var page = this.getNextPage();\n        page.graphics.drawString(remainingString, font, pen, brush, layoutRectangle.x, 0, layoutRectangle.width, 0, format);\n      }\n    } else {\n      throw new Error('ArgumentNullException:result');\n    }\n  };\n  /**\n   * Gets the `next page`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getNextPage = function () {\n    var section = this.currentPage.section;\n    var nextPage = null;\n    var index = section.indexOf(this.currentPage);\n\n    if (index === section.count - 1) {\n      nextPage = section.add();\n    } else {\n      nextPage = section.getPages()[index + 1];\n    }\n\n    return nextPage;\n  };\n\n  PdfGraphics.prototype.setClip = function (rectangle, mode) {\n    if (typeof mode === 'undefined') {\n      this.setClip(rectangle, PdfFillMode.Winding);\n    } else {\n      this.pdfStreamWriter.appendRectangle(rectangle);\n      this.pdfStreamWriter.clipPath(mode === PdfFillMode.Alternate);\n    }\n  };\n  /**\n   * Applies all the `text settings`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.applyStringSettings = function (font, pen, brush, format, bounds) {\n    if (brush instanceof PdfTilingBrush) {\n      this.bCSInitialized = false;\n      brush.graphics.colorSpace = this.colorSpace;\n    } else if (brush instanceof PdfGradientBrush) {\n      this.bCSInitialized = false;\n      brush.colorSpace = this.colorSpace;\n    }\n\n    var setLineWidth = false;\n    var tm = this.getTextRenderingMode(pen, brush, format);\n    this.stateControl(pen, brush, font, format);\n    this.pdfStreamWriter.beginText();\n\n    if (tm !== this.previousTextRenderingMode) {\n      this.pdfStreamWriter.setTextRenderingMode(tm);\n      this.previousTextRenderingMode = tm;\n    } // Set character spacing.\n\n\n    var cs = format != null ? format.characterSpacing : 0;\n\n    if (cs !== this.previousCharacterSpacing && !this.isEmfTextScaled) {\n      this.pdfStreamWriter.setCharacterSpacing(cs);\n      this.previousCharacterSpacing = cs;\n    } // Set word spacing.\n    // NOTE: it works only if the space code is equal to 32 (0x20).\n\n\n    var ws = format != null ? format.wordSpacing : 0;\n\n    if (ws !== this.previousWordSpacing) {\n      this.pdfStreamWriter.setWordSpacing(ws);\n      this.previousWordSpacing = ws;\n    }\n  };\n  /**\n   * Calculates `shift value` if the text is vertically aligned.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getTextVerticalAlignShift = function (textHeight, boundsHeight, format) {\n    var shift = 0;\n\n    if (boundsHeight >= 0 && format != null && format.lineAlignment !== PdfVerticalAlignment.Top) {\n      switch (format.lineAlignment) {\n        case PdfVerticalAlignment.Middle:\n          shift = (boundsHeight - textHeight) / 2;\n          break;\n\n        case PdfVerticalAlignment.Bottom:\n          shift = boundsHeight - textHeight;\n          break;\n      }\n    }\n\n    return shift;\n  };\n  /* tslint:disable */\n\n  /**\n   * `Draws layout result`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.drawLayoutResult = function (result, font, format, layoutRectangle) {\n    var vAlignShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n\n    if (vAlignShift !== 0) {\n      this.pdfStreamWriter.startNextLine(0, vAlignShift);\n    }\n\n    var ttfFont = font;\n    var unicode = ttfFont != null && ttfFont.isUnicode;\n    var embed = ttfFont != null && ttfFont.isEmbedFont;\n    var lines = result.lines;\n\n    for (var i = 0, len = lines.length; i < len && i !== this.startCutIndex; i++) {\n      var lineInfo = lines[i];\n      var line = lineInfo.text;\n      var lineWidth = lineInfo.width;\n      var hAlignShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n      var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, i === 0);\n      hAlignShift += !this.rightToLeft(format) ? lineIndent : 0;\n\n      if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n        this.pdfStreamWriter.startNextLine(hAlignShift, 0);\n      }\n\n      if (unicode) {\n        this.drawUnicodeLine(lineInfo, layoutRectangle, font, format);\n      } else {\n        this.drawAsciiLine(lineInfo, layoutRectangle, font, format);\n      }\n\n      if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n        this.pdfStreamWriter.startNextLine(-hAlignShift, 0);\n      }\n\n      if (this.isOverloadWithPosition && lines.length > 1) {\n        this.pdfStreamWriter.startNextLine(-layoutRectangle.x, 0);\n        layoutRectangle.x = 0;\n        layoutRectangle.width = this.clientSize.width;\n        this.isOverloadWithPosition = false;\n        this.isPointOverload = true;\n      }\n    }\n\n    this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n\n    if (vAlignShift !== 0) {\n      this.pdfStreamWriter.startNextLine(0, -(vAlignShift - result.lineHeight));\n    }\n\n    this.pdfStreamWriter.endText();\n  };\n  /**\n   * `Draws Ascii line`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.drawAsciiLine = function (lineInfo, layoutRectangle, font, format) {\n    this.justifyLine(lineInfo, layoutRectangle.width, format);\n    var value = '';\n\n    if (lineInfo.text.indexOf('(') !== -1 || lineInfo.text.indexOf(')') !== -1) {\n      for (var i = 0; i < lineInfo.text.length; i++) {\n        if (lineInfo.text[i] === '(') {\n          value += '\\\\\\(';\n        } else if (lineInfo.text[i] === ')') {\n          value += '\\\\\\)';\n        } else {\n          value += lineInfo.text[i];\n        }\n      }\n    }\n\n    if (value === '') {\n      value = lineInfo.text;\n    }\n\n    var line = '(' + value + ')';\n    this.pdfStreamWriter.showNextLineText(new PdfString(line));\n  };\n  /**\n   * Draws unicode line.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.drawUnicodeLine = function (lineInfo, layoutRectangle, font, format) {\n    var line = lineInfo.text;\n    var lineWidth = lineInfo.width;\n    var rtl = format !== null && typeof format !== 'undefined' && format.rightToLeft;\n    /* tslint:disable-next-line:max-line-length */\n\n    var useWordSpace = format !== null && typeof format !== 'undefined' && (format.wordSpacing !== 0 || format.alignment === PdfTextAlignment.Justify);\n    var ttfFont = font;\n    var wordSpacing = this.justifyLine(lineInfo, layoutRectangle.width, format);\n    var rtlRender = new RtlRenderer();\n\n    if (rtl || format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n      var blocks = null;\n      /* tslint:disable-next-line:max-line-length */\n\n      var rightAlign = format !== null && typeof format !== 'undefined' && format.alignment === PdfTextAlignment.Right;\n\n      if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n        /* tslint:disable-next-line:max-line-length */\n        blocks = rtlRender.layout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft ? true : false, useWordSpace, format);\n      } else {\n        blocks = rtlRender.layout(line, ttfFont, rightAlign, useWordSpace, format);\n      }\n\n      var words = null;\n\n      if (blocks.length > 1) {\n        if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n          /* tslint:disable-next-line:max-line-length */\n          words = rtlRender.splitLayout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft ? true : false, useWordSpace, format);\n        } else {\n          words = rtlRender.splitLayout(line, ttfFont, rightAlign, useWordSpace, format);\n        }\n      } else {\n        words = [line];\n      }\n\n      this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n    } else {\n      if (useWordSpace) {\n        var result = this.breakUnicodeLine(line, ttfFont, null);\n        var blocks = result.tokens;\n        var words = result.words;\n        this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n      } else {\n        var token = this.convertToUnicode(line, ttfFont);\n        var value = this.getUnicodeString(token);\n        this.streamWriter.showNextLineText(value);\n      }\n    }\n  };\n  /**\n   * Draws array of unicode tokens.\n   */\n\n  /* tslint:disable */\n\n\n  PdfGraphics.prototype.drawUnicodeBlocks = function (blocks, words, font, format, wordSpacing) {\n    /* tslint:enable */\n    if (blocks == null) {\n      throw new Error('Argument Null Exception : blocks');\n    }\n\n    if (words == null) {\n      throw new Error('Argument Null Exception : words');\n    }\n\n    if (font == null) {\n      throw new Error('Argument Null Exception : font');\n    }\n\n    this.streamWriter.startNextLine();\n    var x = 0;\n    var xShift = 0;\n    var firstLineIndent = 0;\n    var paragraphIndent = 0;\n\n    try {\n      if (format !== null && typeof format !== 'undefined') {\n        firstLineIndent = format.firstLineIndent;\n        paragraphIndent = format.paragraphIndent;\n        format.firstLineIndent = 0;\n        format.paragraphIndent = 0;\n      }\n\n      var spaceWidth = font.getCharWidth(StringTokenizer.whiteSpace, format) + wordSpacing;\n      var characterSpacing = format != null ? format.characterSpacing : 0;\n      var wordSpace = format !== null && typeof format !== 'undefined' && wordSpacing === 0 ? format.wordSpacing : 0;\n      spaceWidth += characterSpacing + wordSpace;\n\n      for (var i = 0; i < blocks.length; i++) {\n        var token = blocks[i];\n        var word = words[i];\n        var tokenWidth = 0;\n\n        if (x !== 0) {\n          this.streamWriter.startNextLine(x, 0);\n        }\n\n        if (word.length > 0) {\n          tokenWidth +=\n          /*Utils.Round(*/\n          font.measureString(word, format).width\n          /*)*/\n          ;\n          tokenWidth += characterSpacing;\n          var val = this.getUnicodeString(token);\n          this.streamWriter.showText(val);\n        }\n\n        if (i !== blocks.length - 1) {\n          x = tokenWidth + spaceWidth;\n          xShift += x;\n        }\n      } // Rolback current line position.\n\n\n      if (xShift > 0) {\n        this.streamWriter.startNextLine(-xShift, 0);\n      }\n    } finally {\n      if (format !== null && typeof format !== 'undefined') {\n        format.firstLineIndent = firstLineIndent;\n        format.paragraphIndent = paragraphIndent;\n      }\n    }\n  };\n  /**\n   * Breakes the unicode line to the words and converts symbols to glyphs.\n   */\n\n\n  PdfGraphics.prototype.breakUnicodeLine = function (line, ttfFont, words) {\n    if (line === null) {\n      throw new Error('Argument Null Exception : line');\n    }\n\n    words = line.split(null);\n    var tokens = [];\n\n    for (var i = 0; i < words.length; i++) {\n      // Reconvert string according to unicode standard.\n      var word = words[i];\n      var token = this.convertToUnicode(word, ttfFont);\n      tokens[i] = token;\n    }\n\n    return {\n      tokens: tokens,\n      words: words\n    };\n  };\n  /**\n   * Creates PdfString from the unicode text.\n   */\n\n\n  PdfGraphics.prototype.getUnicodeString = function (token) {\n    if (token === null) {\n      throw new Error('Argument Null Exception : token');\n    }\n\n    var val = new PdfString(token);\n    val.converted = true;\n    val.encode = InternalEnum.ForceEncoding.Ascii;\n    return val;\n  };\n  /**\n   * Converts to unicode format.\n   */\n\n\n  PdfGraphics.prototype.convertToUnicode = function (text, ttfFont) {\n    var token = null;\n\n    if (text == null) {\n      throw new Error('Argument Null Exception : text');\n    }\n\n    if (ttfFont == null) {\n      throw new Error('Argument Null Exception : ttfFont');\n    }\n\n    if (ttfFont.fontInternal instanceof UnicodeTrueTypeFont) {\n      var ttfReader = ttfFont.fontInternal.ttfReader;\n      ttfFont.setSymbols(text);\n      token = ttfReader.convertString(text);\n      var bytes = PdfString.toUnicodeArray(token, false);\n      token = PdfString.byteToString(bytes);\n    }\n\n    return token;\n  };\n  /**\n   * `Justifies` the line if needed.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.justifyLine = function (lineInfo, boundsWidth, format) {\n    var line = lineInfo.text;\n    var lineWidth = lineInfo.width;\n    var shouldJustify = this.shouldJustify(lineInfo, boundsWidth, format);\n    var hasWordSpacing = format != null && format.wordSpacing !== 0;\n    var symbols = StringTokenizer.spaces;\n    var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n    var wordSpace = 0;\n\n    if (shouldJustify) {\n      // Correct line width.\n      if (hasWordSpacing) {\n        lineWidth -= whitespacesCount * format.wordSpacing;\n      }\n\n      var difference = boundsWidth - lineWidth;\n      wordSpace = difference / whitespacesCount;\n      this.pdfStreamWriter.setWordSpacing(wordSpace);\n    } else {\n      // If there is justifying, but the line shouldn't be justified, restore default word spacing.\n      if (hasWordSpacing) {\n        this.pdfStreamWriter.setWordSpacing(format.wordSpacing);\n      } else {\n        this.pdfStreamWriter.setWordSpacing(0);\n      }\n    }\n\n    return wordSpace;\n  };\n  /**\n   * `Reset` or reinitialize the current graphic value.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.reset = function (size) {\n    this.canvasSize = size;\n    this.streamWriter.clear();\n    this.initialize();\n    this.initializeCoordinates();\n  };\n  /**\n   * Checks whether the line should be `justified`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.shouldJustify = function (lineInfo, boundsWidth, format) {\n    var line = lineInfo.text;\n    var lineWidth = lineInfo.width;\n    var justifyStyle = format != null && format.alignment === PdfTextAlignment.Justify;\n    var goodWidth = boundsWidth >= 0 && lineWidth < boundsWidth;\n    var symbols = StringTokenizer.spaces;\n    var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n    var hasSpaces = whitespacesCount > 0 && line[0] !== StringTokenizer.whiteSpace;\n    var goodLineBreakStyle = (lineInfo.lineType & LineType.LayoutBreak) > 0;\n    /* tslint:disable */\n\n    var shouldJustify = justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.Justify);\n    /* tslint:enable */\n\n    return shouldJustify;\n  };\n  /* tslint:disable */\n\n  /**\n   * Emulates `Underline, Strikeout` of the text if needed.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.underlineStrikeoutText = function (pen, brush, result, font, layoutRectangle, format) {\n    if (font.underline || font.strikeout) {\n      // Calculate line width.\n      var linePen = this.createUnderlineStikeoutPen(pen, brush, font, format);\n\n      if (linePen != null) {\n        // Approximate line positions.\n        var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n        var underlineYOffset = 0;\n        underlineYOffset = layoutRectangle.y + vShift + font.metrics.getAscent(format) + 1.5 * linePen.width;\n        var strikeoutYOffset = layoutRectangle.y + vShift + font.metrics.getHeight(format) / 2 + 1.5 * linePen.width;\n        var lines = result.lines; // Run through the text and draw lines.\n\n        for (var i = 0, len = result.lineCount; i < len; i++) {\n          var lineInfo = lines[i];\n          var line = lineInfo.text;\n          var lineWidth = lineInfo.width;\n          var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n          var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, i === 0);\n          hShift += !this.rightToLeft(format) ? lineIndent : 0;\n          var x1 = layoutRectangle.x + hShift;\n          /* tslint:disable */\n\n          var x2 = !this.shouldJustify(lineInfo, layoutRectangle.width, format) ? x1 + lineWidth - lineIndent : x1 + layoutRectangle.width - lineIndent;\n          /* tslint:enable */\n\n          if (font.underline) {\n            var y = underlineYOffset;\n            this.drawLine(linePen, x1, y, x2, y);\n            underlineYOffset += result.lineHeight;\n          }\n\n          if (font.strikeout) {\n            var y = strikeoutYOffset;\n            this.drawLine(linePen, x1, y, x2, y);\n            strikeoutYOffset += result.lineHeight;\n          }\n\n          if (this.isPointOverload && lines.length > 1) {\n            layoutRectangle.x = 0;\n            layoutRectangle.width = this.clientSize.width;\n          }\n        }\n\n        this.isPointOverload = false;\n      }\n    }\n  };\n  /**\n   * `Creates a pen` for drawing lines in the text.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.createUnderlineStikeoutPen = function (pen, brush, font, format) {\n    // Calculate line width.\n    var lineWidth = font.metrics.getSize(format) / 20;\n    var linePen = null; // Create a pen fo the lines.\n\n    if (pen != null) {\n      linePen = new PdfPen(pen.color, lineWidth);\n    } else if (brush != null) {\n      linePen = new PdfPen(brush, lineWidth);\n    }\n\n    return linePen;\n  };\n  /**\n   * Return `text rendering mode`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getTextRenderingMode = function (pen, brush, format) {\n    var tm = TextRenderingMode.None;\n\n    if (pen != null && brush != null) {\n      tm = TextRenderingMode.FillStroke;\n    } else if (pen != null) {\n      tm = TextRenderingMode.Stroke;\n    } else {\n      tm = TextRenderingMode.Fill;\n    }\n\n    if (format != null && format.clipPath) {\n      tm |= TextRenderingMode.ClipFlag;\n    }\n\n    return tm;\n  };\n  /**\n   * Returns `line indent` for the line.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getLineIndent = function (lineInfo, format, layoutBounds, firstLine) {\n    var lineIndent = 0;\n    var firstParagraphLine = (lineInfo.lineType & LineType.FirstParagraphLine) > 0;\n\n    if (format != null && firstParagraphLine) {\n      lineIndent = firstLine ? format.firstLineIndent : format.paragraphIndent;\n      lineIndent = layoutBounds.width > 0 ? Math.min(layoutBounds.width, lineIndent) : lineIndent;\n    }\n\n    return lineIndent;\n  };\n  /**\n   * Calculates shift value if the line is `horizontaly aligned`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getHorizontalAlignShift = function (lineWidth, boundsWidth, format) {\n    var shift = 0;\n\n    if (boundsWidth >= 0 && format != null && format.alignment !== PdfTextAlignment.Left) {\n      switch (format.alignment) {\n        case PdfTextAlignment.Center:\n          shift = (boundsWidth - lineWidth) / 2;\n          break;\n\n        case PdfTextAlignment.Right:\n          shift = boundsWidth - lineWidth;\n          break;\n      }\n    }\n\n    return shift;\n  };\n  /**\n   * Gets or sets the value that indicates `text direction` mode.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.rightToLeft = function (format) {\n    var rtl = format !== null && typeof format !== 'undefined' && format.rightToLeft;\n\n    if (format !== null && typeof format !== 'undefined') {\n      if (format.textDirection !== PdfTextDirection.None && typeof format.textDirection !== 'undefined') {\n        rtl = true;\n      }\n    }\n\n    return rtl;\n  };\n\n  PdfGraphics.prototype.stateControl = function (pen, brush, font, format) {\n    if (typeof format === 'undefined') {\n      this.stateControl(pen, brush, font, null);\n    } else {\n      if (brush instanceof PdfGradientBrush) {\n        this.bCSInitialized = false;\n        brush.colorSpace = this.colorSpace;\n      }\n\n      if (brush instanceof PdfTilingBrush) {\n        this.bCSInitialized = false;\n        brush.graphics.colorSpace = this.colorSpace;\n      }\n\n      var saveState = false;\n\n      if (brush !== null) {\n        var solidBrush = brush;\n\n        if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n          if (this.colorSpaceChanged === false) {\n            this.lastDocumentCS = this.pageLayer.page.document.colorSpace;\n            this.lastGraphicsCS = this.pageLayer.page.graphics.colorSpace;\n            this.colorSpace = this.pageLayer.page.document.colorSpace;\n            this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n            this.colorSpaceChanged = true;\n          }\n        }\n\n        this.initCurrentColorSpace(this.currentColorSpace);\n      } else if (pen != null) {\n        var pdfPen = pen;\n\n        if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n          /* tslint:disable */\n          this.colorSpace = this.pageLayer.page.document.colorSpace;\n          this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n        }\n\n        this.initCurrentColorSpace(this.currentColorSpace);\n      }\n\n      this.penControl(pen, saveState);\n      this.brushControl(brush, saveState);\n      this.fontControl(font, format, saveState);\n    }\n  };\n  /**\n   * Initializes the `current color space`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.initCurrentColorSpace = function (colorspace) {\n    var re = this.getResources.getResources();\n\n    if (!this.bCSInitialized) {\n      if (this.currentColorSpace != PdfColorSpace.GrayScale) {\n        this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], true);\n        this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], false);\n        this.bCSInitialized = true;\n      } else {\n        this.pdfStreamWriter.setColorSpace('DeviceGray', true);\n        this.pdfStreamWriter.setColorSpace('DeviceGray', false);\n        this.bCSInitialized = true;\n      }\n    }\n  };\n  /**\n   * Controls the `pen state`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.penControl = function (pen, saveState) {\n    if (pen != null) {\n      this.currentPen = pen;\n      /* tslint:disable */\n\n      pen.monitorChanges(this.currentPen, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace, this.matrix.clone());\n      /* tslint:enable */\n\n      this.currentPen = pen.clone();\n    }\n  };\n  /**\n   * Controls the `brush state`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.brushControl = function (brush, saveState) {\n    if (brush != null && typeof brush !== 'undefined') {\n      var b = brush.clone();\n      var lgb = b;\n\n      if (lgb !== null && typeof lgb !== 'undefined' && !(brush instanceof PdfSolidBrush) && !(brush instanceof PdfTilingBrush)) {\n        var m = lgb.matrix;\n        var matrix = this.matrix.clone();\n\n        if (m != null) {\n          m.multiply(matrix);\n          matrix = m;\n        }\n\n        lgb.matrix = matrix;\n      }\n\n      this.currentBrush = lgb;\n      var br = brush;\n      /* tslint:disable */\n\n      b.monitorChanges(this.currentBrush, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace);\n      /* tslint:enable */\n\n      this.currentBrush = brush;\n      brush = null;\n    }\n  };\n  /**\n   * Saves the font and other `font settings`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.fontControl = function (font, format, saveState) {\n    if (font != null) {\n      var curSubSuper = format != null ? format.subSuperScript : PdfSubSuperScript.None;\n      /* tslint:disable */\n\n      var prevSubSuper = this.currentStringFormat != null ? this.currentStringFormat.subSuperScript : PdfSubSuperScript.None;\n      /* tslint:enable */\n\n      if (saveState || font !== this.currentFont || curSubSuper !== prevSubSuper) {\n        var resources = this.getResources.getResources();\n        this.currentFont = font;\n        this.currentStringFormat = format;\n        var size = font.metrics.getSize(format);\n        /* tslint:disable */\n\n        this.isEmfTextScaled = false;\n        var fontName = resources.getName(font);\n        this.pdfStreamWriter.setFont(font, fontName, size);\n      }\n    }\n  };\n\n  PdfGraphics.prototype.setTransparency = function (arg1, arg2, arg3) {\n    if (typeof arg2 === 'undefined') {\n      this.istransparencySet = true;\n      this.setTransparency(arg1, arg1, PdfBlendMode.Normal);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n      this.setTransparency(arg1, arg2, PdfBlendMode.Normal);\n    } else {\n      if (this.trasparencies == null) {\n        this.trasparencies = new TemporaryDictionary();\n      }\n\n      var transp = null;\n      var td = new TransparencyData(arg1, arg2, arg3);\n\n      if (this.trasparencies.containsKey(td)) {\n        transp = this.trasparencies.getValue(td);\n      }\n\n      if (transp == null) {\n        transp = new PdfTransparency(arg1, arg2, arg3);\n        this.trasparencies.setValue(td, transp);\n      }\n\n      var resources = this.getResources.getResources();\n      var name_3 = resources.getName(transp);\n      var sw = this.streamWriter;\n      sw.setGraphicsState(name_3);\n    }\n  };\n\n  PdfGraphics.prototype.clipTranslateMargins = function (x, y, left, top, right, bottom) {\n    if (x instanceof RectangleF && typeof y === 'undefined') {\n      this.clipBounds = x;\n      this.pdfStreamWriter.writeComment('Clip margins.');\n      this.pdfStreamWriter.appendRectangle(x);\n      this.pdfStreamWriter.closePath();\n      this.pdfStreamWriter.clipPath(false);\n      this.pdfStreamWriter.writeComment('Translate co-ordinate system.');\n      this.translateTransform(x.x, x.y);\n    } else if (typeof x === 'number') {\n      var clipArea = new RectangleF(left, top, this.size.width - left - right, this.size.height - top - bottom);\n      this.clipBounds = clipArea;\n      this.pdfStreamWriter.writeComment(\"Clip margins.\");\n      this.pdfStreamWriter.appendRectangle(clipArea);\n      this.pdfStreamWriter.closePath();\n      this.pdfStreamWriter.clipPath(false);\n      this.pdfStreamWriter.writeComment(\"Translate co-ordinate system.\");\n      this.translateTransform(x, y);\n    }\n  };\n  /**\n   * `Updates y` co-ordinate.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.updateY = function (y) {\n    return -y;\n  };\n  /**\n   * Used to `translate the transformation`.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // set pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // set translate transform\n   * page1.graphics.translateTransform(100, 100);\n   * //\n   * // draw the rectangle after applying translate transform\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param offsetX The x-coordinate of the translation.\n   * @param offsetY The y-coordinate of the translation.\n   */\n\n\n  PdfGraphics.prototype.translateTransform = function (offsetX, offsetY) {\n    var matrix = new PdfTransformationMatrix();\n    this.getTranslateTransform(offsetX, offsetY, matrix);\n    this.pdfStreamWriter.modifyCtm(matrix);\n    this.matrix.multiply(matrix);\n  };\n  /**\n   * `Translates` coordinates of the input matrix.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getTranslateTransform = function (x, y, input) {\n    input.translate(x, this.updateY(y));\n    return input;\n  };\n  /* tslint:disable */\n\n  /**\n   * Applies the specified `scaling operation` to the transformation matrix of this Graphics by prepending it to the object's transformation matrix.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // create pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // apply scaling trasformation\n   * page1.graphics.scaleTransform(1.5, 2);\n   * //\n   * // draw the rectangle after applying scaling transform\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param scaleX Scale factor in the x direction.\n   * @param scaleY Scale factor in the y direction.\n   */\n\n  /* tslint:enable */\n\n\n  PdfGraphics.prototype.scaleTransform = function (scaleX, scaleY) {\n    var matrix = new PdfTransformationMatrix();\n    this.getScaleTransform(scaleX, scaleY, matrix);\n    this.pdfStreamWriter.modifyCtm(matrix);\n    this.matrix.multiply(matrix);\n  };\n  /**\n   * `Scales` coordinates of the input matrix.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getScaleTransform = function (x, y, input) {\n    if (input == null) {\n      input = new PdfTransformationMatrix();\n    }\n\n    input.scale(x, y);\n    return input;\n  };\n  /**\n   * Applies the specified `rotation` to the transformation matrix of this Graphics.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // create pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // set RotateTransform with 25 degree of angle\n   * page1.graphics.rotateTransform(25);\n   * //\n   * // draw the rectangle after RotateTransformation\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param angle Angle of rotation in degrees.\n   */\n\n\n  PdfGraphics.prototype.rotateTransform = function (angle) {\n    var matrix = new PdfTransformationMatrix();\n    this.getRotateTransform(angle, matrix);\n    this.pdfStreamWriter.modifyCtm(matrix);\n    this.matrix.multiply(matrix);\n  };\n  /**\n   * `Initializes coordinate system`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.initializeCoordinates = function () {\n    // Matrix equation: TM(T-1)=M', where T=[1 0 0 -1 0 h]\n    this.pdfStreamWriter.writeComment('Change co-ordinate system to left/top.'); // Translate co-ordinates only, don't flip.\n\n    if (this.mediaBoxUpperRightBound !== -this.size.height) {\n      if (this.cropBox == null) {\n        if (this.mediaBoxUpperRightBound === this.size.height || this.mediaBoxUpperRightBound === 0) {\n          this.translateTransform(0, this.updateY(this.size.height));\n        } else {\n          this.translateTransform(0, this.updateY(this.mediaBoxUpperRightBound));\n        }\n      }\n    }\n  };\n  /**\n   * `Rotates` coordinates of the input matrix.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getRotateTransform = function (angle, input) {\n    if (input == null || typeof input === 'undefined') {\n      input = new PdfTransformationMatrix();\n    }\n\n    input.rotate(this.updateY(angle));\n    return input;\n  };\n  /**\n   * `Saves` the current state of this Graphics and identifies the saved state with a GraphicsState.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // create pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // save the graphics state\n   * let state1 : PdfGraphicsState = page1.graphics.save();\n   * //\n   * page1.graphics.scaleTransform(1.5, 2);\n   * // draw the rectangle\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n   * // restore the graphics state\n   * page1.graphics.restore(state1);\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   */\n\n\n  PdfGraphics.prototype.save = function () {\n    var state = new PdfGraphicsState(this, this.matrix.clone());\n    state.brush = this.currentBrush;\n    state.pen = this.currentPen;\n    state.font = this.currentFont;\n    state.colorSpace = this.currentColorSpace;\n    state.characterSpacing = this.previousCharacterSpacing;\n    state.wordSpacing = this.previousWordSpacing;\n    state.textScaling = this.previousTextScaling;\n    state.textRenderingMode = this.previousTextRenderingMode;\n    this.graphicsState.push(state);\n    this.pdfStreamWriter.saveGraphicsState();\n    return state;\n  };\n\n  PdfGraphics.prototype.restore = function (state) {\n    if (typeof state === 'undefined') {\n      if (this.graphicsState.length > 0) {\n        this.doRestoreState();\n      }\n    } else {\n      if (this.graphicsState.indexOf(state) !== -1) {\n        for (;;) {\n          if (this.graphicsState.length === 0) {\n            break;\n          }\n\n          var popState = this.doRestoreState();\n\n          if (popState === state) {\n            break;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * `Restores graphics state`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.doRestoreState = function () {\n    var state = this.graphicsState.pop();\n    this.transformationMatrix = state.matrix;\n    this.currentBrush = state.brush;\n    this.currentPen = state.pen;\n    this.currentFont = state.font;\n    this.currentColorSpace = state.colorSpace;\n    this.previousCharacterSpacing = state.characterSpacing;\n    this.previousWordSpacing = state.wordSpacing;\n    this.previousTextScaling = state.textScaling;\n    this.previousTextRenderingMode = state.textRenderingMode;\n    this.pdfStreamWriter.restoreGraphicsState();\n    return state;\n  };\n  /* tslint:enable */\n\n  /**\n   * `Draws the specified path`, using its original physical size, at the location specified by a coordinate pair.\n   * ```typescript\n   * // create a new PDF document.\n   * let document : PdfDocument = new PdfDocument();\n   * // add a page to the document.\n   * let page1 : PdfPage = document.pages.add();\n   * //Create new PDF path.\n   * let path : PdfPath = new PdfPath();\n   * //Add line path points.\n   * path.addLine(new PointF(10, 100), new PointF(10, 200));\n   * path.addLine(new PointF(100, 100), new PointF(100, 200));\n   * path.addLine(new PointF(100, 200), new PointF(55, 150));\n   * // set pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(255, 0, 0));\n   * // set brush\n   * let brush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n   * // draw the path\n   * page1.graphics.drawPath(pen, brush, path);\n   * //\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param pen Color of the text.\n   * @param brush Color of the text.\n   * @param path Draw path.\n   */\n\n\n  PdfGraphics.prototype.drawPath = function (pen, brush, path) {\n    if (brush instanceof PdfTilingBrush) {\n      this.bCSInitialized = false;\n      brush.graphics.colorSpace = this.colorSpace;\n    } else if (brush instanceof PdfGradientBrush) {\n      this.bCSInitialized = false;\n      brush.colorSpace = this.colorSpace;\n    }\n\n    this.stateControl(pen, brush, null);\n    this.buildUpPath(path.pathPoints, path.pathTypes);\n    this.drawPathHelper(pen, brush, path.fillMode, false);\n  };\n  /* tslint:disable-next-line:max-line-length */\n\n\n  PdfGraphics.prototype.drawArc = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n    if (arg2 instanceof RectangleF) {\n      this.drawArc(arg1, arg2.x, arg2.y, arg2.width, arg2.height, arg3, arg4);\n    } else {\n      if (arg7 !== 0) {\n        this.stateControl(arg1, null, null);\n        this.constructArcPath(arg2, arg3, arg2 + arg4, arg3 + arg5, arg6, arg7);\n        this.drawPathHelper(arg1, null, false);\n      }\n    }\n  };\n  /**\n   * Builds up the path.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.buildUpPath = function (arg1, arg2) {\n    var cnt = arg1.length;\n\n    for (var i = 0; i < cnt; ++i) {\n      var typeValue = 0;\n      var point = arg1[i];\n\n      switch (arg2[i] & PdfGraphics.pathTypesValuesMask) {\n        case PathPointType.Start:\n          this.pdfStreamWriter.beginPath(point.x, point.y);\n          break;\n\n        case PathPointType.Bezier3:\n          var p2 = new PointF(0, 0);\n          var p3 = new PointF(0, 0);\n          var result1 = this.getBezierPoints(arg1, arg2, i, p2, p3);\n          this.pdfStreamWriter.appendBezierSegment(point, result1.p2, result1.p3);\n          i = result1.i;\n          break;\n\n        case PathPointType.Line:\n          this.pdfStreamWriter.appendLineSegment(point);\n          break;\n\n        default:\n          throw new Error('ArithmeticException - Incorrect path formation.');\n      }\n\n      typeValue = arg2[i];\n      this.checkFlags(typeValue);\n    }\n  };\n  /**\n   * Gets the bezier points from respective arrays.\n   * @private\n   */\n\n  /* tslint:disable-next-line:max-line-length */\n\n\n  PdfGraphics.prototype.getBezierPoints = function (points, types, i, p2, p3) {\n    var errorMsg = 'Malforming path.';\n    ++i;\n\n    if ((types[i] & PdfGraphics.pathTypesValuesMask) === PathPointType.Bezier3) {\n      p2 = points[i];\n      ++i;\n\n      if ((types[i] & PdfGraphics.pathTypesValuesMask) === PathPointType.Bezier3) {\n        p3 = points[i];\n      } else {\n        throw new Error('ArgumentException : errorMsg');\n      }\n    } else {\n      throw new Error('ArgumentException : errorMsg');\n    }\n\n    return {\n      i: i,\n      p2: p2,\n      p3: p3\n    };\n  };\n  /**\n   * Checks path point type flags.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.checkFlags = function (type) {\n    if ((type & PathPointType.CloseSubpath) === PathPointType.CloseSubpath) {\n      this.pdfStreamWriter.closePath();\n    }\n  };\n  /**\n   * Constructs the arc path using Bezier curves.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.constructArcPath = function (x1, y1, x2, y2, startAng, sweepAngle) {\n    var points = this.getBezierArc(x1, y1, x2, y2, startAng, sweepAngle);\n\n    if (points.length === 0) {\n      return;\n    }\n\n    var pt = [points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]];\n    this.pdfStreamWriter.beginPath(pt[0], pt[1]);\n    var i = 0;\n\n    for (i = 0; i < points.length; i = i + 8) {\n      pt = [points[i], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5], points[i + 6], points[i + 7]];\n      this.pdfStreamWriter.appendBezierSegment(pt[2], pt[3], pt[4], pt[5], pt[6], pt[7]);\n    }\n  };\n  /**\n   * Gets the bezier points for arc constructing.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getBezierArc = function (numX1, numY1, numX2, numY2, s1, e1) {\n    if (numX1 > numX2) {\n      var tmp = void 0;\n      tmp = numX1;\n      numX1 = numX2;\n      numX2 = tmp;\n    }\n\n    if (numY2 > numY1) {\n      var tmp = void 0;\n      tmp = numY1;\n      numY1 = numY2;\n      numY2 = tmp;\n    }\n\n    var fragAngle1;\n    var numFragments;\n\n    if (Math.abs(e1) <= 90) {\n      fragAngle1 = e1;\n      numFragments = 1;\n    } else {\n      numFragments = Math.ceil(Math.abs(e1) / 90);\n      fragAngle1 = e1 / numFragments;\n    }\n\n    var xcen = (numX1 + numX2) / 2;\n    var ycen = (numY1 + numY2) / 2;\n    var rx = (numX2 - numX1) / 2;\n    var ry = (numY2 - numY1) / 2;\n    var halfAng = fragAngle1 * (Math.PI / 360);\n    var kappa = Math.abs(4.0 / 3.0 * (1.0 - Math.cos(halfAng)) / Math.sin(halfAng));\n    var pointsList = [];\n\n    for (var i = 0; i < numFragments; i++) {\n      var thetaValue0 = (s1 + i * fragAngle1) * (Math.PI / 180);\n      var thetaValue1 = (s1 + (i + 1) * fragAngle1) * (Math.PI / 180);\n      var cos0 = Math.cos(thetaValue0);\n      var cos1 = Math.cos(thetaValue1);\n      var sin0 = Math.sin(thetaValue0);\n      var sin1 = Math.sin(thetaValue1);\n\n      if (fragAngle1 > 0) {\n        /* tslint:disable-next-line:max-line-length */\n        pointsList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 - kappa * sin0), ycen - ry * (sin0 + kappa * cos0), xcen + rx * (cos1 + kappa * sin1), ycen - ry * (sin1 - kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);\n      } else {\n        /* tslint:disable-next-line:max-line-length */\n        pointsList.push(xcen + rx * cos0, ycen - ry * sin0, xcen + rx * (cos0 + kappa * sin0), ycen - ry * (sin0 - kappa * cos0), xcen + rx * (cos1 - kappa * sin1), ycen - ry * (sin1 + kappa * cos1), xcen + rx * cos1, ycen - ry * sin1);\n      }\n    }\n\n    return pointsList;\n  }; // Constants\n\n  /**\n   * Specifies the mask of `path type values`.\n   * @private\n   */\n\n\n  PdfGraphics.pathTypesValuesMask = 0xf;\n  /**\n   * Checks whether the object is `transparencyObject`.\n   * @hidden\n   * @private\n   */\n\n  PdfGraphics.transparencyObject = false;\n  return PdfGraphics;\n}();\n\nexport { PdfGraphics };\n/**\n * `GetResourceEventHandler` class is alternate for event handlers and delegates.\n * @private\n * @hidden\n */\n\nvar GetResourceEventHandler =\n/** @class */\nfunction () {\n  /**\n   * Initialize instance of `GetResourceEventHandler` class.\n   * Alternate for event handlers and delegates.\n   * @private\n   */\n  function GetResourceEventHandler(sender) {\n    this.sender = sender;\n  }\n  /**\n   * Return the instance of `PdfResources` class.\n   * @private\n   */\n\n\n  GetResourceEventHandler.prototype.getResources = function () {\n    return this.sender.getResources();\n  };\n\n  return GetResourceEventHandler;\n}();\n\nexport { GetResourceEventHandler };\n\nvar PdfGraphicsState =\n/** @class */\nfunction () {\n  function PdfGraphicsState(graphics, matrix) {\n    /**\n     * Stores `previous rendering mode`.\n     * @default TextRenderingMode.Fill\n     * @private\n     */\n    this.internalTextRenderingMode = TextRenderingMode.Fill;\n    /**\n     * `Previous character spacing` value or 0.\n     * @default 0.0\n     * @private\n     */\n\n    this.internalCharacterSpacing = 0.0;\n    /**\n     * `Previous word spacing` value or 0.\n     * @default 0.0\n     * @private\n     */\n\n    this.internalWordSpacing = 0.0;\n    /**\n     * The previously used `text scaling value`.\n     * @default 100.0\n     * @private\n     */\n\n    this.internalTextScaling = 100.0;\n    /**\n     * `Current color space`.\n     * @default PdfColorSpace.Rgb\n     * @private\n     */\n\n    this.pdfColorSpace = PdfColorSpace.Rgb;\n\n    if (typeof graphics !== 'undefined') {\n      this.pdfGraphics = graphics;\n      this.transformationMatrix = matrix;\n    }\n  }\n\n  Object.defineProperty(PdfGraphicsState.prototype, \"graphics\", {\n    // Properties\n\n    /**\n     * Gets the parent `graphics object`.\n     * @private\n     */\n    get: function () {\n      return this.pdfGraphics;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"matrix\", {\n    /**\n     * Gets the `current matrix`.\n     * @private\n     */\n    get: function () {\n      return this.transformationMatrix;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"characterSpacing\", {\n    /**\n     * Gets or sets the `current character spacing`.\n     * @private\n     */\n    get: function () {\n      return this.internalCharacterSpacing;\n    },\n    set: function (value) {\n      this.internalCharacterSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"wordSpacing\", {\n    /**\n     * Gets or sets the `word spacing` value.\n     * @private\n     */\n    get: function () {\n      return this.internalWordSpacing;\n    },\n    set: function (value) {\n      this.internalWordSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"textScaling\", {\n    /**\n     * Gets or sets the `text scaling` value.\n     * @private\n     */\n    get: function () {\n      return this.internalTextScaling;\n    },\n    set: function (value) {\n      this.internalTextScaling = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"pen\", {\n    /**\n     * Gets or sets the `current pen` object.\n     * @private\n     */\n    get: function () {\n      return this.pdfPen;\n    },\n    set: function (value) {\n      this.pdfPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"brush\", {\n    /**\n     * Gets or sets the `brush`.\n     * @private\n     */\n    get: function () {\n      return this.pdfBrush;\n    },\n    set: function (value) {\n      this.pdfBrush = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"font\", {\n    /**\n     * Gets or sets the `current font` object.\n     * @private\n     */\n    get: function () {\n      return this.pdfFont;\n    },\n    set: function (value) {\n      this.pdfFont = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"colorSpace\", {\n    /**\n     * Gets or sets the `current color space` value.\n     * @private\n     */\n    get: function () {\n      return this.pdfColorSpace;\n    },\n    set: function (value) {\n      this.pdfColorSpace = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"textRenderingMode\", {\n    /**\n     * Gets or sets the `text rendering mode`.\n     * @private\n     */\n    get: function () {\n      return this.internalTextRenderingMode;\n    },\n    set: function (value) {\n      this.internalTextRenderingMode = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGraphicsState;\n}();\n\nexport { PdfGraphicsState };\n\nvar TransparencyData =\n/** @class */\nfunction () {\n  // Constructors\n\n  /**\n   * Initializes a new instance of the `TransparencyData` class.\n   * @private\n   */\n  function TransparencyData(alphaPen, alphaBrush, blendMode) {\n    this.alphaPen = alphaPen;\n    this.alphaBrush = alphaBrush;\n    this.blendMode = blendMode;\n  }\n\n  return TransparencyData;\n}();","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-graphics.js"],"names":["PdfColorSpace","TextRenderingMode","PdfFillMode","PdfTextAlignment","PdfVerticalAlignment","PdfBlendMode","PdfSubSuperScript","PdfStreamWriter","PdfPen","PdfBrush","PdfSolidBrush","PdfFont","PdfTransformationMatrix","PointF","SizeF","RectangleF","ProcedureSets","PdfString","PdfStringFormat","TemporaryDictionary","PdfTransparency","PdfStringLayouter","LineType","DictionaryProperties","StringTokenizer","PdfAutomaticFieldInfoCollection","PdfAutomaticFieldInfo","Operators","UnicodeTrueTypeFont","InternalEnum","RtlRenderer","PdfTextDirection","PathPointType","PdfGradientBrush","PdfTilingBrush","PdfGraphics","arg1","arg2","arg3","currentColorSpace","Rgb","previousTextRenderingMode","Fill","previousCharacterSpacing","previousWordSpacing","previousTextScaling","procedureSets","isNormalRender","isUseFontSize","isItalic","isEmfTextScaled","isEmf","isEmfPlus","isBaselineFormat","emfScalingFactor","colorSpaceChanged","dictionaryProperties","isOverloadWithPosition","isPointOverload","currentColorSpaces","isImageOptimized","graphicsState","istransparencySet","internalAutomaticFields","startCutIndex","getResources","canvasSize","pdfStreamWriter","initialize","Object","defineProperty","prototype","get","pdfStringLayoutResult","enumerable","configurable","internalMediaBoxUpperRightBound","set","value","clipBounds","width","height","transformationMatrix","pageLayer","page","bStateSaved","currentPen","currentBrush","currentFont","bCSInitialized","currentStringFormat","size","requireProcedureSet","pdf","drawPdfTemplate","template","location","Error","scaleX","scaleY","bNeedScale","state","save","matrix","getTranslateTransform","x","y","getScaleTransform","modifyCtm","resources","name_1","getName","executeObject","restore","g","graphics","index","automaticFields","length","fieldInfo","newLocation","scalingX","scalingY","add","field","dictionary","modify","imageB","imageC","imageI","text","drawString","arg4","arg5","arg6","arg7","arg8","arg9","clientSize","temparg3","temparg4","temparg5","temparg6","temparg7","temparg8","temparg9","layouter","result","layout","empty","rect","checkCorrectLayoutRectangle","actualSize","drawStringLayoutResult","drawLine","temparg2","stateControl","sw","streamWriter","beginPath","appendLineSegment","strokePath","drawRectangle","xOffset","offsetX","yOffset","layer","offsetY","colorSpace","color","isEmpty","temparg1","appendRectangle","drawPathHelper","Winding","isPen","isBrush","isEvenOdd","Alternate","fillStrokePath","endPath","fillPath","drawImage","physicalDimension","write","document","name_2","setResources","restoreState","newLine","resource","getLineBounds","lineIndex","font","layoutRectangle","format","bounds","lineCount","line","lines","vShift","getTextVerticalAlignShift","lineHeight","lineWidth","hShift","getHorizontalAlignShift","lineIndent","getLineIndent","rightToLeft","shouldJustify","textSize","layoutedRectangle","alignment","Center","Right","lineAlignment","Middle","Bottom","setLayer","beginSave","pageSave","i","performDraw","pen","brush","applyStringSettings","textScaling","horizontalScalingFactor","setTextScaling","lineSpacing","subScript","subSuperScript","SubScript","shift","metrics","getDescent","getAscent","startNextLine","setLeading","resultHeight","remainingString","j","drawLayoutResult","underlineStrikeoutText","getNextPage","section","currentPage","nextPage","indexOf","count","getPages","setClip","rectangle","mode","clipPath","setLineWidth","tm","getTextRenderingMode","beginText","setTextRenderingMode","cs","characterSpacing","setCharacterSpacing","ws","wordSpacing","setWordSpacing","textHeight","boundsHeight","Top","vAlignShift","ttfFont","unicode","isUnicode","embed","isEmbedFont","len","lineInfo","hAlignShift","drawUnicodeLine","drawAsciiLine","endText","justifyLine","showNextLineText","rtl","useWordSpace","Justify","rtlRender","textDirection","None","blocks","rightAlign","RightToLeft","words","splitLayout","drawUnicodeBlocks","breakUnicodeLine","tokens","token","convertToUnicode","getUnicodeString","xShift","firstLineIndent","paragraphIndent","spaceWidth","getCharWidth","whiteSpace","wordSpace","word","tokenWidth","measureString","val","showText","split","converted","encode","ForceEncoding","Ascii","fontInternal","ttfReader","setSymbols","convertString","bytes","toUnicodeArray","byteToString","boundsWidth","hasWordSpacing","symbols","spaces","whitespacesCount","getCharsCount","difference","reset","clear","initializeCoordinates","justifyStyle","goodWidth","hasSpaces","goodLineBreakStyle","lineType","LayoutBreak","underline","strikeout","linePen","createUnderlineStikeoutPen","underlineYOffset","strikeoutYOffset","getHeight","x1","x2","getSize","FillStroke","Stroke","ClipFlag","layoutBounds","firstLine","firstParagraphLine","FirstParagraphLine","Math","min","Left","saveState","solidBrush","lastDocumentCS","lastGraphicsCS","initCurrentColorSpace","pdfPen","penControl","brushControl","fontControl","colorspace","re","GrayScale","setColorSpace","monitorChanges","clone","b","lgb","m","multiply","br","curSubSuper","prevSubSuper","fontName","setFont","setTransparency","Normal","trasparencies","transp","td","TransparencyData","containsKey","getValue","setValue","name_3","setGraphicsState","clipTranslateMargins","left","top","right","bottom","writeComment","closePath","translateTransform","clipArea","updateY","input","translate","scaleTransform","scale","rotateTransform","angle","getRotateTransform","mediaBoxUpperRightBound","cropBox","rotate","PdfGraphicsState","textRenderingMode","push","saveGraphicsState","doRestoreState","popState","pop","restoreGraphicsState","drawPath","path","buildUpPath","pathPoints","pathTypes","fillMode","drawArc","constructArcPath","cnt","typeValue","point","pathTypesValuesMask","Start","Bezier3","p2","p3","result1","getBezierPoints","appendBezierSegment","Line","checkFlags","points","types","errorMsg","type","CloseSubpath","y1","y2","startAng","sweepAngle","getBezierArc","pt","numX1","numY1","numX2","numY2","s1","e1","tmp","fragAngle1","numFragments","abs","ceil","xcen","ycen","rx","ry","halfAng","PI","kappa","cos","sin","pointsList","thetaValue0","thetaValue1","cos0","cos1","sin0","sin1","transparencyObject","GetResourceEventHandler","sender","internalTextRenderingMode","internalCharacterSpacing","internalWordSpacing","internalTextScaling","pdfColorSpace","pdfGraphics","pdfBrush","pdfFont","alphaPen","alphaBrush","blendMode"],"mappings":"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","sourcesContent":["/**\n * PdfGraphics.ts class for EJ2-PDF\n */\nimport { PdfColorSpace, TextRenderingMode, PdfFillMode, PdfTextAlignment } from './enum';\nimport { PdfVerticalAlignment, PdfBlendMode } from './enum';\nimport { PdfSubSuperScript } from './fonts/enum';\nimport { PdfStreamWriter } from './../input-output/pdf-stream-writer';\nimport { PdfPen } from './pdf-pen';\nimport { PdfBrush } from './brushes/pdf-brush';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfFont } from './fonts/pdf-font';\nimport { PdfTransformationMatrix } from './pdf-transformation-matrix';\nimport { PointF, SizeF, RectangleF } from './../drawing/pdf-drawing';\nimport { ProcedureSets } from './constants';\nimport { PdfString } from './../primitives/pdf-string';\nimport { PdfStringFormat } from './fonts/pdf-string-format';\nimport { TemporaryDictionary } from './../collections/object-object-pair/dictionary';\nimport { PdfTransparency } from './pdf-transparency';\nimport { PdfStringLayouter, LineType } from './fonts/string-layouter';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { StringTokenizer } from './fonts/string-tokenizer';\nimport { PdfAutomaticFieldInfoCollection } from './../document/automatic-fields/automatic-field-info-collection';\nimport { PdfAutomaticFieldInfo } from './../document/automatic-fields/automatic-field-info';\nimport { Operators } from './../input-output/pdf-operators';\nimport { UnicodeTrueTypeFont } from './fonts/unicode-true-type-font';\nimport { InternalEnum } from './../primitives/pdf-string';\nimport { RtlRenderer } from './fonts/rtl-renderer';\nimport { PdfTextDirection } from './enum';\nimport { PathPointType } from './figures/enum';\nimport { PdfGradientBrush } from './../../implementation/graphics/brushes/pdf-gradient-brush';\nimport { PdfTilingBrush } from './brushes/pdf-tiling-brush';\n/**\n * `PdfGraphics` class represents a graphics context of the objects.\n * It's used for performing all the graphics operations.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * //graphics of the page\n * let page1Graphics : PdfGraphics = page1.graphics;\n * // draw the text on the page1 graphics\n * page1Graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * //\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfGraphics = /** @class */ (function () {\n    function PdfGraphics(arg1, arg2, arg3) {\n        /**\n         * Represents the `Current color space`.\n         * @private\n         */\n        this.currentColorSpace = PdfColorSpace.Rgb;\n        /**\n         * Stores `previous rendering mode`.\n         * @private\n         */\n        this.previousTextRenderingMode = TextRenderingMode.Fill;\n        /**\n         * Previous `character spacing` value or 0.\n         * @private\n         */\n        this.previousCharacterSpacing = 0.0;\n        /**\n         * Previous `word spacing` value or 0.\n         * @private\n         */\n        this.previousWordSpacing = 0.0;\n        /**\n         * The `previously used text scaling` value.\n         * @private\n         */\n        this.previousTextScaling = 100.0;\n        /**\n         * Instance of `ProcedureSets` class.\n         * @private\n         */\n        this.procedureSets = new ProcedureSets();\n        /**\n         * To check wihether it is a `direct text rendering`.\n         * @default true\n         * @private\n         */\n        this.isNormalRender = true;\n        /**\n         * check whether to `use font size` to calculate the shift.\n         * @default false\n         * @private\n         */\n        this.isUseFontSize = false;\n        /**\n         * check whether the font is in `italic type`.\n         * @default false\n         * @private\n         */\n        this.isItalic = false;\n        /**\n         * Check whether it is an `emf Text Matrix`.\n         * @default false\n         * @private\n         */\n        this.isEmfTextScaled = false;\n        /**\n         * Check whether it is an `emf` call.\n         * @default false\n         * @private\n         */\n        this.isEmf = false;\n        /**\n         * Check whether it is an `emf plus` call.\n         * @default false\n         * @private\n         */\n        this.isEmfPlus = false;\n        /**\n         * Check whether it is in `base line format`.\n         * @default true\n         * @private\n         */\n        this.isBaselineFormat = true;\n        /**\n         * Emf Text `Scaling Factor`.\n         * @private\n         */\n        this.emfScalingFactor = new SizeF(0, 0);\n        /**\n         * To check whether the `last color space` of document and garphics is saved.\n         * @private\n         */\n        this.colorSpaceChanged = false;\n        /**\n         * Stores an instance of `DictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isOverloadWithPosition = false;\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isPointOverload = false;\n        /**\n         * Current colorspaces.\n         * @hidden\n         * @private\n         */\n        this.currentColorSpaces = ['RGB', 'CMYK', 'GrayScale', 'Indexed'];\n        /**\n         * Checks the current image `is optimized` or not.\n         * @default false.\n         * @private\n         */\n        this.isImageOptimized = false;\n        /**\n         * Stores the `graphics states`.\n         * @private\n         */\n        this.graphicsState = [];\n        /**\n         * Indicates whether the object `had trasparency`.\n         * @default false\n         * @private\n         */\n        this.istransparencySet = false;\n        /**\n         * Stores the instance of `PdfAutomaticFieldInfoCollection` class .\n         * @default null\n         * @private\n         */\n        this.internalAutomaticFields = null;\n        /**\n         * Stores the index of the start line that should draw with in the next page.\n         * @private\n         */\n        this.startCutIndex = -1;\n        this.getResources = arg2;\n        this.canvasSize = arg1;\n        if (arg3 instanceof PdfStreamWriter) {\n            this.pdfStreamWriter = arg3;\n        }\n        else {\n            this.pdfStreamWriter = new PdfStreamWriter(arg3);\n        }\n        this.initialize();\n    }\n    Object.defineProperty(PdfGraphics.prototype, \"stringLayoutResult\", {\n        //  Properties\n        /**\n         * Returns the `result` after drawing string.\n         * @private\n         */\n        get: function () {\n            return this.pdfStringLayoutResult;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"size\", {\n        /**\n         * Gets the `size` of the canvas.\n         * @private\n         */\n        get: function () {\n            return this.canvasSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"mediaBoxUpperRightBound\", {\n        /**\n         * Gets and Sets the value of `MediaBox upper right bound`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.internalMediaBoxUpperRightBound === 'undefined') {\n                this.internalMediaBoxUpperRightBound = 0;\n            }\n            return this.internalMediaBoxUpperRightBound;\n        },\n        set: function (value) {\n            this.internalMediaBoxUpperRightBound = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"clientSize\", {\n        /**\n         * Gets the `size` of the canvas reduced by margins and page templates.\n         * @private\n         */\n        get: function () {\n            return new SizeF(this.clipBounds.width, this.clipBounds.height);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"colorSpace\", {\n        /**\n         * Gets or sets the current `color space` of the document\n         * @private\n         */\n        get: function () {\n            return this.currentColorSpace;\n        },\n        set: function (value) {\n            this.currentColorSpace = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"streamWriter\", {\n        /**\n         * Gets the `stream writer`.\n         * @private\n         */\n        get: function () {\n            return this.pdfStreamWriter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"matrix\", {\n        /**\n         * Gets the `transformation matrix` reflecting current transformation.\n         * @private\n         */\n        get: function () {\n            if (this.transformationMatrix == null) {\n                this.transformationMatrix = new PdfTransformationMatrix();\n            }\n            return this.transformationMatrix;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"layer\", {\n        /**\n         * Gets the `layer` for the graphics, if exists.\n         * @private\n         */\n        get: function () {\n            return this.pageLayer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"page\", {\n        /**\n         * Gets the `page` for this graphics, if exists.\n         * @private\n         */\n        get: function () {\n            return this.pageLayer.page;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"automaticFields\", {\n        get: function () {\n            if (this.internalAutomaticFields == null || typeof this.internalAutomaticFields === 'undefined') {\n                this.internalAutomaticFields = new PdfAutomaticFieldInfoCollection();\n            }\n            return this.internalAutomaticFields;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Initializes` this instance.\n     * @private\n     */\n    PdfGraphics.prototype.initialize = function () {\n        this.bStateSaved = false;\n        this.currentPen = null;\n        this.currentBrush = null;\n        this.currentFont = null;\n        this.currentColorSpace = PdfColorSpace.Rgb;\n        this.bCSInitialized = false;\n        this.transformationMatrix = null;\n        this.previousTextRenderingMode = (-1); //.Fill;\n        this.previousCharacterSpacing = -1.0;\n        this.previousWordSpacing = -1.0;\n        this.previousTextScaling = -100.0;\n        // this.m_trasparencies = null;\n        this.currentStringFormat = null;\n        this.clipBounds = new RectangleF(new PointF(0, 0), this.size);\n        this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n    };\n    PdfGraphics.prototype.drawPdfTemplate = function (template, location, size) {\n        if (typeof size === 'undefined') {\n            if (template == null) {\n                throw Error('ArgumentNullException-template');\n            }\n            this.drawPdfTemplate(template, location, template.size);\n        }\n        else {\n            // let crossTable : PdfCrossTable = null;\n            // if (this.pageLayer != null) {\n            //     crossTable = (this.page as PdfPage).section.parentDocument.crossTable;\n            // }\n            if (template == null) {\n                throw Error('ArgumentNullException-template');\n            }\n            var scaleX = (template.width > 0) ? size.width / template.width : 1;\n            var scaleY = (template.height > 0) ? size.height / template.height : 1;\n            var bNeedScale = !(scaleX === 1 && scaleY === 1);\n            // Save state.\n            var state = this.save();\n            // Take into consideration that rect location is bottom/left.\n            var matrix = new PdfTransformationMatrix();\n            if (this.pageLayer != null) {\n                this.getTranslateTransform(location.x, location.y + size.height, matrix);\n            }\n            if (bNeedScale) {\n                this.getScaleTransform(scaleX, scaleY, matrix);\n            }\n            this.pdfStreamWriter.modifyCtm(matrix);\n            // Output template.\n            var resources = this.getResources.getResources();\n            var name_1 = resources.getName(template);\n            this.pdfStreamWriter.executeObject(name_1);\n            // Restore state.\n            this.restore(state);\n            //Transfer automatic fields from template.\n            var g = template.graphics;\n            if (g != null) {\n                for (var index = 0; index < g.automaticFields.automaticFields.length; index++) {\n                    var fieldInfo = g.automaticFields.automaticFields[index];\n                    var newLocation = new PointF(fieldInfo.location.x + location.x, fieldInfo.location.y + location.y);\n                    var scalingX = template.size.width == 0 ? 0 : size.width / template.size.width;\n                    var scalingY = template.size.height == 0 ? 0 : size.height / template.size.height;\n                    this.automaticFields.add(new PdfAutomaticFieldInfo(fieldInfo.field, newLocation, scalingX, scalingY));\n                    this.page.dictionary.modify();\n                }\n            }\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageB);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageC);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageI);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n        }\n    };\n    /* tslint:disable */\n    /**\n     * @public\n     */\n    PdfGraphics.prototype.drawString = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n        if (typeof arg1 === 'string' && arg2 instanceof PdfFont && (arg3 instanceof PdfPen || arg3 === null) && (arg4 instanceof PdfBrush || arg4 === null) && typeof arg5 === 'number' && typeof arg6 === 'number' && (arg7 instanceof PdfStringFormat || arg7 === null) && typeof arg8 === 'undefined') {\n            this.isOverloadWithPosition = true;\n            this.drawString(arg1, arg2, arg3, arg4, arg5, arg6, (this.clientSize.width - arg5), 0, arg7);\n        }\n        else {\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            var temparg6 = arg6;\n            var temparg7 = arg7;\n            var temparg8 = arg8;\n            var temparg9 = arg9;\n            var layouter = new PdfStringLayouter();\n            var result = layouter.layout(arg1, arg2, temparg9, new SizeF(temparg7, temparg8), this.isOverloadWithPosition, this.clientSize);\n            if (!result.empty) {\n                var rect = this.checkCorrectLayoutRectangle(result.actualSize, temparg5, temparg6, temparg9);\n                if (temparg7 <= 0) {\n                    temparg5 = rect.x;\n                    temparg7 = rect.width;\n                }\n                if (temparg8 <= 0) {\n                    temparg6 = rect.y;\n                    temparg8 = rect.height;\n                }\n                this.drawStringLayoutResult(result, arg2, temparg3, temparg4, new RectangleF(temparg5, temparg6, temparg7, temparg8), temparg9);\n                this.isEmfTextScaled = false;\n                this.emfScalingFactor = new SizeF(0, 0);\n            }\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n            this.isNormalRender = true;\n            this.pdfStringLayoutResult = result;\n            this.isUseFontSize = false;\n        }\n    }; /* tslint:enable */\n    PdfGraphics.prototype.drawLine = function (arg1, arg2, arg3, arg4, arg5) {\n        if (arg2 instanceof PointF) {\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            this.drawLine(arg1, temparg2.x, temparg2.y, temparg3.x, temparg3.y);\n        }\n        else {\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            this.stateControl(arg1, null, null);\n            var sw = this.streamWriter;\n            sw.beginPath(temparg2, temparg3);\n            sw.appendLineSegment(temparg4, temparg5);\n            sw.strokePath();\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n        }\n    };\n    /* tslint:disable */\n    PdfGraphics.prototype.drawRectangle = function (arg1, arg2, arg3, arg4, arg5, arg6) {\n        if (arg1 instanceof PdfPen && typeof arg2 === 'number') {\n            var temparg3 = arg3;\n            this.drawRectangle(arg1, null, arg2, temparg3, arg4, arg5);\n        }\n        else if (arg1 instanceof PdfBrush && typeof arg2 === 'number') {\n            var temparg3 = arg3;\n            this.drawRectangle(null, arg1, arg2, temparg3, arg4, arg5);\n        }\n        else {\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            var temparg6 = arg6;\n            if ((arg2 instanceof PdfTilingBrush)) {\n                this.bCSInitialized = false;\n                var xOffset = (this.matrix.matrix.offsetX + temparg3);\n                var yOffset = void 0;\n                if (((this.layer != null) && (this.layer.page != null))) {\n                    yOffset = ((this.layer.page.size.height - this.matrix.matrix.offsetY) + temparg4);\n                }\n                else {\n                    yOffset = ((this.clientSize.height - this.matrix.matrix.offsetY) + temparg4);\n                }\n                (arg2).location = new PointF(xOffset, yOffset);\n                (arg2).graphics.colorSpace = this.colorSpace;\n            }\n            else if ((arg2 instanceof PdfGradientBrush)) {\n                arg2.colorSpace = this.colorSpace;\n            }\n            if (arg2 instanceof PdfSolidBrush && arg2.color.isEmpty) {\n                arg2 = null;\n            }\n            var temparg1 = arg1;\n            var temparg2 = arg2;\n            this.stateControl(temparg1, temparg2, null);\n            this.streamWriter.appendRectangle(temparg3, temparg4, temparg5, temparg6);\n            this.drawPathHelper(temparg1, temparg2, false);\n        }\n    };\n    PdfGraphics.prototype.drawPathHelper = function (arg1, arg2, arg3, arg4) {\n        if (typeof arg3 === 'boolean') {\n            var temparg3 = arg3;\n            this.drawPathHelper(arg1, arg2, PdfFillMode.Winding, temparg3);\n        }\n        else {\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var isPen = arg1 != null;\n            var isBrush = arg2 != null;\n            var isEvenOdd = (temparg3 === PdfFillMode.Alternate);\n            if (isPen && isBrush) {\n                this.streamWriter.fillStrokePath(isEvenOdd);\n            }\n            else if (!isPen && !isBrush) {\n                this.streamWriter.endPath();\n            }\n            else if (isPen) {\n                this.streamWriter.strokePath();\n            }\n            else {\n                this.streamWriter.fillPath(isEvenOdd);\n            }\n        }\n    };\n    /* tslint:disable */\n    PdfGraphics.prototype.drawImage = function (arg1, arg2, arg3, arg4, arg5) {\n        if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            var size = arg1.physicalDimension;\n            this.drawImage(arg1, arg2, arg3, size.width, size.height);\n        }\n        else {\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            arg1.save();\n            var matrix = new PdfTransformationMatrix();\n            this.getTranslateTransform(temparg2, (temparg3 + temparg5), matrix);\n            this.getScaleTransform(arg4, arg5, matrix);\n            this.pdfStreamWriter.write('q');\n            this.pdfStreamWriter.modifyCtm(matrix);\n            // Output template.\n            var resources = this.getResources.getResources();\n            if (typeof this.pageLayer !== 'undefined' && this.page != null) {\n                resources.document = this.page.document;\n            }\n            var name_2 = resources.getName(arg1);\n            if (typeof this.pageLayer !== 'undefined') {\n                this.page.setResources(resources);\n            }\n            this.pdfStreamWriter.executeObject(name_2);\n            this.pdfStreamWriter.write(Operators.restoreState);\n            this.pdfStreamWriter.write(Operators.newLine);\n            var resource = this.getResources.getResources();\n            resource.requireProcedureSet(this.procedureSets.imageB);\n            resource.requireProcedureSet(this.procedureSets.imageC);\n            resource.requireProcedureSet(this.procedureSets.imageI);\n            resource.requireProcedureSet(this.procedureSets.text);\n        }\n    };\n    //Implementation\n    /* tslint:disable */\n    /**\n     * Returns `bounds` of the line info.\n     * @private\n     */\n    PdfGraphics.prototype.getLineBounds = function (lineIndex, result, font, layoutRectangle, format) {\n        var bounds;\n        if (!result.empty && lineIndex < result.lineCount && lineIndex >= 0) {\n            var line = result.lines[lineIndex];\n            var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n            var y = vShift + layoutRectangle.y + (result.lineHeight * lineIndex);\n            var lineWidth = line.width;\n            var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n            var lineIndent = this.getLineIndent(line, format, layoutRectangle, (lineIndex === 0));\n            hShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n            var x = layoutRectangle.x + hShift;\n            /* tslint:disable */\n            var width = (!this.shouldJustify(line, layoutRectangle.width, format)) ? lineWidth - lineIndent : layoutRectangle.width - lineIndent; /* tslint:enable */\n            var height = result.lineHeight;\n            bounds = new RectangleF(x, y, width, height);\n        }\n        else {\n            bounds = new RectangleF(0, 0, 0, 0);\n        }\n        return bounds;\n    };\n    /**\n     * Creates `lay outed rectangle` depending on the text settings.\n     * @private\n     */\n    PdfGraphics.prototype.checkCorrectLayoutRectangle = function (textSize, x, y, format) {\n        var layoutedRectangle = new RectangleF(x, y, textSize.width, textSize.width);\n        if (format != null) {\n            switch (format.alignment) {\n                case PdfTextAlignment.Center:\n                    layoutedRectangle.x -= layoutedRectangle.width / 2;\n                    break;\n                case PdfTextAlignment.Right:\n                    layoutedRectangle.x -= layoutedRectangle.width;\n                    break;\n            }\n            switch (format.lineAlignment) {\n                case PdfVerticalAlignment.Middle:\n                    layoutedRectangle.y -= layoutedRectangle.height / 2;\n                    break;\n                case PdfVerticalAlignment.Bottom:\n                    layoutedRectangle.y -= layoutedRectangle.height;\n                    break;\n            }\n        }\n        return layoutedRectangle;\n    };\n    /**\n     * Sets the `layer` for the graphics.\n     * @private\n     */\n    PdfGraphics.prototype.setLayer = function (layer) {\n        this.pageLayer = layer;\n        var page = layer.page;\n        if (page != null && typeof page !== 'undefined') {\n            page.beginSave = this.pageSave;\n        }\n    };\n    /**\n     * Adding page number field before page saving.\n     * @private\n     */\n    /* tslint:disable */\n    PdfGraphics.prototype.pageSave = function (page) {\n        if (page.graphics.automaticFields != null) {\n            for (var i = 0; i < page.graphics.automaticFields.automaticFields.length; i++) {\n                var fieldInfo = page.graphics.automaticFields.automaticFields[i];\n                fieldInfo.field.performDraw(page.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);\n            }\n        }\n    };\n    /**\n     * `Draws a layout result`.\n     * @private\n     */\n    PdfGraphics.prototype.drawStringLayoutResult = function (result, font, pen, brush, layoutRectangle, format) {\n        if (!result.empty) {\n            this.applyStringSettings(font, pen, brush, format, layoutRectangle);\n            // Set text scaling\n            var textScaling = (format != null) ? format.horizontalScalingFactor : 100.0;\n            if (textScaling !== this.previousTextScaling && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.setTextScaling(textScaling);\n                this.previousTextScaling = textScaling;\n            }\n            var height = (format == null || format.lineSpacing === 0) ? font.height : format.lineSpacing + font.height;\n            var subScript = (format != null && format.subSuperScript === PdfSubSuperScript.SubScript);\n            var shift = 0;\n            shift = (subScript) ? height - (font.height + font.metrics.getDescent(format)) : (height - font.metrics.getAscent(format));\n            this.shift = shift;\n            this.pdfStreamWriter.startNextLine(layoutRectangle.x, layoutRectangle.y - shift);\n            this.pdfStreamWriter.setLeading(+height);\n            var resultHeight = 0;\n            var remainingString = '';\n            for (var i = 0; i < result.lines.length; i++) {\n                resultHeight += result.lineHeight;\n                if ((layoutRectangle.y + resultHeight) > this.clientSize.height) {\n                    this.startCutIndex = i;\n                    break;\n                }\n            }\n            for (var j = this.startCutIndex; (j < result.lines.length && j >= 0); j++) {\n                remainingString += result.lines[j].text;\n            }\n            var bounds = new RectangleF(layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height);\n            this.drawLayoutResult(result, font, format, layoutRectangle);\n            this.underlineStrikeoutText(pen, brush, result, font, bounds, format);\n            this.isEmfPlus = false;\n            this.isUseFontSize = false;\n            if (this.startCutIndex !== -1) {\n                var page = this.getNextPage();\n                page.graphics.drawString(remainingString, font, pen, brush, layoutRectangle.x, 0, layoutRectangle.width, 0, format);\n            }\n        }\n        else {\n            throw new Error('ArgumentNullException:result');\n        }\n    };\n    /**\n     * Gets the `next page`.\n     * @private\n     */\n    PdfGraphics.prototype.getNextPage = function () {\n        var section = this.currentPage.section;\n        var nextPage = null;\n        var index = section.indexOf(this.currentPage);\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        return nextPage;\n    };\n    PdfGraphics.prototype.setClip = function (rectangle, mode) {\n        if (typeof mode === 'undefined') {\n            this.setClip(rectangle, PdfFillMode.Winding);\n        }\n        else {\n            this.pdfStreamWriter.appendRectangle(rectangle);\n            this.pdfStreamWriter.clipPath((mode === PdfFillMode.Alternate));\n        }\n    };\n    /**\n     * Applies all the `text settings`.\n     * @private\n     */\n    PdfGraphics.prototype.applyStringSettings = function (font, pen, brush, format, bounds) {\n        if (brush instanceof PdfTilingBrush) {\n            this.bCSInitialized = false;\n            brush.graphics.colorSpace = this.colorSpace;\n        }\n        else if ((brush instanceof PdfGradientBrush)) {\n            this.bCSInitialized = false;\n            brush.colorSpace = this.colorSpace;\n        }\n        var setLineWidth = false;\n        var tm = this.getTextRenderingMode(pen, brush, format);\n        this.stateControl(pen, brush, font, format);\n        this.pdfStreamWriter.beginText();\n        if ((tm) !== this.previousTextRenderingMode) {\n            this.pdfStreamWriter.setTextRenderingMode(tm);\n            this.previousTextRenderingMode = tm;\n        }\n        // Set character spacing.\n        var cs = (format != null) ? format.characterSpacing : 0;\n        if (cs !== this.previousCharacterSpacing && !this.isEmfTextScaled) {\n            this.pdfStreamWriter.setCharacterSpacing(cs);\n            this.previousCharacterSpacing = cs;\n        }\n        // Set word spacing.\n        // NOTE: it works only if the space code is equal to 32 (0x20).\n        var ws = (format != null) ? format.wordSpacing : 0;\n        if (ws !== this.previousWordSpacing) {\n            this.pdfStreamWriter.setWordSpacing(ws);\n            this.previousWordSpacing = ws;\n        }\n    };\n    /**\n     * Calculates `shift value` if the text is vertically aligned.\n     * @private\n     */\n    PdfGraphics.prototype.getTextVerticalAlignShift = function (textHeight, boundsHeight, format) {\n        var shift = 0;\n        if (boundsHeight >= 0 && format != null && format.lineAlignment !== PdfVerticalAlignment.Top) {\n            switch (format.lineAlignment) {\n                case PdfVerticalAlignment.Middle:\n                    shift = (boundsHeight - textHeight) / 2;\n                    break;\n                case PdfVerticalAlignment.Bottom:\n                    shift = boundsHeight - textHeight;\n                    break;\n            }\n        }\n        return shift;\n    };\n    /* tslint:disable */\n    /**\n     * `Draws layout result`.\n     * @private\n     */\n    PdfGraphics.prototype.drawLayoutResult = function (result, font, format, layoutRectangle) {\n        var vAlignShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n        if (vAlignShift !== 0) {\n            this.pdfStreamWriter.startNextLine(0, vAlignShift);\n        }\n        var ttfFont = font;\n        var unicode = (ttfFont != null && ttfFont.isUnicode);\n        var embed = (ttfFont != null && ttfFont.isEmbedFont);\n        var lines = result.lines;\n        for (var i = 0, len = lines.length; (i < len && i !== this.startCutIndex); i++) {\n            var lineInfo = lines[i];\n            var line = lineInfo.text;\n            var lineWidth = lineInfo.width;\n            var hAlignShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n            var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, (i === 0));\n            hAlignShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n            if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.startNextLine(hAlignShift, 0);\n            }\n            if (unicode) {\n                this.drawUnicodeLine(lineInfo, layoutRectangle, font, format);\n            }\n            else {\n                this.drawAsciiLine(lineInfo, layoutRectangle, font, format);\n            }\n            if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.startNextLine(-hAlignShift, 0);\n            }\n            if (this.isOverloadWithPosition && lines.length > 1) {\n                this.pdfStreamWriter.startNextLine(-(layoutRectangle.x), 0);\n                layoutRectangle.x = 0;\n                layoutRectangle.width = this.clientSize.width;\n                this.isOverloadWithPosition = false;\n                this.isPointOverload = true;\n            }\n        }\n        this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n        if (vAlignShift !== 0) {\n            this.pdfStreamWriter.startNextLine(0, -(vAlignShift - result.lineHeight));\n        }\n        this.pdfStreamWriter.endText();\n    };\n    /**\n     * `Draws Ascii line`.\n     * @private\n     */\n    PdfGraphics.prototype.drawAsciiLine = function (lineInfo, layoutRectangle, font, format) {\n        this.justifyLine(lineInfo, layoutRectangle.width, format);\n        var value = '';\n        if (lineInfo.text.indexOf('(') !== -1 || lineInfo.text.indexOf(')') !== -1) {\n            for (var i = 0; i < lineInfo.text.length; i++) {\n                if (lineInfo.text[i] === '(') {\n                    value += '\\\\\\(';\n                }\n                else if (lineInfo.text[i] === ')') {\n                    value += '\\\\\\)';\n                }\n                else {\n                    value += lineInfo.text[i];\n                }\n            }\n        }\n        if (value === '') {\n            value = lineInfo.text;\n        }\n        var line = '(' + value + ')';\n        this.pdfStreamWriter.showNextLineText(new PdfString(line));\n    };\n    /**\n     * Draws unicode line.\n     * @private\n     */\n    PdfGraphics.prototype.drawUnicodeLine = function (lineInfo, layoutRectangle, font, format) {\n        var line = lineInfo.text;\n        var lineWidth = lineInfo.width;\n        var rtl = (format !== null && typeof format !== 'undefined' && format.rightToLeft);\n        /* tslint:disable-next-line:max-line-length */\n        var useWordSpace = (format !== null && typeof format !== 'undefined' && (format.wordSpacing !== 0 || format.alignment === PdfTextAlignment.Justify));\n        var ttfFont = font;\n        var wordSpacing = this.justifyLine(lineInfo, layoutRectangle.width, format);\n        var rtlRender = new RtlRenderer();\n        if (rtl || (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None)) {\n            var blocks = null;\n            /* tslint:disable-next-line:max-line-length */\n            var rightAlign = (format !== null && typeof format !== 'undefined' && format.alignment === PdfTextAlignment.Right);\n            if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n                /* tslint:disable-next-line:max-line-length */\n                blocks = rtlRender.layout(line, ttfFont, (format.textDirection === PdfTextDirection.RightToLeft) ? true : false, useWordSpace, format);\n            }\n            else {\n                blocks = rtlRender.layout(line, ttfFont, rightAlign, useWordSpace, format);\n            }\n            var words = null;\n            if (blocks.length > 1) {\n                if (format !== null && typeof format !== 'undefined' && format.textDirection !== PdfTextDirection.None) {\n                    /* tslint:disable-next-line:max-line-length */\n                    words = rtlRender.splitLayout(line, ttfFont, (format.textDirection === PdfTextDirection.RightToLeft) ? true : false, useWordSpace, format);\n                }\n                else {\n                    words = rtlRender.splitLayout(line, ttfFont, rightAlign, useWordSpace, format);\n                }\n            }\n            else {\n                words = [line];\n            }\n            this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n        }\n        else {\n            if (useWordSpace) {\n                var result = this.breakUnicodeLine(line, ttfFont, null);\n                var blocks = result.tokens;\n                var words = result.words;\n                this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n            }\n            else {\n                var token = this.convertToUnicode(line, ttfFont);\n                var value = this.getUnicodeString(token);\n                this.streamWriter.showNextLineText(value);\n            }\n        }\n    };\n    /**\n     * Draws array of unicode tokens.\n     */\n    /* tslint:disable */\n    PdfGraphics.prototype.drawUnicodeBlocks = function (blocks, words, font, format, wordSpacing) {\n        /* tslint:enable */\n        if (blocks == null) {\n            throw new Error('Argument Null Exception : blocks');\n        }\n        if (words == null) {\n            throw new Error('Argument Null Exception : words');\n        }\n        if (font == null) {\n            throw new Error('Argument Null Exception : font');\n        }\n        this.streamWriter.startNextLine();\n        var x = 0;\n        var xShift = 0;\n        var firstLineIndent = 0;\n        var paragraphIndent = 0;\n        try {\n            if (format !== null && typeof format !== 'undefined') {\n                firstLineIndent = format.firstLineIndent;\n                paragraphIndent = format.paragraphIndent;\n                format.firstLineIndent = 0;\n                format.paragraphIndent = 0;\n            }\n            var spaceWidth = font.getCharWidth(StringTokenizer.whiteSpace, format) + wordSpacing;\n            var characterSpacing = (format != null) ? format.characterSpacing : 0;\n            var wordSpace = (format !== null && typeof format !== 'undefined' && wordSpacing === 0) ? format.wordSpacing : 0;\n            spaceWidth += characterSpacing + wordSpace;\n            for (var i = 0; i < blocks.length; i++) {\n                var token = blocks[i];\n                var word = words[i];\n                var tokenWidth = 0;\n                if (x !== 0) {\n                    this.streamWriter.startNextLine(x, 0);\n                }\n                if (word.length > 0) {\n                    tokenWidth += /*Utils.Round(*/ font.measureString(word, format).width /*)*/;\n                    tokenWidth += characterSpacing;\n                    var val = this.getUnicodeString(token);\n                    this.streamWriter.showText(val);\n                }\n                if (i !== blocks.length - 1) {\n                    x = tokenWidth + spaceWidth;\n                    xShift += x;\n                }\n            }\n            // Rolback current line position.\n            if (xShift > 0) {\n                this.streamWriter.startNextLine(-xShift, 0);\n            }\n        }\n        finally {\n            if (format !== null && typeof format !== 'undefined') {\n                format.firstLineIndent = firstLineIndent;\n                format.paragraphIndent = paragraphIndent;\n            }\n        }\n    };\n    /**\n     * Breakes the unicode line to the words and converts symbols to glyphs.\n     */\n    PdfGraphics.prototype.breakUnicodeLine = function (line, ttfFont, words) {\n        if (line === null) {\n            throw new Error('Argument Null Exception : line');\n        }\n        words = line.split(null);\n        var tokens = [];\n        for (var i = 0; i < words.length; i++) {\n            // Reconvert string according to unicode standard.\n            var word = words[i];\n            var token = this.convertToUnicode(word, ttfFont);\n            tokens[i] = token;\n        }\n        return { tokens: tokens, words: words };\n    };\n    /**\n     * Creates PdfString from the unicode text.\n     */\n    PdfGraphics.prototype.getUnicodeString = function (token) {\n        if (token === null) {\n            throw new Error('Argument Null Exception : token');\n        }\n        var val = new PdfString(token);\n        val.converted = true;\n        val.encode = InternalEnum.ForceEncoding.Ascii;\n        return val;\n    };\n    /**\n     * Converts to unicode format.\n     */\n    PdfGraphics.prototype.convertToUnicode = function (text, ttfFont) {\n        var token = null;\n        if (text == null) {\n            throw new Error('Argument Null Exception : text');\n        }\n        if (ttfFont == null) {\n            throw new Error('Argument Null Exception : ttfFont');\n        }\n        if (ttfFont.fontInternal instanceof UnicodeTrueTypeFont) {\n            var ttfReader = ttfFont.fontInternal.ttfReader;\n            ttfFont.setSymbols(text);\n            token = ttfReader.convertString(text);\n            var bytes = PdfString.toUnicodeArray(token, false);\n            token = PdfString.byteToString(bytes);\n        }\n        return token;\n    };\n    /**\n     * `Justifies` the line if needed.\n     * @private\n     */\n    PdfGraphics.prototype.justifyLine = function (lineInfo, boundsWidth, format) {\n        var line = lineInfo.text;\n        var lineWidth = lineInfo.width;\n        var shouldJustify = this.shouldJustify(lineInfo, boundsWidth, format);\n        var hasWordSpacing = (format != null && format.wordSpacing !== 0);\n        var symbols = StringTokenizer.spaces;\n        var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        var wordSpace = 0;\n        if (shouldJustify) {\n            // Correct line width.\n            if (hasWordSpacing) {\n                lineWidth -= (whitespacesCount * format.wordSpacing);\n            }\n            var difference = boundsWidth - lineWidth;\n            wordSpace = difference / whitespacesCount;\n            this.pdfStreamWriter.setWordSpacing(wordSpace);\n        }\n        else {\n            // If there is justifying, but the line shouldn't be justified, restore default word spacing.\n            if (hasWordSpacing) {\n                this.pdfStreamWriter.setWordSpacing(format.wordSpacing);\n            }\n            else {\n                this.pdfStreamWriter.setWordSpacing(0);\n            }\n        }\n        return wordSpace;\n    };\n    /**\n     * `Reset` or reinitialize the current graphic value.\n     * @private\n     */\n    PdfGraphics.prototype.reset = function (size) {\n        this.canvasSize = size;\n        this.streamWriter.clear();\n        this.initialize();\n        this.initializeCoordinates();\n    };\n    /**\n     * Checks whether the line should be `justified`.\n     * @private\n     */\n    PdfGraphics.prototype.shouldJustify = function (lineInfo, boundsWidth, format) {\n        var line = lineInfo.text;\n        var lineWidth = lineInfo.width;\n        var justifyStyle = (format != null && format.alignment === PdfTextAlignment.Justify);\n        var goodWidth = (boundsWidth >= 0 && lineWidth < boundsWidth);\n        var symbols = StringTokenizer.spaces;\n        var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        var hasSpaces = (whitespacesCount > 0 && line[0] !== StringTokenizer.whiteSpace);\n        var goodLineBreakStyle = ((lineInfo.lineType & LineType.LayoutBreak) > 0);\n        /* tslint:disable */\n        var shouldJustify = (justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.Justify)); /* tslint:enable */\n        return shouldJustify;\n    };\n    /* tslint:disable */\n    /**\n     * Emulates `Underline, Strikeout` of the text if needed.\n     * @private\n     */\n    PdfGraphics.prototype.underlineStrikeoutText = function (pen, brush, result, font, layoutRectangle, format) {\n        if (font.underline || font.strikeout) {\n            // Calculate line width.\n            var linePen = this.createUnderlineStikeoutPen(pen, brush, font, format);\n            if (linePen != null) {\n                // Approximate line positions.\n                var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n                var underlineYOffset = 0;\n                underlineYOffset = layoutRectangle.y + vShift + font.metrics.getAscent(format) + 1.5 * linePen.width;\n                var strikeoutYOffset = layoutRectangle.y + vShift + font.metrics.getHeight(format) / 2 + 1.5 * linePen.width;\n                var lines = result.lines;\n                // Run through the text and draw lines.\n                for (var i = 0, len = result.lineCount; i < len; i++) {\n                    var lineInfo = lines[i];\n                    var line = lineInfo.text;\n                    var lineWidth = lineInfo.width;\n                    var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n                    var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, (i === 0));\n                    hShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n                    var x1 = layoutRectangle.x + hShift;\n                    /* tslint:disable */\n                    var x2 = (!this.shouldJustify(lineInfo, layoutRectangle.width, format)) ? x1 + lineWidth - lineIndent : x1 + layoutRectangle.width - lineIndent;\n                    /* tslint:enable */\n                    if (font.underline) {\n                        var y = underlineYOffset;\n                        this.drawLine(linePen, x1, y, x2, y);\n                        underlineYOffset += result.lineHeight;\n                    }\n                    if (font.strikeout) {\n                        var y = strikeoutYOffset;\n                        this.drawLine(linePen, x1, y, x2, y);\n                        strikeoutYOffset += result.lineHeight;\n                    }\n                    if (this.isPointOverload && lines.length > 1) {\n                        layoutRectangle.x = 0;\n                        layoutRectangle.width = this.clientSize.width;\n                    }\n                }\n                this.isPointOverload = false;\n            }\n        }\n    };\n    /**\n     * `Creates a pen` for drawing lines in the text.\n     * @private\n     */\n    PdfGraphics.prototype.createUnderlineStikeoutPen = function (pen, brush, font, format) {\n        // Calculate line width.\n        var lineWidth = font.metrics.getSize(format) / 20;\n        var linePen = null;\n        // Create a pen fo the lines.\n        if (pen != null) {\n            linePen = new PdfPen(pen.color, lineWidth);\n        }\n        else if (brush != null) {\n            linePen = new PdfPen(brush, lineWidth);\n        }\n        return linePen;\n    };\n    /**\n     * Return `text rendering mode`.\n     * @private\n     */\n    PdfGraphics.prototype.getTextRenderingMode = function (pen, brush, format) {\n        var tm = TextRenderingMode.None;\n        if (pen != null && brush != null) {\n            tm = TextRenderingMode.FillStroke;\n        }\n        else if (pen != null) {\n            tm = TextRenderingMode.Stroke;\n        }\n        else {\n            tm = TextRenderingMode.Fill;\n        }\n        if (format != null && format.clipPath) {\n            tm |= TextRenderingMode.ClipFlag;\n        }\n        return tm;\n    };\n    /**\n     * Returns `line indent` for the line.\n     * @private\n     */\n    PdfGraphics.prototype.getLineIndent = function (lineInfo, format, layoutBounds, firstLine) {\n        var lineIndent = 0;\n        var firstParagraphLine = ((lineInfo.lineType & LineType.FirstParagraphLine) > 0);\n        if (format != null && firstParagraphLine) {\n            lineIndent = (firstLine) ? format.firstLineIndent : format.paragraphIndent;\n            lineIndent = (layoutBounds.width > 0) ? Math.min(layoutBounds.width, lineIndent) : lineIndent;\n        }\n        return lineIndent;\n    };\n    /**\n     * Calculates shift value if the line is `horizontaly aligned`.\n     * @private\n     */\n    PdfGraphics.prototype.getHorizontalAlignShift = function (lineWidth, boundsWidth, format) {\n        var shift = 0;\n        if (boundsWidth >= 0 && format != null && format.alignment !== PdfTextAlignment.Left) {\n            switch (format.alignment) {\n                case PdfTextAlignment.Center:\n                    shift = (boundsWidth - lineWidth) / 2;\n                    break;\n                case PdfTextAlignment.Right:\n                    shift = boundsWidth - lineWidth;\n                    break;\n            }\n        }\n        return shift;\n    };\n    /**\n     * Gets or sets the value that indicates `text direction` mode.\n     * @private\n     */\n    PdfGraphics.prototype.rightToLeft = function (format) {\n        var rtl = (format !== null && typeof format !== 'undefined' && format.rightToLeft);\n        if (format !== null && typeof format !== 'undefined') {\n            if (format.textDirection !== PdfTextDirection.None && typeof format.textDirection !== 'undefined') {\n                rtl = true;\n            }\n        }\n        return rtl;\n    };\n    PdfGraphics.prototype.stateControl = function (pen, brush, font, format) {\n        if (typeof format === 'undefined') {\n            this.stateControl(pen, brush, font, null);\n        }\n        else {\n            if (brush instanceof PdfGradientBrush) {\n                this.bCSInitialized = false;\n                brush.colorSpace = this.colorSpace;\n            }\n            if (brush instanceof PdfTilingBrush) {\n                this.bCSInitialized = false;\n                brush.graphics.colorSpace = this.colorSpace;\n            }\n            var saveState = false;\n            if (brush !== null) {\n                var solidBrush = brush;\n                if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n                    if (this.colorSpaceChanged === false) {\n                        this.lastDocumentCS = this.pageLayer.page.document.colorSpace;\n                        this.lastGraphicsCS = this.pageLayer.page.graphics.colorSpace;\n                        this.colorSpace = this.pageLayer.page.document.colorSpace;\n                        this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n                        this.colorSpaceChanged = true;\n                    }\n                }\n                this.initCurrentColorSpace(this.currentColorSpace);\n            }\n            else if (pen != null) {\n                var pdfPen = pen;\n                if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n                    /* tslint:disable */\n                    this.colorSpace = this.pageLayer.page.document.colorSpace;\n                    this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n                }\n                this.initCurrentColorSpace(this.currentColorSpace);\n            }\n            this.penControl(pen, saveState);\n            this.brushControl(brush, saveState);\n            this.fontControl(font, format, saveState);\n        }\n    };\n    /**\n     * Initializes the `current color space`.\n     * @private\n     */\n    PdfGraphics.prototype.initCurrentColorSpace = function (colorspace) {\n        var re = this.getResources.getResources();\n        if (!this.bCSInitialized) {\n            if (this.currentColorSpace != PdfColorSpace.GrayScale) {\n                this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], true);\n                this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], false);\n                this.bCSInitialized = true;\n            }\n            else {\n                this.pdfStreamWriter.setColorSpace('DeviceGray', true);\n                this.pdfStreamWriter.setColorSpace('DeviceGray', false);\n                this.bCSInitialized = true;\n            }\n        }\n    };\n    /**\n     * Controls the `pen state`.\n     * @private\n     */\n    PdfGraphics.prototype.penControl = function (pen, saveState) {\n        if (pen != null) {\n            this.currentPen = pen;\n            /* tslint:disable */\n            pen.monitorChanges(this.currentPen, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace, this.matrix.clone());\n            /* tslint:enable */\n            this.currentPen = pen.clone();\n        }\n    };\n    /**\n     * Controls the `brush state`.\n     * @private\n     */\n    PdfGraphics.prototype.brushControl = function (brush, saveState) {\n        if (brush != null && typeof brush !== 'undefined') {\n            var b = brush.clone();\n            var lgb = b;\n            if (lgb !== null && typeof lgb !== 'undefined' && !(brush instanceof PdfSolidBrush) && !(brush instanceof PdfTilingBrush)) {\n                var m = lgb.matrix;\n                var matrix = this.matrix.clone();\n                if ((m != null)) {\n                    m.multiply(matrix);\n                    matrix = m;\n                }\n                lgb.matrix = matrix;\n            }\n            this.currentBrush = lgb;\n            var br = (brush);\n            /* tslint:disable */\n            b.monitorChanges(this.currentBrush, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace);\n            /* tslint:enable */\n            this.currentBrush = brush;\n            brush = null;\n        }\n    };\n    /**\n     * Saves the font and other `font settings`.\n     * @private\n     */\n    PdfGraphics.prototype.fontControl = function (font, format, saveState) {\n        if (font != null) {\n            var curSubSuper = (format != null) ? format.subSuperScript : PdfSubSuperScript.None;\n            /* tslint:disable */\n            var prevSubSuper = (this.currentStringFormat != null) ? this.currentStringFormat.subSuperScript : PdfSubSuperScript.None; /* tslint:enable */\n            if (saveState || font !== this.currentFont || curSubSuper !== prevSubSuper) {\n                var resources = this.getResources.getResources();\n                this.currentFont = font;\n                this.currentStringFormat = format;\n                var size = font.metrics.getSize(format);\n                /* tslint:disable */\n                this.isEmfTextScaled = false;\n                var fontName = resources.getName(font);\n                this.pdfStreamWriter.setFont(font, fontName, size);\n            }\n        }\n    };\n    PdfGraphics.prototype.setTransparency = function (arg1, arg2, arg3) {\n        if (typeof arg2 === 'undefined') {\n            this.istransparencySet = true;\n            this.setTransparency(arg1, arg1, PdfBlendMode.Normal);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n            this.setTransparency(arg1, arg2, PdfBlendMode.Normal);\n        }\n        else {\n            if (this.trasparencies == null) {\n                this.trasparencies = new TemporaryDictionary();\n            }\n            var transp = null;\n            var td = new TransparencyData(arg1, arg2, arg3);\n            if (this.trasparencies.containsKey(td)) {\n                transp = this.trasparencies.getValue(td);\n            }\n            if (transp == null) {\n                transp = new PdfTransparency(arg1, arg2, arg3);\n                this.trasparencies.setValue(td, transp);\n            }\n            var resources = this.getResources.getResources();\n            var name_3 = resources.getName(transp);\n            var sw = this.streamWriter;\n            sw.setGraphicsState(name_3);\n        }\n    };\n    PdfGraphics.prototype.clipTranslateMargins = function (x, y, left, top, right, bottom) {\n        if (x instanceof RectangleF && typeof y === 'undefined') {\n            this.clipBounds = x;\n            this.pdfStreamWriter.writeComment('Clip margins.');\n            this.pdfStreamWriter.appendRectangle(x);\n            this.pdfStreamWriter.closePath();\n            this.pdfStreamWriter.clipPath(false);\n            this.pdfStreamWriter.writeComment('Translate co-ordinate system.');\n            this.translateTransform(x.x, x.y);\n        }\n        else if (typeof x === 'number') {\n            var clipArea = new RectangleF(left, top, this.size.width - left - right, this.size.height - top - bottom);\n            this.clipBounds = clipArea;\n            this.pdfStreamWriter.writeComment(\"Clip margins.\");\n            this.pdfStreamWriter.appendRectangle(clipArea);\n            this.pdfStreamWriter.closePath();\n            this.pdfStreamWriter.clipPath(false);\n            this.pdfStreamWriter.writeComment(\"Translate co-ordinate system.\");\n            this.translateTransform(x, y);\n        }\n    };\n    /**\n     * `Updates y` co-ordinate.\n     * @private\n     */\n    PdfGraphics.prototype.updateY = function (y) {\n        return -y;\n    };\n    /**\n     * Used to `translate the transformation`.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set translate transform\n     * page1.graphics.translateTransform(100, 100);\n     * //\n     * // draw the rectangle after applying translate transform\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param offsetX The x-coordinate of the translation.\n     * @param offsetY The y-coordinate of the translation.\n     */\n    PdfGraphics.prototype.translateTransform = function (offsetX, offsetY) {\n        var matrix = new PdfTransformationMatrix();\n        this.getTranslateTransform(offsetX, offsetY, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    };\n    /**\n     * `Translates` coordinates of the input matrix.\n     * @private\n     */\n    PdfGraphics.prototype.getTranslateTransform = function (x, y, input) {\n        input.translate(x, this.updateY(y));\n        return input;\n    };\n    /* tslint:disable */\n    /**\n     * Applies the specified `scaling operation` to the transformation matrix of this Graphics by prepending it to the object's transformation matrix.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // apply scaling trasformation\n     * page1.graphics.scaleTransform(1.5, 2);\n     * //\n     * // draw the rectangle after applying scaling transform\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param scaleX Scale factor in the x direction.\n     * @param scaleY Scale factor in the y direction.\n     */\n    /* tslint:enable */\n    PdfGraphics.prototype.scaleTransform = function (scaleX, scaleY) {\n        var matrix = new PdfTransformationMatrix();\n        this.getScaleTransform(scaleX, scaleY, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    };\n    /**\n     * `Scales` coordinates of the input matrix.\n     * @private\n     */\n    PdfGraphics.prototype.getScaleTransform = function (x, y, input) {\n        if (input == null) {\n            input = new PdfTransformationMatrix();\n        }\n        input.scale(x, y);\n        return input;\n    };\n    /**\n     * Applies the specified `rotation` to the transformation matrix of this Graphics.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set RotateTransform with 25 degree of angle\n     * page1.graphics.rotateTransform(25);\n     * //\n     * // draw the rectangle after RotateTransformation\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param angle Angle of rotation in degrees.\n     */\n    PdfGraphics.prototype.rotateTransform = function (angle) {\n        var matrix = new PdfTransformationMatrix();\n        this.getRotateTransform(angle, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    };\n    /**\n     * `Initializes coordinate system`.\n     * @private\n     */\n    PdfGraphics.prototype.initializeCoordinates = function () {\n        // Matrix equation: TM(T-1)=M', where T=[1 0 0 -1 0 h]\n        this.pdfStreamWriter.writeComment('Change co-ordinate system to left/top.');\n        // Translate co-ordinates only, don't flip.\n        if (this.mediaBoxUpperRightBound !== -(this.size.height)) {\n            if (this.cropBox == null) {\n                if (this.mediaBoxUpperRightBound === this.size.height || this.mediaBoxUpperRightBound === 0) {\n                    this.translateTransform(0, this.updateY(this.size.height));\n                }\n                else {\n                    this.translateTransform(0, this.updateY(this.mediaBoxUpperRightBound));\n                }\n            }\n        }\n    };\n    /**\n     * `Rotates` coordinates of the input matrix.\n     * @private\n     */\n    PdfGraphics.prototype.getRotateTransform = function (angle, input) {\n        if (input == null || typeof input === 'undefined') {\n            input = new PdfTransformationMatrix();\n        }\n        input.rotate(this.updateY(angle));\n        return input;\n    };\n    /**\n     * `Saves` the current state of this Graphics and identifies the saved state with a GraphicsState.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // save the graphics state\n     * let state1 : PdfGraphicsState = page1.graphics.save();\n     * //\n     * page1.graphics.scaleTransform(1.5, 2);\n     * // draw the rectangle\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // restore the graphics state\n     * page1.graphics.restore(state1);\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.save = function () {\n        var state = new PdfGraphicsState(this, this.matrix.clone());\n        state.brush = this.currentBrush;\n        state.pen = this.currentPen;\n        state.font = this.currentFont;\n        state.colorSpace = this.currentColorSpace;\n        state.characterSpacing = this.previousCharacterSpacing;\n        state.wordSpacing = this.previousWordSpacing;\n        state.textScaling = this.previousTextScaling;\n        state.textRenderingMode = this.previousTextRenderingMode;\n        this.graphicsState.push(state);\n        this.pdfStreamWriter.saveGraphicsState();\n        return state;\n    };\n    PdfGraphics.prototype.restore = function (state) {\n        if (typeof state === 'undefined') {\n            if (this.graphicsState.length > 0) {\n                this.doRestoreState();\n            }\n        }\n        else {\n            if (this.graphicsState.indexOf(state) !== -1) {\n                for (;;) {\n                    if (this.graphicsState.length === 0) {\n                        break;\n                    }\n                    var popState = this.doRestoreState();\n                    if (popState === state) {\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * `Restores graphics state`.\n     * @private\n     */\n    PdfGraphics.prototype.doRestoreState = function () {\n        var state = this.graphicsState.pop();\n        this.transformationMatrix = state.matrix;\n        this.currentBrush = state.brush;\n        this.currentPen = state.pen;\n        this.currentFont = state.font;\n        this.currentColorSpace = state.colorSpace;\n        this.previousCharacterSpacing = state.characterSpacing;\n        this.previousWordSpacing = state.wordSpacing;\n        this.previousTextScaling = state.textScaling;\n        this.previousTextRenderingMode = state.textRenderingMode;\n        this.pdfStreamWriter.restoreGraphicsState();\n        return state;\n    };\n    /* tslint:enable */\n    /**\n     * `Draws the specified path`, using its original physical size, at the location specified by a coordinate pair.\n     * ```typescript\n     * // create a new PDF document.\n     * let document : PdfDocument = new PdfDocument();\n     * // add a page to the document.\n     * let page1 : PdfPage = document.pages.add();\n     * //Create new PDF path.\n     * let path : PdfPath = new PdfPath();\n     * //Add line path points.\n     * path.addLine(new PointF(10, 100), new PointF(10, 200));\n     * path.addLine(new PointF(100, 100), new PointF(100, 200));\n     * path.addLine(new PointF(100, 200), new PointF(55, 150));\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(255, 0, 0));\n     * // set brush\n     * let brush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // draw the path\n     * page1.graphics.drawPath(pen, brush, path);\n     * //\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param pen Color of the text.\n     * @param brush Color of the text.\n     * @param path Draw path.\n     */\n    PdfGraphics.prototype.drawPath = function (pen, brush, path) {\n        if (brush instanceof PdfTilingBrush) {\n            this.bCSInitialized = false;\n            brush.graphics.colorSpace = this.colorSpace;\n        }\n        else if (brush instanceof PdfGradientBrush) {\n            this.bCSInitialized = false;\n            brush.colorSpace = this.colorSpace;\n        }\n        this.stateControl(pen, brush, null);\n        this.buildUpPath(path.pathPoints, path.pathTypes);\n        this.drawPathHelper(pen, brush, path.fillMode, false);\n    };\n    /* tslint:disable-next-line:max-line-length */\n    PdfGraphics.prototype.drawArc = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n        if (arg2 instanceof RectangleF) {\n            this.drawArc(arg1, arg2.x, arg2.y, arg2.width, arg2.height, arg3, arg4);\n        }\n        else {\n            if ((arg7 !== 0)) {\n                this.stateControl(arg1, null, null);\n                this.constructArcPath(arg2, arg3, (arg2 + arg4), (arg3 + arg5), arg6, arg7);\n                this.drawPathHelper(arg1, null, false);\n            }\n        }\n    };\n    /**\n     * Builds up the path.\n     * @private\n     */\n    PdfGraphics.prototype.buildUpPath = function (arg1, arg2) {\n        var cnt = arg1.length;\n        for (var i = 0; i < cnt; ++i) {\n            var typeValue = 0;\n            var point = arg1[i];\n            switch (((arg2[i] & (PdfGraphics.pathTypesValuesMask)))) {\n                case PathPointType.Start:\n                    this.pdfStreamWriter.beginPath(point.x, point.y);\n                    break;\n                case PathPointType.Bezier3:\n                    var p2 = new PointF(0, 0);\n                    var p3 = new PointF(0, 0);\n                    var result1 = this.getBezierPoints(arg1, arg2, i, p2, p3);\n                    this.pdfStreamWriter.appendBezierSegment(point, result1.p2, result1.p3);\n                    i = result1.i;\n                    break;\n                case PathPointType.Line:\n                    this.pdfStreamWriter.appendLineSegment(point);\n                    break;\n                default:\n                    throw new Error('ArithmeticException - Incorrect path formation.');\n            }\n            typeValue = arg2[i];\n            this.checkFlags(typeValue);\n        }\n    };\n    /**\n     * Gets the bezier points from respective arrays.\n     * @private\n     */\n    /* tslint:disable-next-line:max-line-length */\n    PdfGraphics.prototype.getBezierPoints = function (points, types, i, p2, p3) {\n        var errorMsg = 'Malforming path.';\n        ++i;\n        if ((((types[i] & PdfGraphics.pathTypesValuesMask)) === PathPointType.Bezier3)) {\n            p2 = points[i];\n            ++i;\n            if ((((types[i] & PdfGraphics.pathTypesValuesMask)) === PathPointType.Bezier3)) {\n                p3 = points[i];\n            }\n            else {\n                throw new Error('ArgumentException : errorMsg');\n            }\n        }\n        else {\n            throw new Error('ArgumentException : errorMsg');\n        }\n        return { i: i, p2: p2, p3: p3 };\n    };\n    /**\n     * Checks path point type flags.\n     * @private\n     */\n    PdfGraphics.prototype.checkFlags = function (type) {\n        if ((((type & (PathPointType.CloseSubpath))) === PathPointType.CloseSubpath)) {\n            this.pdfStreamWriter.closePath();\n        }\n    };\n    /**\n     * Constructs the arc path using Bezier curves.\n     * @private\n     */\n    PdfGraphics.prototype.constructArcPath = function (x1, y1, x2, y2, startAng, sweepAngle) {\n        var points = this.getBezierArc(x1, y1, x2, y2, startAng, sweepAngle);\n        if ((points.length === 0)) {\n            return;\n        }\n        var pt = [points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]];\n        this.pdfStreamWriter.beginPath(pt[0], pt[1]);\n        var i = 0;\n        for (i = 0; i < points.length; i = i + 8) {\n            pt = [points[i], points[i + 1], points[i + 2], points[i + 3], points[i + 4], points[i + 5], points[i + 6], points[i + 7]];\n            this.pdfStreamWriter.appendBezierSegment(pt[2], pt[3], pt[4], pt[5], pt[6], pt[7]);\n        }\n    };\n    /**\n     * Gets the bezier points for arc constructing.\n     * @private\n     */\n    PdfGraphics.prototype.getBezierArc = function (numX1, numY1, numX2, numY2, s1, e1) {\n        if ((numX1 > numX2)) {\n            var tmp = void 0;\n            tmp = numX1;\n            numX1 = numX2;\n            numX2 = tmp;\n        }\n        if ((numY2 > numY1)) {\n            var tmp = void 0;\n            tmp = numY1;\n            numY1 = numY2;\n            numY2 = tmp;\n        }\n        var fragAngle1;\n        var numFragments;\n        if ((Math.abs(e1) <= 90)) {\n            fragAngle1 = e1;\n            numFragments = 1;\n        }\n        else {\n            numFragments = (Math.ceil((Math.abs(e1) / 90)));\n            fragAngle1 = (e1 / numFragments);\n        }\n        var xcen = ((numX1 + numX2) / 2);\n        var ycen = ((numY1 + numY2) / 2);\n        var rx = ((numX2 - numX1) / 2);\n        var ry = ((numY2 - numY1) / 2);\n        var halfAng = ((fragAngle1 * (Math.PI / 360)));\n        var kappa = (Math.abs(4.0 / 3.0 * (1.0 - Math.cos(halfAng)) / Math.sin(halfAng)));\n        var pointsList = [];\n        for (var i = 0; (i < numFragments); i++) {\n            var thetaValue0 = (((s1 + (i * fragAngle1)) * (Math.PI / 180)));\n            var thetaValue1 = (((s1 + ((i + 1) * fragAngle1)) * (Math.PI / 180)));\n            var cos0 = (Math.cos(thetaValue0));\n            var cos1 = (Math.cos(thetaValue1));\n            var sin0 = (Math.sin(thetaValue0));\n            var sin1 = (Math.sin(thetaValue1));\n            if ((fragAngle1 > 0)) {\n                /* tslint:disable-next-line:max-line-length */\n                pointsList.push((xcen + (rx * cos0)), (ycen - (ry * sin0)), (xcen + (rx * (cos0 - (kappa * sin0)))), (ycen - (ry * (sin0 + (kappa * cos0)))), (xcen + (rx * (cos1 + (kappa * sin1)))), (ycen - (ry * (sin1 - (kappa * cos1)))), (xcen + (rx * cos1)), (ycen - (ry * sin1)));\n            }\n            else {\n                /* tslint:disable-next-line:max-line-length */\n                pointsList.push((xcen + (rx * cos0)), (ycen - (ry * sin0)), (xcen + (rx * (cos0 + (kappa * sin0)))), (ycen - (ry * (sin0 - (kappa * cos0)))), (xcen + (rx * (cos1 - (kappa * sin1)))), (ycen - (ry * (sin1 + (kappa * cos1)))), (xcen + (rx * cos1)), (ycen - (ry * sin1)));\n            }\n        }\n        return pointsList;\n    };\n    // Constants\n    /**\n     * Specifies the mask of `path type values`.\n     * @private\n     */\n    PdfGraphics.pathTypesValuesMask = 0xf;\n    /**\n     * Checks whether the object is `transparencyObject`.\n     * @hidden\n     * @private\n     */\n    PdfGraphics.transparencyObject = false;\n    return PdfGraphics;\n}());\nexport { PdfGraphics };\n/**\n * `GetResourceEventHandler` class is alternate for event handlers and delegates.\n * @private\n * @hidden\n */\nvar GetResourceEventHandler = /** @class */ (function () {\n    /**\n     * Initialize instance of `GetResourceEventHandler` class.\n     * Alternate for event handlers and delegates.\n     * @private\n     */\n    function GetResourceEventHandler(sender) {\n        this.sender = sender;\n    }\n    /**\n     * Return the instance of `PdfResources` class.\n     * @private\n     */\n    GetResourceEventHandler.prototype.getResources = function () {\n        return this.sender.getResources();\n    };\n    return GetResourceEventHandler;\n}());\nexport { GetResourceEventHandler };\nvar PdfGraphicsState = /** @class */ (function () {\n    function PdfGraphicsState(graphics, matrix) {\n        /**\n         * Stores `previous rendering mode`.\n         * @default TextRenderingMode.Fill\n         * @private\n         */\n        this.internalTextRenderingMode = TextRenderingMode.Fill;\n        /**\n         * `Previous character spacing` value or 0.\n         * @default 0.0\n         * @private\n         */\n        this.internalCharacterSpacing = 0.0;\n        /**\n         * `Previous word spacing` value or 0.\n         * @default 0.0\n         * @private\n         */\n        this.internalWordSpacing = 0.0;\n        /**\n         * The previously used `text scaling value`.\n         * @default 100.0\n         * @private\n         */\n        this.internalTextScaling = 100.0;\n        /**\n         * `Current color space`.\n         * @default PdfColorSpace.Rgb\n         * @private\n         */\n        this.pdfColorSpace = PdfColorSpace.Rgb;\n        if (typeof graphics !== 'undefined') {\n            this.pdfGraphics = graphics;\n            this.transformationMatrix = matrix;\n        }\n    }\n    Object.defineProperty(PdfGraphicsState.prototype, \"graphics\", {\n        // Properties\n        /**\n         * Gets the parent `graphics object`.\n         * @private\n         */\n        get: function () {\n            return this.pdfGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"matrix\", {\n        /**\n         * Gets the `current matrix`.\n         * @private\n         */\n        get: function () {\n            return this.transformationMatrix;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"characterSpacing\", {\n        /**\n         * Gets or sets the `current character spacing`.\n         * @private\n         */\n        get: function () {\n            return this.internalCharacterSpacing;\n        },\n        set: function (value) {\n            this.internalCharacterSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"wordSpacing\", {\n        /**\n         * Gets or sets the `word spacing` value.\n         * @private\n         */\n        get: function () {\n            return this.internalWordSpacing;\n        },\n        set: function (value) {\n            this.internalWordSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"textScaling\", {\n        /**\n         * Gets or sets the `text scaling` value.\n         * @private\n         */\n        get: function () {\n            return this.internalTextScaling;\n        },\n        set: function (value) {\n            this.internalTextScaling = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"pen\", {\n        /**\n         * Gets or sets the `current pen` object.\n         * @private\n         */\n        get: function () {\n            return this.pdfPen;\n        },\n        set: function (value) {\n            this.pdfPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"brush\", {\n        /**\n         * Gets or sets the `brush`.\n         * @private\n         */\n        get: function () {\n            return this.pdfBrush;\n        },\n        set: function (value) {\n            this.pdfBrush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"font\", {\n        /**\n         * Gets or sets the `current font` object.\n         * @private\n         */\n        get: function () {\n            return this.pdfFont;\n        },\n        set: function (value) {\n            this.pdfFont = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"colorSpace\", {\n        /**\n         * Gets or sets the `current color space` value.\n         * @private\n         */\n        get: function () {\n            return this.pdfColorSpace;\n        },\n        set: function (value) {\n            this.pdfColorSpace = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"textRenderingMode\", {\n        /**\n         * Gets or sets the `text rendering mode`.\n         * @private\n         */\n        get: function () {\n            return this.internalTextRenderingMode;\n        },\n        set: function (value) {\n            this.internalTextRenderingMode = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGraphicsState;\n}());\nexport { PdfGraphicsState };\nvar TransparencyData = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `TransparencyData` class.\n     * @private\n     */\n    function TransparencyData(alphaPen, alphaBrush, blendMode) {\n        this.alphaPen = alphaPen;\n        this.alphaBrush = alphaBrush;\n        this.blendMode = blendMode;\n    }\n    return TransparencyData;\n}());\n"]},"metadata":{},"sourceType":"module"}