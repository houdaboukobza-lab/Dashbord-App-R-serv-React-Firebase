{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, isUndefined, Browser, compile, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Property, NotifyPropertyChanges, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { Event, EventHandler, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { rippleEffect, Animation, remove } from '@syncfusion/ej2-base';\nimport { Draggable, Droppable } from '@syncfusion/ej2-base';\nimport { updateBlazorTemplate, resetBlazorTemplate, isBlazor, getElement } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, closest, matches, detach, select, selectAll, isVisible, append } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { isNullOrUndefined as isNOU, Touch, getValue, setValue, extend, merge, attributes } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nvar ROOT = 'e-treeview';\nvar CONTROL = 'e-control';\nvar COLLAPSIBLE = 'e-icon-collapsible';\nvar EXPANDABLE = 'e-icon-expandable';\nvar LISTITEM = 'e-list-item';\nvar LISTTEXT = 'e-list-text';\nvar LISTICON = 'e-list-icon';\nvar LISTIMG = 'e-list-img';\nvar LISTURL = 'e-list-url';\nvar PARENTITEM = 'e-list-parent';\nvar HOVER = 'e-hover';\nvar ACTIVE = 'e-active';\nvar LOAD = 'e-icons-spinner';\nvar PROCESS = 'e-process';\nvar ICON = 'e-icons';\nvar TEXTWRAP = 'e-text-content';\nvar INPUT = 'e-input';\nvar INPUTGROUP = 'e-input-group';\nvar TREEINPUT = 'e-tree-input';\nvar EDITING = 'e-editing';\nvar RTL = 'e-rtl';\nvar INTERACTION = 'e-interaction';\nvar DRAGITEM = 'e-drag-item';\nvar DROPPABLE = 'e-droppable';\nvar DRAGGING = 'e-dragging';\nvar SIBLING = 'e-sibling';\nvar DROPIN = 'e-drop-in';\nvar DROPNEXT = 'e-drop-next';\nvar DROPOUT = 'e-drop-out';\nvar NODROP = 'e-no-drop';\nvar FULLROWWRAP = 'e-fullrow-wrap';\nvar FULLROW = 'e-fullrow';\nvar SELECTED = 'e-selected';\nvar EXPANDED = 'e-expanded';\nvar NODECOLLAPSED = 'e-node-collapsed';\nvar DISABLE = 'e-disable';\nvar CONTENT = 'e-content';\nvar DOWNTAIL = 'e-downtail';\nvar DROPCOUNT = 'e-drop-count';\nvar CHECK = 'e-check';\nvar INDETERMINATE = 'e-stop';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECKBOXRIPPLE = 'e-ripple-container';\nvar RIPPLE = 'e-ripple';\nvar RIPPLEELMENT = 'e-ripple-element';\nvar FOCUS = 'e-node-focus';\nvar IMAGE = 'e-list-img';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar CHILD = 'e-has-child';\nvar ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nvar DISABLED = 'e-disabled';\nvar treeAriaAttr = {\n  treeRole: 'tree',\n  itemRole: 'treeitem',\n  listRole: 'group',\n  itemText: '',\n  wrapperRole: ''\n};\n/**\n * Configures the fields to bind to the properties of node in the TreeView component.\n */\n\nvar FieldsSettings =\n/** @class */\nfunction (_super) {\n  __extends(FieldsSettings, _super);\n\n  function FieldsSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('child')], FieldsSettings.prototype, \"child\", void 0);\n\n  __decorate([Property([])], FieldsSettings.prototype, \"dataSource\", void 0);\n\n  __decorate([Property('expanded')], FieldsSettings.prototype, \"expanded\", void 0);\n\n  __decorate([Property('hasChildren')], FieldsSettings.prototype, \"hasChildren\", void 0);\n\n  __decorate([Property('htmlAttributes')], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property('iconCss')], FieldsSettings.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('id')], FieldsSettings.prototype, \"id\", void 0);\n\n  __decorate([Property('imageUrl')], FieldsSettings.prototype, \"imageUrl\", void 0);\n\n  __decorate([Property('isChecked')], FieldsSettings.prototype, \"isChecked\", void 0);\n\n  __decorate([Property('parentID')], FieldsSettings.prototype, \"parentID\", void 0);\n\n  __decorate([Property(null)], FieldsSettings.prototype, \"query\", void 0);\n\n  __decorate([Property('selected')], FieldsSettings.prototype, \"selected\", void 0);\n\n  __decorate([Property(null)], FieldsSettings.prototype, \"tableName\", void 0);\n\n  __decorate([Property('text')], FieldsSettings.prototype, \"text\", void 0);\n\n  __decorate([Property('tooltip')], FieldsSettings.prototype, \"tooltip\", void 0);\n\n  __decorate([Property('navigateUrl')], FieldsSettings.prototype, \"navigateUrl\", void 0);\n\n  return FieldsSettings;\n}(ChildProperty);\n\nexport { FieldsSettings };\n/**\n * Configures animation settings for the TreeView component.\n */\n\nvar ActionSettings =\n/** @class */\nfunction (_super) {\n  __extends(ActionSettings, _super);\n\n  function ActionSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('SlideDown')], ActionSettings.prototype, \"effect\", void 0);\n\n  __decorate([Property(400)], ActionSettings.prototype, \"duration\", void 0);\n\n  __decorate([Property('linear')], ActionSettings.prototype, \"easing\", void 0);\n\n  return ActionSettings;\n}(ChildProperty);\n\nexport { ActionSettings };\n/**\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\n */\n\nvar NodeAnimationSettings =\n/** @class */\nfunction (_super) {\n  __extends(NodeAnimationSettings, _super);\n\n  function NodeAnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Complex({\n    effect: 'SlideUp',\n    duration: 400,\n    easing: 'linear'\n  }, ActionSettings)], NodeAnimationSettings.prototype, \"collapse\", void 0);\n\n  __decorate([Complex({\n    effect: 'SlideDown',\n    duration: 400,\n    easing: 'linear'\n  }, ActionSettings)], NodeAnimationSettings.prototype, \"expand\", void 0);\n\n  return NodeAnimationSettings;\n}(ChildProperty);\n\nexport { NodeAnimationSettings };\n/**\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\n * functions to perform edit, drag and drop, selection with check-box, and more.\n * ```html\n *  <div id=\"tree\"></div>\n * ```\n * ```typescript\n *  let treeObj: TreeView = new TreeView();\n *  treeObj.appendTo('#tree');\n * ```\n */\n\nvar TreeView =\n/** @class */\nfunction (_super) {\n  __extends(TreeView, _super);\n\n  function TreeView(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isRefreshed = false;\n    _this.preventExpand = false;\n    _this.checkedElement = [];\n    _this.disableNode = [];\n    _this.validArr = [];\n    _this.expandChildren = [];\n    _this.isFieldChange = false;\n    _this.changeDataSource = false;\n    _this.isBlazorExpandedNodes = [];\n    _this.mouseDownStatus = false;\n    return _this;\n  }\n\n  TreeView_1 = TreeView;\n  /**\n   * Get component name.\n   * @returns string\n   * @private\n   */\n\n  TreeView.prototype.getModuleName = function () {\n    return 'treeview';\n  };\n  /**\n   * Initialize the event handler\n   */\n\n\n  TreeView.prototype.preRender = function () {\n    var _this = this;\n\n    this.isBlazorPlatform = isBlazor() && this.isServerRendered;\n    this.checkActionNodes = [];\n    this.parentNodeCheck = [];\n    this.dragStartAction = false;\n    this.isAnimate = false;\n    this.keyConfigs = {\n      escape: 'escape',\n      end: 'end',\n      enter: 'enter',\n      f2: 'f2',\n      home: 'home',\n      moveDown: 'downarrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlUp: 'ctrl+uparrow',\n      ctrlEnter: 'ctrl+enter',\n      ctrlHome: 'ctrl+home',\n      ctrlEnd: 'ctrl+end',\n      ctrlA: 'ctrl+A',\n      shiftDown: 'shift+downarrow',\n      shiftUp: 'shift+uparrow',\n      shiftEnter: 'shift+enter',\n      shiftHome: 'shift+home',\n      shiftEnd: 'shift+end',\n      csDown: 'ctrl+shift+downarrow',\n      csUp: 'ctrl+shift+uparrow',\n      csEnter: 'ctrl+shift+enter',\n      csHome: 'ctrl+shift+home',\n      csEnd: 'ctrl+shift+end',\n      space: 'space'\n    };\n    this.listBaseOption = {\n      expandCollapse: true,\n      showIcon: true,\n      expandIconClass: EXPANDABLE,\n      ariaAttributes: treeAriaAttr,\n      expandIconPosition: 'Left',\n      itemCreated: function (e) {\n        _this.beforeNodeCreate(e);\n      },\n      enableHtmlSanitizer: this.enableHtmlSanitizer,\n      itemNavigable: this.fullRowNavigable\n    };\n    this.updateListProp(this.fields);\n    this.aniObj = new Animation({});\n    this.treeList = [];\n    this.isLoaded = false;\n    this.isInitalExpand = false;\n    this.expandChildren = [];\n    this.index = 0;\n    this.setTouchClass();\n\n    if (isNOU(this.selectedNodes)) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n    }\n\n    if (isNOU(this.checkedNodes)) {\n      this.setProperties({\n        checkedNodes: []\n      }, true);\n    }\n\n    if (isNOU(this.expandedNodes)) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n    } else {\n      this.isInitalExpand = true;\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @returns string\n   * @hidden\n   */\n\n\n  TreeView.prototype.getPersistData = function () {\n    var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * To Initialize the control rendering\n   * @private\n   */\n\n\n  TreeView.prototype.render = function () {\n    this.initialRender = true;\n    this.blazorInitialRender = false;\n    this.initialize();\n    this.setDataBinding(false);\n    this.setDisabledMode();\n    this.setExpandOnType();\n\n    if (!this.disabled) {\n      this.setRipple();\n    }\n\n    this.wireEditingEvents(this.allowEditing);\n    this.setDragAndDrop(this.allowDragAndDrop);\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    if (!this.isBlazorPlatform) {\n      this.initialRender = false;\n    }\n\n    this.renderComplete();\n  };\n\n  TreeView.prototype.initialize = function () {\n    if (!this.isBlazorPlatform) {\n      this.element.setAttribute('role', 'tree');\n      this.element.setAttribute('tabindex', '0');\n      this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n      this.setCssClass(null, this.cssClass);\n      this.setEnableRtl();\n      this.setFullRow(this.fullRowSelect);\n    }\n\n    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n  };\n\n  TreeView.prototype.setDisabledMode = function () {\n    if (this.disabled) {\n      this.element.classList.add(DISABLED);\n    } else {\n      this.element.classList.remove(DISABLED);\n    }\n  };\n\n  TreeView.prototype.setEnableRtl = function () {\n    this.enableRtl ? addClass([this.element], RTL) : removeClass([this.element], RTL);\n  };\n\n  TreeView.prototype.setRipple = function () {\n    var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n    var rippleModel = {\n      selector: tempStr,\n      ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n    };\n    this.rippleFn = rippleEffect(this.element, rippleModel);\n    var iconModel = {\n      selector: '.' + TEXTWRAP + ' > .' + ICON,\n      isCenterRipple: true\n    };\n    this.rippleIconFn = rippleEffect(this.element, iconModel);\n  };\n\n  TreeView.prototype.setFullRow = function (isEnabled) {\n    isEnabled ? addClass([this.element], FULLROWWRAP) : removeClass([this.element], FULLROWWRAP);\n  };\n\n  TreeView.prototype.setMultiSelect = function (isEnabled) {\n    var firstUl = select('.' + PARENTITEM, this.element);\n\n    if (isEnabled) {\n      firstUl.setAttribute('aria-multiselectable', 'true');\n    } else {\n      firstUl.removeAttribute('aria-multiselectable');\n    }\n  };\n\n  TreeView.prototype.templateComplier = function (template) {\n    if (template) {\n      var e = void 0;\n      this.element.classList.add(INTERACTION);\n\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        }\n      } catch (e) {\n        return compile(template);\n      }\n    }\n\n    this.element.classList.remove(INTERACTION);\n    return undefined;\n  };\n\n  TreeView.prototype.setDataBinding = function (changeDataSource) {\n    var _this = this;\n\n    this.treeList.push('false');\n\n    if (this.fields.dataSource instanceof DataManager) {\n      // tslint:disable\n      this.isOffline = this.isBlazorPlatform ? this.fields.dataSource.offline : this.fields.dataSource.dataSource.offline;\n\n      if (this.fields.dataSource.ready) {\n        this.fields.dataSource.ready.then(function (e) {\n          // tslint:disable\n          _this.isOffline = _this.isBlazorPlatform ? _this.fields.dataSource.offline : _this.fields.dataSource.dataSource.offline;\n\n          if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {\n            _this.treeList.pop();\n\n            _this.treeData = e.result;\n            _this.isNumberTypeId = _this.getType();\n\n            _this.setRootData();\n\n            _this.renderItems(true);\n\n            if (_this.treeList.length === 0 && !_this.isLoaded) {\n              _this.finalize();\n            }\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      } else {\n        this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {\n          _this.treeList.pop();\n\n          _this.treeData = e.result;\n          _this.isNumberTypeId = _this.getType();\n\n          _this.setRootData();\n\n          if (changeDataSource) {\n            _this.changeDataSource = true;\n          }\n\n          _this.renderItems(true);\n\n          _this.changeDataSource = false;\n\n          if (_this.treeList.length === 0 && !_this.isLoaded) {\n            _this.finalize();\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      this.treeList.pop();\n\n      if (isNOU(this.fields.dataSource)) {\n        this.rootData = this.treeData = [];\n      } else {\n        this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n        this.setRootData();\n      }\n\n      this.isNumberTypeId = this.getType();\n      this.renderItems(false);\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  };\n\n  TreeView.prototype.getQuery = function (mapper, value) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    var columns = [];\n    var query;\n\n    if (!mapper.query) {\n      query = new Query();\n      var prop = this.getActualProperties(mapper);\n\n      for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {\n        var col = _a[_i];\n\n        if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col] && col !== 'url' && columns.indexOf(mapper[col]) === -1) {\n          columns.push(mapper[col]);\n        }\n      }\n\n      query.select(columns);\n\n      if (prop.hasOwnProperty('tableName')) {\n        query.from(mapper.tableName);\n      }\n    } else {\n      query = mapper.query.clone();\n    }\n\n    ListBase.addSorting(this.sortOrder, mapper.text, query);\n\n    if (!isNOU(value) && !isNOU(mapper.parentID)) {\n      query.where(mapper.parentID, 'equal', this.isNumberTypeId ? parseFloat(value) : value);\n    }\n\n    return query;\n  };\n\n  TreeView.prototype.getType = function () {\n    return this.treeData[0] ? typeof getValue(this.fields.id, this.treeData[0]) === 'number' ? true : false : false;\n  };\n\n  TreeView.prototype.setRootData = function () {\n    this.dataType = this.getDataType(this.treeData, this.fields);\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n      var rootItems = this.getChildNodes(this.treeData, undefined, true);\n\n      if (isNOU(rootItems)) {\n        this.rootData = [];\n      } else {\n        this.rootData = rootItems;\n      }\n    } else {\n      this.rootData = this.treeData;\n    }\n  };\n\n  TreeView.prototype.renderItems = function (isSorted) {\n    // tslint:disable\n    if (!this.isBlazorPlatform || this.isBlazorPlatform && this.fields.dataSource instanceof DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor' || this.changeDataSource) {\n      this.listBaseOption.ariaAttributes.level = 1;\n      var sortedData = this.getSortedData(this.rootData);\n      this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);\n      this.element.appendChild(this.ulElement);\n      var rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n\n      if (this.loadOnDemand === false) {\n        var i = 0;\n\n        while (i < rootNodes.length) {\n          this.renderChildNodes(rootNodes[i], true, null, true);\n          i++;\n        }\n      }\n\n      var parentEle = selectAll('.' + PARENTITEM, this.element);\n\n      if (parentEle.length === 1 && rootNodes && rootNodes.length !== 0 || this.loadOnDemand) {\n        this.finalizeNode(this.element);\n      }\n    }\n\n    this.updateTemplateForBlazor();\n    this.parentNodeCheck = [];\n    this.parentCheckData = [];\n    this.updateCheckedStateFromDS();\n\n    if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n      this.updateParentCheckState();\n    }\n  };\n\n  TreeView.prototype.updateTemplateForBlazor = function () {\n    if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n      this.updateBlazorTemplate();\n    }\n  };\n  /**\n   * Update the checkedNodes from datasource at initial rendering\n   */\n\n\n  TreeView.prototype.updateCheckedStateFromDS = function (id) {\n    if (this.treeData && this.showCheckBox) {\n      if (this.dataType === 1) {\n        var mapper = this.fields;\n        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (var i = 0; i < resultData.length; i++) {\n          var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n          var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\n\n          if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {\n            this.checkedNodes.push(resultId);\n          }\n\n          if (resultData[i][this.fields.hasChildren]) {\n            var id_1 = resultData[i][this.fields.id];\n            var childData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', id_1, false));\n\n            for (var child = 0; child < childData.length; child++) {\n              var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\n\n              if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                this.checkedNodes.push(childId);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < this.checkedNodes.length; i++) {\n          var mapper_1 = this.fields;\n          var checkState = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.id, 'equal', this.checkedNodes[i], true));\n\n          if (checkState[0] && this.autoCheck) {\n            this.getCheckedNodeDetails(mapper_1, checkState);\n            this.checkIndeterminateState(checkState[0]);\n          }\n\n          var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));\n\n          for (var index = 0; index < checkedData.length; index++) {\n            var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n              this.checkedNodes.push(checkedId);\n            }\n          }\n        }\n      } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {\n        for (var index = 0; index < this.treeData.length; index++) {\n          var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\n\n          if (this.treeData[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {\n            this.checkedNodes.push(fieldId);\n          }\n\n          var childItems = getValue(this.fields.child.toString(), this.treeData[index]);\n\n          if (childItems) {\n            this.updateChildCheckState(childItems, this.treeData[index]);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * To check whether the list data has sub child and to change the parent check state accordingly\n   */\n\n\n  TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {\n    var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n    var count = 0;\n    var element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n    var parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n\n    if (!element && !parentEle) {\n      var len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(id) === -1) {\n        this.parentNodeCheck.push(id);\n      }\n\n      var childNodes = this.getChildNodes(this.treeData, id);\n\n      for (var i = 0; i < childNodes.length; i++) {\n        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n\n        if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n          this.checkedNodes.push(id);\n        }\n      }\n\n      var preElement = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', id, true));\n      this.getCheckedNodeDetails(mapper, preElement);\n    } else if (parentEle) {\n      var check = select('.' + CHECK, parentEle);\n\n      if (!check) {\n        this.changeState(parentEle, 'indeterminate', null, true, true);\n      }\n    }\n  };\n  /**\n   * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\n   */\n\n\n  TreeView.prototype.updateParentCheckState = function () {\n    var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n    var childCheckedElement;\n\n    for (var i = 0; i < indeterminate.length; i++) {\n      var node = closest(indeterminate[i], '.' + LISTITEM);\n      var nodeId = node.getAttribute('data-uid').toString();\n\n      if (this.dataType === 1) {\n        childCheckedElement = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\n      } else {\n        childCheckedElement = this.getChildNodes(this.treeData, nodeId);\n      }\n\n      var count = 0;\n\n      if (childCheckedElement) {\n        for (var j = 0; j < childCheckedElement.length; j++) {\n          var childId = childCheckedElement[j][this.fields.id].toString();\n\n          if (this.checkedNodes.indexOf(childId) !== -1) {\n            count++;\n          }\n        }\n\n        if (count === childCheckedElement.length) {\n          var nodeCheck = node.getAttribute('data-uid');\n\n          if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n            this.checkedNodes.push(nodeCheck);\n          }\n\n          this.changeState(node, 'check', null, true, true);\n        } else if (count === 0 && this.checkedNodes.length === 0) {\n          this.changeState(node, 'uncheck', null, true, true);\n        }\n      }\n    }\n  };\n  /**\n   * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\n   */\n\n\n  TreeView.prototype.checkIndeterminateState = function (data) {\n    var element;\n\n    if (this.dataType === 1) {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n    } else {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n    }\n\n    if (element) {\n      var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\n\n      if (ariaChecked !== 'true') {\n        this.changeState(element, 'indeterminate', null, true, true);\n      }\n    } else if (this.dataType === 2) {\n      var len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n        this.parentNodeCheck.push(data[this.fields.id].toString());\n      }\n    }\n  };\n  /**\n   * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\n   */\n\n\n  TreeView.prototype.updateChildCheckState = function (childItems, treeData) {\n    var count = 0;\n    var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n\n    for (var index = 0; index < childItems.length; index++) {\n      var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n      if (childItems[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n        count++;\n      }\n\n      var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n      if (subChildItems) {\n        this.parentCheckData.push(treeData);\n        this.updateChildCheckState(subChildItems, childItems[index]);\n      }\n\n      if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n        this.checkedNodes.push(checkedParent);\n      }\n    }\n\n    if (count !== 0 && this.autoCheck) {\n      this.checkIndeterminateState(treeData);\n\n      for (var len = 0; len < this.parentCheckData.length; len++) {\n        if (treeData !== this.parentCheckData[len] && this.parentCheckData[len]) {\n          this.checkIndeterminateState(this.parentCheckData[len]);\n        }\n      }\n    }\n\n    this.parentCheckData = [];\n  };\n\n  TreeView.prototype.beforeNodeCreate = function (e) {\n    if (this.showCheckBox) {\n      var checkboxEle = createCheckBox(this.createElement, true, {\n        cssClass: this.touchClass\n      });\n      checkboxEle.setAttribute('role', 'checkbox');\n      var icon = select('div.' + ICON, e.item);\n      var id = e.item.getAttribute('data-uid');\n      e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNOU(icon) ? 0 : 1]);\n      var checkValue = getValue(e.fields.isChecked, e.curData);\n\n      if (this.checkedNodes.indexOf(id) > -1) {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else if (!isNOU(checkValue) && checkValue.toString() === 'true') {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else {\n        checkboxEle.setAttribute('aria-checked', 'false');\n      }\n\n      var frame = select('.' + CHECKBOXFRAME, checkboxEle);\n      EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n      EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n    }\n\n    if (this.fullRowSelect) {\n      this.createFullRow(e.item);\n    }\n\n    if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {\n      e.item.setAttribute('aria-selected', 'false');\n    }\n\n    var fields = e.fields;\n    this.addActionClass(e, fields.selected, SELECTED);\n    this.addActionClass(e, fields.expanded, EXPANDED);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      var textEle = e.item.querySelector('.' + LISTTEXT);\n      var dataId = e.item.getAttribute('data-uid');\n      textEle.innerHTML = '';\n      this.renderNodeTemplate(e.curData, textEle, dataId);\n    }\n\n    var eventArgs = {\n      node: e.item,\n      nodeData: e.curData,\n      text: e.text\n    };\n\n    if (!this.isRefreshed) {\n      this.trigger('drawNode', eventArgs);\n    }\n  };\n\n  TreeView.prototype.frameMouseHandler = function (e) {\n    var rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\n    rippleMouseHandler(e, rippleSpan);\n  };\n\n  TreeView.prototype.addActionClass = function (e, action, cssClass) {\n    var data = e.curData;\n    var actionValue = getValue(action, data);\n\n    if (!isNOU(actionValue) && actionValue.toString() !== 'false') {\n      e.item.classList.add(cssClass);\n    }\n  };\n\n  TreeView.prototype.getDataType = function (ds, mapper) {\n    if (this.fields.dataSource instanceof DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {\n      for (var i = 0; i < ds.length; i++) {\n        if (this.isOffline) {\n          if (typeof mapper.child === 'string' && isNOU(getValue(mapper.child, ds[i])) && !isNOU(getValue(mapper.parentID, ds[i]))) {\n            return 1;\n          }\n        } else if (typeof mapper.child === 'string' && isNOU(getValue(mapper.child, ds[i]))) {\n          return 1;\n        }\n      }\n\n      return 2;\n    }\n\n    for (var i = 0, len = ds.length; i < len; i++) {\n      if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, ds[i]))) {\n        return 2;\n      }\n\n      if (!isNOU(getValue(mapper.parentID, ds[i])) || !isNOU(getValue(mapper.hasChildren, ds[i]))) {\n        return 1;\n      }\n    }\n\n    return 1;\n  };\n\n  TreeView.prototype.getGroupedData = function (dataSource, groupBy) {\n    var cusQuery = new Query().group(groupBy);\n    var ds = ListBase.getDataSource(dataSource, cusQuery);\n    var grpItem = [];\n\n    for (var j = 0; j < ds.length; j++) {\n      var itemObj = ds[j].items;\n      grpItem.push(itemObj);\n    }\n\n    return grpItem;\n  };\n\n  TreeView.prototype.getSortedData = function (list) {\n    if (list && this.sortOrder !== 'None') {\n      list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\n    }\n\n    return list;\n  };\n\n  TreeView.prototype.finalizeNode = function (element) {\n    var iNodes = selectAll('.' + IMAGE, element);\n\n    for (var k = 0; k < iNodes.length; k++) {\n      iNodes[k].setAttribute('alt', IMAGE);\n    }\n\n    if (this.isLoaded) {\n      var sNodes = selectAll('.' + SELECTED, element);\n\n      for (var i = 0; i < sNodes.length; i++) {\n        this.selectNode(sNodes[i], null);\n        break;\n      }\n\n      removeClass(sNodes, SELECTED);\n    }\n\n    var cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n\n    for (var j = 0; j < cNodes.length; j++) {\n      var icon = select('div.' + ICON, cNodes[j]);\n\n      if (icon && icon.classList.contains(EXPANDABLE)) {\n        this.disableExpandAttr(cNodes[j]);\n      }\n    }\n\n    var eNodes = selectAll('.' + EXPANDED, element);\n\n    if (!this.isInitalExpand) {\n      for (var i = 0; i < eNodes.length; i++) {\n        this.renderChildNodes(eNodes[i]);\n      }\n    }\n\n    removeClass(eNodes, EXPANDED);\n    this.updateList();\n\n    if (this.isLoaded) {\n      this.updateCheckedProp();\n    }\n  };\n\n  TreeView.prototype.updateCheckedProp = function () {\n    if (this.showCheckBox) {\n      var nodes = [].concat([], this.checkedNodes);\n      this.setProperties({\n        checkedNodes: nodes\n      }, true);\n    }\n  };\n\n  TreeView.prototype.ensureIndeterminate = function () {\n    if (this.autoCheck) {\n      var liElement = selectAll('li', this.element);\n      var ulElement = void 0;\n\n      for (var i = 0; i < liElement.length; i++) {\n        if (liElement[i].classList.contains(LISTITEM)) {\n          ulElement = select('.' + PARENTITEM, liElement[i]);\n\n          if (ulElement) {\n            this.ensureParentCheckState(liElement[i]);\n          } else {\n            this.ensureChildCheckState(liElement[i]);\n          }\n        }\n      }\n    } else {\n      var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n\n      for (var i = 0; i < indeterminate.length; i++) {\n        indeterminate[i].classList.remove(INDETERMINATE);\n      }\n    }\n  };\n\n  TreeView.prototype.ensureParentCheckState = function (element) {\n    if (!isNOU(element)) {\n      if (element.classList.contains(ROOT)) {\n        return;\n      }\n\n      var ulElement = element;\n\n      if (element.classList.contains(LISTITEM)) {\n        ulElement = select('.' + PARENTITEM, element);\n      }\n\n      var checkedNodes = selectAll('.' + CHECK, ulElement);\n      var indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\n      var nodes = selectAll('.' + LISTITEM, ulElement);\n      var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n\n      if (nodes.length === checkedNodes.length) {\n        this.changeState(checkBoxEle, 'check', null, true, true);\n      } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\n        this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n      } else if (checkedNodes.length === 0) {\n        this.changeState(checkBoxEle, 'uncheck', null, true, true);\n      }\n\n      var parentUL = closest(element, '.' + PARENTITEM);\n\n      if (!isNOU(parentUL)) {\n        var currentParent = closest(parentUL, '.' + LISTITEM);\n        this.ensureParentCheckState(currentParent);\n      }\n    }\n  };\n\n  TreeView.prototype.ensureChildCheckState = function (element, e) {\n    if (!isNOU(element)) {\n      var childElement = select('.' + PARENTITEM, element);\n      var checkBoxes = void 0;\n\n      if (!isNOU(childElement)) {\n        checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\n        var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n        var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n        var childCheck = childElement.querySelectorAll('li');\n        var expandState = childElement.parentElement.getAttribute('aria-expanded');\n        var checkedState = void 0;\n\n        for (var index = 0; index < checkBoxes.length; index++) {\n          var childId = childCheck[index].getAttribute('data-uid');\n\n          if (!isNOU(this.currentLoadData) && !isNOU(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\n            checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\n\n            if (this.ele !== -1) {\n              checkedState = isChecked ? 'check' : 'uncheck';\n            }\n\n            if (checkedState === 'uncheck' && !isUndefined(this.parentNodeCheck) && this.autoCheck && this.parentNodeCheck.indexOf(childId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n              checkedState = 'indeterminate';\n            }\n          } else {\n            var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n\n            if (isChecked) {\n              checkedState = 'check';\n            } else if (isNodeChecked && !this.isLoaded) {\n              checkedState = 'check';\n            } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n              checkedState = 'check';\n            } else if (childCheck[index].classList.contains(CHILD) && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else if (this.dataType === 1 && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else {\n              checkedState = 'uncheck';\n            }\n          }\n\n          this.changeState(checkBoxes[index], checkedState, e, true, true);\n        }\n      }\n\n      if (this.autoCheck && this.isLoaded) {\n        this.updateParentCheckState();\n      }\n    }\n  };\n\n  TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {\n    var li = selectAll('.' + LISTITEM, this.element);\n\n    if (!isNOU(nodes)) {\n      for (var len = nodes.length; len >= 0; len--) {\n        var liEle = void 0;\n\n        if (nodes.length === 1) {\n          liEle = this.getElement(nodes[len - 1]);\n        } else {\n          liEle = this.getElement(nodes[len]);\n        }\n\n        if (isNOU(liEle)) {\n          var node = void 0;\n          node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\n\n          if (node !== '' && doCheck && node) {\n            this.setValidCheckedNode(node);\n            this.dynamicCheckState(node, doCheck);\n          } else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n            var childItems = this.getChildNodes(this.treeData, node);\n\n            if (childItems) {\n              for (var i = 0; i < childItems.length; i++) {\n                var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n                if (this.checkedNodes.indexOf(id) !== -1) {\n                  this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                }\n              }\n\n              if (this.parentNodeCheck.indexOf(node) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n              }\n            }\n\n            if (node) {\n              this.dynamicCheckState(node, doCheck);\n            }\n\n            this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n          }\n\n          continue;\n        }\n\n        var checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n        this.validateCheckNode(checkBox, !doCheck, liEle, null);\n      }\n    } else {\n      var checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\n\n      if (this.loadOnDemand) {\n        for (var index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n        }\n      } else {\n        for (var index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\n        }\n      }\n    }\n\n    if (nodes) {\n      for (var j = 0; j < nodes.length; j++) {\n        var node = nodes[j] ? nodes[j].toString() : '';\n\n        if (!doCheck) {\n          this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n        }\n      }\n    }\n\n    if (this.autoCheck) {\n      this.updateParentCheckState();\n    }\n  };\n\n  TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {\n    var currLi = closest(checkbox, '.' + LISTITEM);\n    var id = currLi.getAttribute('data-uid');\n    var nodeDetails = this.getNodeData(currLi);\n\n    if (nodeDetails.isChecked === 'true' && !doCheck) {\n      this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n    }\n  };\n  /**\n   * Changes the parent and child  check state while changing the checkedNodes via setmodel\n   */\n\n\n  TreeView.prototype.dynamicCheckState = function (node, doCheck) {\n    if (this.dataType === 1) {\n      var count = 0;\n      var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\n\n      if (resultId[0]) {\n        var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n        var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n        var parentElement = this.element.querySelector('[data-uid=\"' + parent_1 + '\"]');\n        var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n        var check = parentElement ? select('.' + CHECK, parentElement) : null;\n        var element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        var childNodes = this.getChildNodes(this.treeData, parent_1);\n\n        if (childNodes) {\n          for (var i = 0; i < childNodes.length; i++) {\n            var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n        }\n\n        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && element && id === node && !doCheck) {\n          this.changeState(element, 'uncheck', null);\n        } else if (this.checkedNodes.indexOf(node) !== -1 && element && id === node && doCheck) {\n          this.changeState(element, 'check', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count !== 0) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count === 0) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else if (!element && !parentElement && id === node && this.autoCheck) {\n          this.updateIndeterminate(node, doCheck);\n        }\n      }\n    } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {\n      var id = void 0;\n      var parentElement = void 0;\n      var check = void 0;\n\n      for (var i = 0; i < this.treeData.length; i++) {\n        id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\n        parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        check = parentElement ? select('.' + CHECK, parentElement) : null;\n\n        if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        }\n\n        var subChild = getValue(this.fields.child.toString(), this.treeData[i]);\n\n        if (subChild) {\n          this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n        }\n      }\n    }\n  };\n  /**\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\n   */\n\n\n  TreeView.prototype.updateIndeterminate = function (node, doCheck) {\n    var indeterminateData = this.getTreeData(node);\n    var count = 0;\n    var parent;\n\n    if (this.dataType === 1) {\n      parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n    }\n\n    var childNodes = this.getChildNodes(this.treeData, parent);\n\n    if (childNodes) {\n      for (var i = 0; i < childNodes.length; i++) {\n        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n      }\n    }\n\n    var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n\n    if (parentElement && doCheck) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n      this.changeState(parentElement, 'uncheck', null);\n    } else if (!parentElement) {\n      if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n      } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n        this.parentNodeCheck.push(parent);\n      } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n        this.parentNodeCheck.push(parent);\n      }\n\n      this.updateIndeterminate(parent, doCheck);\n\n      if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n      }\n    }\n  };\n  /**\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\n   */\n\n\n  TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {\n    var count = 0;\n\n    for (var j = 0; j < subChild.length; j++) {\n      var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\n\n      if (this.checkedNodes.indexOf(subId) !== -1) {\n        count++;\n      }\n\n      var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n      var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n      var check = parentElement ? select('.' + CHECK, parentElement) : null;\n      var element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n      var childElementCheck = element ? select('.' + CHECK, element) : null;\n\n      if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {\n        this.changeState(parentElement, 'indeterminate', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && subId === node && !doCheck) {\n        if (this.autoCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else {\n          if (count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n          } else {\n            this.changeState(parentElement, 'uncheck', null);\n          }\n        }\n      } else if (this.checkedNodes.indexOf(node) === -1 && element && subId === node && !doCheck) {\n        this.changeState(element, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {\n        indeterminate.classList.remove(INDETERMINATE);\n      } else if (this.checkedNodes.indexOf(node) === -1 && !element && check && subId === node && count === 0) {\n        this.changeState(parentElement, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n        this.changeState(element, 'uncheck', null);\n      } else if (!element && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {\n        var childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n\n        if (doCheck && count !== 0) {\n          this.changeState(childElement, 'indeterminate', null);\n        } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n          this.checkedNodes.push(parent);\n        } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n        }\n\n        if (this.parentNodeCheck.indexOf(parent) === -1) {\n          this.parentNodeCheck.push(parent);\n        }\n      }\n\n      var innerChild = getValue(this.fields.child.toString(), subChild[j]);\n\n      if (innerChild) {\n        this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n      }\n    }\n  };\n\n  TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {\n    var _this = this;\n\n    var eventArgs;\n    var currLi = closest(wrapper, '.' + LISTITEM);\n\n    if (!isPrevent) {\n      this.checkActionNodes = [];\n      eventArgs = this.getCheckEvent(currLi, state, e);\n      this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n        }\n      });\n    } else {\n      this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n    }\n  };\n\n  TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n    var ariaState;\n    var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n\n    if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n      frameSpan.classList.remove(INDETERMINATE);\n      frameSpan.classList.add(CHECK);\n      this.addCheck(currLi);\n      ariaState = 'true';\n    } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n      removeClass([frameSpan], [CHECK, INDETERMINATE]);\n      this.removeCheck(currLi);\n      ariaState = 'false';\n    } else if (state === 'indeterminate' && this.autoCheck) {\n      frameSpan.classList.remove(CHECK);\n      frameSpan.classList.add(INDETERMINATE);\n      this.removeCheck(currLi);\n      ariaState = 'mixed';\n    }\n\n    ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n\n    if (!isNOU(ariaState)) {\n      wrapper.setAttribute('aria-checked', ariaState);\n    }\n\n    if (isAdd) {\n      var data = [].concat([], this.checkActionNodes);\n      eventArgs = this.getCheckEvent(currLi, state, e);\n\n      if (isUndefined(isPrevent)) {\n        eventArgs.data = data;\n      }\n    }\n\n    if (doCheck !== undefined) {\n      this.ensureStateChange(currLi, doCheck);\n    }\n\n    if (!isPrevent) {\n      if (!isNOU(ariaState)) {\n        wrapper.setAttribute('aria-checked', ariaState);\n        this.allowServerDataBinding = true;\n        this.updateServerProperties(\"check\");\n        this.allowServerDataBinding = false;\n        eventArgs.data[0].checked = ariaState;\n        this.trigger('nodeChecked', eventArgs);\n        this.checkActionNodes = [];\n      }\n    }\n  };\n\n  TreeView.prototype.addCheck = function (liEle) {\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.checkedNodes.indexOf(id) === -1) {\n      this.checkedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.removeCheck = function (liEle) {\n    var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.checkedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.getCheckEvent = function (currLi, action, e) {\n    this.checkActionNodes.push(this.getNodeData(currLi));\n    var nodeData = this.checkActionNodes;\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      data: nodeData\n    };\n  };\n\n  TreeView.prototype.finalize = function () {\n    var firstUl = select('.' + PARENTITEM, this.element);\n\n    if (!isNullOrUndefined(firstUl)) {\n      firstUl.setAttribute('role', treeAriaAttr.treeRole);\n      this.setMultiSelect(this.allowMultiSelection);\n      var firstNode = select('.' + LISTITEM, this.element);\n\n      if (firstNode) {\n        addClass([firstNode], FOCUS);\n        this.updateIdAttr(null, firstNode);\n      }\n\n      this.renderReactTemplates();\n      this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\n      this.doExpandAction();\n    }\n  };\n\n  TreeView.prototype.doExpandAction = function () {\n    var eUids = this.expandedNodes;\n\n    if (this.isInitalExpand && eUids.length > 0) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n\n      if (this.isBlazorPlatform && !this.initialRender) {\n        return;\n      } // tslint:disable\n\n\n      if (this.fields.dataSource instanceof DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {\n        this.expandGivenNodes(eUids);\n      } else {\n        for (var i = 0; i < eUids.length; i++) {\n          var eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\n\n          if (!isNOU(eNode)) {\n            var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n            if (!isNOU(icon)) {\n              this.expandAction(eNode, icon, null);\n            }\n          } else {\n            if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\n              this.expandChildren.push(eUids[i].toString());\n            }\n\n            continue;\n          }\n        }\n\n        this.afterFinalized();\n      }\n    } else {\n      this.afterFinalized();\n    }\n  };\n\n  TreeView.prototype.expandGivenNodes = function (arr) {\n    var proxy = this;\n    this.expandCallback(arr[this.index], function () {\n      proxy.index++;\n\n      if (proxy.index < arr.length) {\n        proxy.expandGivenNodes(arr);\n      } else {\n        proxy.afterFinalized();\n      }\n    });\n  };\n\n  TreeView.prototype.expandCallback = function (eUid, callback) {\n    var eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\n\n    if (!isNOU(eNode)) {\n      var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n      if (!isNOU(icon)) {\n        this.expandAction(eNode, icon, null, false, callback);\n      } else {\n        callback();\n      }\n    } else {\n      callback();\n    }\n  };\n\n  TreeView.prototype.afterFinalized = function () {\n    if (!this.isBlazorPlatform || this.isBlazorPlatform && !this.initialRender) {\n      this.doSelectionAction();\n    }\n\n    this.updateCheckedProp();\n\n    if (this.isBlazorPlatform) {\n      if (this.initialRender) {\n        this.setCheckedNodes(this.checkedNodes);\n      }\n\n      this.updateInstance();\n      this.initialRender = false;\n    }\n\n    this.isAnimate = true;\n    this.isInitalExpand = false;\n\n    if (!this.isLoaded || this.isFieldChange) {\n      var eventArgs = {\n        data: this.treeData\n      };\n      this.trigger('dataBound', eventArgs);\n    }\n\n    this.isLoaded = true;\n  };\n\n  TreeView.prototype.doSelectionAction = function () {\n    var sNodes = selectAll('.' + SELECTED, this.element);\n    var sUids = this.selectedNodes;\n\n    if (sUids.length > 0) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n\n      for (var i = 0; i < sUids.length; i++) {\n        var sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\n\n        if (sNode && !sNode.classList.contains('e-active')) {\n          this.selectNode(sNode, null, true);\n        } else {\n          this.selectedNodes.push(sUids[i]);\n        }\n\n        if (!this.allowMultiSelection) {\n          break;\n        }\n      }\n    } else {\n      this.selectGivenNodes(sNodes);\n    }\n\n    removeClass(sNodes, SELECTED);\n  };\n\n  TreeView.prototype.selectGivenNodes = function (sNodes) {\n    for (var i = 0; i < sNodes.length; i++) {\n      if (!sNodes[i].classList.contains('e-disable')) {\n        this.selectNode(sNodes[i], null, true);\n      }\n\n      if (!this.allowMultiSelection) {\n        break;\n      }\n    }\n  };\n\n  TreeView.prototype.clickHandler = function (event) {\n    var target = event.originalEvent.target;\n    EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n\n    if (!target || this.dragStartAction) {\n      return;\n    } else {\n      var classList = target.classList;\n      var li = closest(target, '.' + LISTITEM);\n\n      if (!li) {\n        return;\n      } else if (event.originalEvent.which !== 3) {\n        var rippleElement = select('.' + RIPPLEELMENT, li);\n        var rippleIcons = select('.' + ICON, li);\n        this.removeHover();\n        this.setFocusElement(li);\n\n        if (this.showCheckBox && !li.classList.contains('e-disable')) {\n          var checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n\n          if (!isNOU(checkWrapper)) {\n            var checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\n            this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n            this.triggerClickEvent(event.originalEvent, li);\n            return;\n          }\n        }\n\n        if (classList.contains(EXPANDABLE)) {\n          this.expandAction(li, target, event);\n        } else if (classList.contains(COLLAPSIBLE)) {\n          this.collapseNode(li, target, event);\n        } else if (rippleElement && rippleIcons) {\n          if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n            this.expandAction(li, rippleIcons, event);\n          } else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n            this.collapseNode(li, rippleIcons, event);\n          } else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        } else {\n          if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        }\n      }\n\n      this.triggerClickEvent(event.originalEvent, li);\n    }\n  };\n\n  TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {\n    var currLi = closest(wrapper, '.' + LISTITEM);\n    var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n    eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n    this.trigger('nodeChecked', eventArgs);\n  };\n\n  TreeView.prototype.triggerClickEvent = function (e, li) {\n    var eventArgs = {\n      event: e,\n      node: li\n    };\n    this.trigger('nodeClicked', eventArgs);\n  };\n\n  TreeView.prototype.expandNode = function (currLi, icon, loaded) {\n    var _this = this;\n\n    this.renderReactTemplates();\n\n    if (icon.classList.contains(LOAD)) {\n      this.hideSpinner(icon);\n    }\n\n    if (!this.initialRender) {\n      icon.classList.add('interaction');\n    }\n\n    if (loaded !== true || loaded === true && currLi.classList.contains('e-expanded')) {\n      if (this.preventExpand !== true) {\n        removeClass([icon], EXPANDABLE);\n        addClass([icon], COLLAPSIBLE);\n        var start_1 = 0;\n        var end_1 = 0;\n        var proxy_1 = this;\n        var ul_1 = select('.' + PARENTITEM, currLi);\n        var liEle_1 = currLi;\n        this.setHeight(liEle_1, ul_1);\n        var activeElement_1 = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n        if (this.isAnimate && !this.isRefreshed) {\n          this.aniObj.animate(ul_1, {\n            name: this.animation.expand.effect,\n            duration: this.animation.expand.duration,\n            timingFunction: this.animation.expand.easing,\n            begin: function (args) {\n              liEle_1.style.overflow = 'hidden';\n\n              if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);\n              }\n\n              start_1 = liEle_1.offsetHeight;\n              end_1 = select('.' + TEXTWRAP, currLi).offsetHeight;\n            },\n            progress: function (args) {\n              args.element.style.display = 'block';\n              proxy_1.animateHeight(args, start_1, end_1);\n            },\n            end: function (args) {\n              args.element.style.display = 'block';\n\n              if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);\n              }\n\n              _this.expandedNode(liEle_1, ul_1, icon);\n            }\n          });\n        } else {\n          this.expandedNode(liEle_1, ul_1, icon);\n        }\n      }\n    } else {\n      var ul = select('.' + PARENTITEM, currLi);\n      ul.style.display = 'none';\n\n      if (this.fields.dataSource instanceof DataManager === true) {\n        this.preventExpand = false;\n      }\n    }\n\n    if (this.initialRender) {\n      icon.classList.add('interaction');\n    }\n  };\n\n  TreeView.prototype.expandedNode = function (currLi, ul, icon) {\n    ul.style.display = 'block';\n    currLi.style.display = 'block';\n    currLi.style.overflow = '';\n    currLi.style.height = '';\n    removeClass([icon], PROCESS);\n    this.addExpand(currLi);\n    this.allowServerDataBinding = true;\n    this.updateServerProperties(\"expand\");\n    this.allowServerDataBinding = false;\n\n    if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, null);\n      this.trigger('nodeExpanded', this.expandArgs);\n    }\n  };\n\n  TreeView.prototype.addExpand = function (liEle) {\n    liEle.setAttribute('aria-expanded', 'true');\n    removeClass([liEle], NODECOLLAPSED);\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.expandedNodes.indexOf(id) === -1) {\n      this.expandedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.collapseNode = function (currLi, icon, e) {\n    var _this = this;\n\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    var colArgs;\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(currLi, e);\n      this.trigger('nodeCollapsing', colArgs, function (observedArgs) {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          _this.nodeCollapseAction(currLi, icon, observedArgs);\n        }\n      });\n    } else {\n      this.nodeCollapseAction(currLi, icon, colArgs);\n    }\n  };\n\n  TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {\n    var _this = this;\n\n    removeClass([icon], COLLAPSIBLE);\n    addClass([icon], EXPANDABLE);\n    var start = 0;\n    var end = 0;\n    var proxy = this;\n    var ul = select('.' + PARENTITEM, currLi);\n    var liEle = currLi;\n    var activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n    if (this.isAnimate) {\n      this.aniObj.animate(ul, {\n        name: this.animation.collapse.effect,\n        duration: this.animation.collapse.duration,\n        timingFunction: this.animation.collapse.easing,\n        begin: function (args) {\n          liEle.style.overflow = 'hidden';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n          }\n\n          start = select('.' + TEXTWRAP, currLi).offsetHeight;\n          end = liEle.offsetHeight;\n        },\n        progress: function (args) {\n          proxy.animateHeight(args, start, end);\n        },\n        end: function (args) {\n          args.element.style.display = 'none';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n          }\n\n          _this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n      });\n    } else {\n      this.collapsedNode(liEle, ul, icon, colArgs);\n    }\n  };\n\n  TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {\n    ul.style.display = 'none';\n    liEle.style.overflow = '';\n    liEle.style.height = '';\n    removeClass([icon], PROCESS);\n    this.allowServerDataBinding = true;\n    this.updateServerProperties(\"expand\");\n    this.allowServerDataBinding = false;\n    this.removeExpand(liEle);\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(liEle, null);\n      this.trigger('nodeCollapsed', colArgs);\n    }\n  };\n\n  TreeView.prototype.removeExpand = function (liEle, toRemove) {\n    if (toRemove) {\n      liEle.removeAttribute('aria-expanded');\n    } else {\n      this.disableExpandAttr(liEle);\n    }\n\n    var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.expandedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.disableExpandAttr = function (liEle) {\n    liEle.setAttribute('aria-expanded', 'false');\n    addClass([liEle], NODECOLLAPSED);\n  };\n\n  TreeView.prototype.setHeight = function (currLi, ul) {\n    ul.style.display = 'block';\n    ul.style.visibility = 'hidden';\n    currLi.style.height = currLi.offsetHeight + 'px';\n    ul.style.display = 'none';\n    ul.style.visibility = '';\n  };\n\n  TreeView.prototype.animateHeight = function (args, start, end) {\n    var remaining = (args.duration - args.timeStamp) / args.duration;\n    var currentHeight = (end - start) * remaining + start;\n    args.element.parentElement.style.height = currentHeight + 'px';\n  };\n\n  TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {\n    var _this = this;\n\n    var eicon = select('div.' + ICON, parentLi);\n\n    if (isNOU(eicon)) {\n      return;\n    }\n\n    this.showSpinner(eicon);\n    var childItems; // tslint:disable\n\n    if (this.fields.dataSource instanceof DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {\n      var level = this.parents(parentLi, '.' + PARENTITEM).length;\n      var mapper_2 = this.getChildFields(this.fields, level, 1);\n\n      if (isNOU(mapper_2) || isNOU(mapper_2.dataSource)) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      }\n\n      this.treeList.push('false');\n\n      if (this.fields.dataSource instanceof DataManager && this.isOffline) {\n        this.treeList.pop();\n        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n        this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n        this.updateTemplateForBlazor();\n      } else {\n        mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {\n          _this.treeList.pop();\n\n          childItems = e.result;\n\n          if (_this.dataType === 1) {\n            _this.dataType = 2;\n          }\n\n          _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n\n          _this.updateTemplateForBlazor();\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n      this.currentLoadData = this.getSortedData(childItems);\n\n      if (isNOU(childItems) || childItems.length === 0) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      } else {\n        if (!this.isBlazorPlatform || !this.initialRender) {\n          this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n          parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));\n        }\n\n        this.expandNode(parentLi, eicon, loaded);\n        this.setSelectionForChildNodes(childItems);\n        this.ensureCheckNode(parentLi);\n        this.finalizeNode(parentLi);\n\n        if (this.loadOnDemand && this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n          this.updateBlazorTemplate();\n        }\n\n        this.disableTreeNodes(childItems);\n        this.renderSubChild(parentLi, expandChild, loaded);\n      }\n    }\n  };\n\n  TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n    this.currentLoadData = childItems;\n\n    if (isNOU(childItems) || childItems.length === 0) {\n      detach(eicon);\n      this.removeExpand(parentLi, true);\n    } else {\n      this.updateListProp(mapper);\n\n      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n        var id = parentLi.getAttribute('data-uid');\n        var nodeData = this.getNodeObject(id);\n        setValue('child', childItems, nodeData);\n      }\n\n      this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n      parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\n      this.expandNode(parentLi, eicon, loaded);\n      this.setSelectionForChildNodes(childItems);\n      this.ensureCheckNode(parentLi);\n      this.finalizeNode(parentLi);\n      this.disableTreeNodes(childItems);\n      this.renderSubChild(parentLi, expandChild, loaded);\n    }\n\n    if (callback) {\n      callback();\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  };\n\n  TreeView.prototype.disableTreeNodes = function (childItems) {\n    var i = 0;\n\n    while (i < childItems.length) {\n      var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n      if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n        this.doDisableAction([id]);\n      }\n\n      i++;\n    }\n  };\n  /**\n   * Sets the child Item in selectedState while rendering the child node\n   */\n\n\n  TreeView.prototype.setSelectionForChildNodes = function (nodes) {\n    var i;\n\n    for (i = 0; i < nodes.length; i++) {\n      var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\n\n      if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n        this.doSelectionAction();\n      }\n    }\n  };\n\n  TreeView.prototype.ensureCheckNode = function (element) {\n    if (this.showCheckBox) {\n      this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n\n      if (this.autoCheck) {\n        this.ensureChildCheckState(element);\n        this.ensureParentCheckState(element);\n      }\n    }\n\n    this.currentLoadData = null;\n  };\n\n  TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {\n    if (nodeLevel === dataLevel) {\n      return mapper;\n    } else {\n      return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  };\n\n  TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {\n    var childData;\n\n    if (nodeLevel === dataLevel) {\n      return this.getChildMapper(mapper);\n    } else {\n      return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  };\n\n  TreeView.prototype.getChildMapper = function (mapper) {\n    return typeof mapper.child === 'string' || isNOU(mapper.child) ? mapper : mapper.child;\n  };\n\n  TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {\n    if (isRoot === void 0) {\n      isRoot = false;\n    }\n\n    var childNodes;\n\n    if (isNOU(obj)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      return this.getChildGroup(this.groupedData, parentId, isRoot);\n    } else {\n      if (typeof this.fields.child === 'string') {\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n          var dataId = getValue(this.fields.id, obj[i]);\n\n          if (dataId && dataId.toString() === parentId) {\n            return getValue(this.fields.child, obj[i]);\n          } else if (!isNOU(getValue(this.fields.child, obj[i]))) {\n            childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId);\n\n            if (childNodes !== undefined) {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {\n    var childNodes;\n\n    if (isNOU(data)) {\n      return childNodes;\n    }\n\n    for (var i = 0, objlen = data.length; i < objlen; i++) {\n      if (!isNOU(data[i][0]) && !isNOU(getValue(this.fields.parentID, data[i][0]))) {\n        if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\n          return data[i];\n        }\n      } else if (isRoot) {\n        return data[i];\n      } else {\n        return [];\n      }\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {\n    if (expandChild) {\n      var cIcons = selectAll('.' + EXPANDABLE, element);\n\n      for (var i = 0, len = cIcons.length; i < len; i++) {\n        var icon = cIcons[i];\n\n        if (element.querySelector('.e-icons') !== cIcons[i]) {\n          var curLi = closest(icon, '.' + LISTITEM);\n          this.expandArgs = this.getExpandEvent(curLi, null);\n\n          if (loaded !== true) {\n            this.trigger('nodeExpanding', this.expandArgs);\n          }\n\n          this.renderChildNodes(curLi, expandChild, null, loaded);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.toggleSelect = function (li, e, multiSelect) {\n    if (!li.classList.contains('e-disable')) {\n      if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {\n        this.unselectNode(li, e);\n      } else {\n        this.selectNode(li, e, multiSelect);\n      }\n    }\n  };\n\n  TreeView.prototype.isActive = function (li) {\n    return li.classList.contains(ACTIVE) ? true : false;\n  };\n\n  TreeView.prototype.selectNode = function (li, e, multiSelect) {\n    var _this = this;\n\n    if (isNOU(li) || !this.allowMultiSelection && this.isActive(li) && !isNOU(e)) {\n      this.setFocusElement(li);\n      return;\n    }\n\n    var eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'select', e);\n      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeSelectAction(li, e, observedArgs, multiSelect);\n        }\n      });\n    } else {\n      this.nodeSelectAction(li, e, eventArgs, multiSelect);\n    }\n  };\n\n  TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {\n    if (!this.allowMultiSelection || !multiSelect && (!e || e && !e.ctrlKey)) {\n      this.removeSelectAll();\n    }\n\n    if (this.allowMultiSelection && e && e.shiftKey) {\n      if (!this.startNode) {\n        this.startNode = li;\n      }\n\n      var startIndex = this.liList.indexOf(this.startNode);\n      var endIndex = this.liList.indexOf(li);\n\n      if (startIndex > endIndex) {\n        var temp = startIndex;\n        startIndex = endIndex;\n        endIndex = temp;\n      }\n\n      for (var i = startIndex; i <= endIndex; i++) {\n        var currNode = this.liList[i];\n\n        if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\n          this.addSelect(currNode);\n        }\n      }\n    } else {\n      this.startNode = li;\n      this.addSelect(li);\n    }\n\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      this.allowServerDataBinding = true;\n      this.updateServerProperties(\"select\");\n      this.allowServerDataBinding = false;\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  };\n\n  TreeView.prototype.unselectNode = function (li, e) {\n    var _this = this;\n\n    var eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'un-select', e);\n      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.allowServerDataBinding = true;\n\n          _this.updateServerProperties(\"select\");\n\n          _this.allowServerDataBinding = false;\n\n          _this.nodeUnselectAction(li, observedArgs);\n        }\n      });\n    } else {\n      this.nodeUnselectAction(li, eventArgs);\n    }\n  };\n\n  TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {\n    this.removeSelect(li);\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      this.allowServerDataBinding = true;\n      this.updateServerProperties(\"select\");\n      this.allowServerDataBinding = false;\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  };\n\n  TreeView.prototype.setFocusElement = function (li) {\n    if (!isNOU(li)) {\n      var focusedNode = this.getFocusedNode();\n\n      if (focusedNode) {\n        removeClass([focusedNode], FOCUS);\n      }\n\n      addClass([li], FOCUS);\n      this.updateIdAttr(focusedNode, li);\n    }\n  };\n\n  TreeView.prototype.addSelect = function (liEle) {\n    liEle.setAttribute('aria-selected', 'true');\n    addClass([liEle], ACTIVE);\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.selectedNodes.indexOf(id) === -1) {\n      this.selectedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.removeSelect = function (liEle) {\n    if (this.allowMultiSelection) {\n      liEle.setAttribute('aria-selected', 'false');\n    } else {\n      liEle.removeAttribute('aria-selected');\n    }\n\n    removeClass([liEle], ACTIVE);\n    var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.selectedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.removeSelectAll = function () {\n    var selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n\n    for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\n      var ele = selectedLI_1[_i];\n\n      if (this.allowMultiSelection) {\n        ele.setAttribute('aria-selected', 'false');\n      } else {\n        ele.removeAttribute('aria-selected');\n      }\n    }\n\n    removeClass(selectedLI, ACTIVE);\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n  };\n\n  TreeView.prototype.getSelectEvent = function (currLi, action, e) {\n    var nodeData = this.getNodeData(currLi);\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData\n    };\n  };\n\n  TreeView.prototype.setExpandOnType = function () {\n    this.expandOnType = this.expandOn === 'Auto' ? Browser.isDevice ? 'Click' : 'DblClick' : this.expandOn;\n  };\n\n  TreeView.prototype.expandHandler = function (e) {\n    var target = e.originalEvent.target;\n\n    if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\n      return;\n    } else {\n      this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\n    }\n  };\n\n  TreeView.prototype.expandCollapseAction = function (currLi, e) {\n    var icon = select('div.' + ICON, currLi);\n\n    if (!icon || icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      var classList = icon.classList;\n\n      if (classList.contains(EXPANDABLE)) {\n        this.expandAction(currLi, icon, e);\n      } else if (classList.contains(COLLAPSIBLE)) {\n        this.collapseNode(currLi, icon, e);\n      }\n    }\n  };\n\n  TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {\n    var _this = this;\n\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    if (this.isLoaded && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, e);\n      this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          _this.nodeExpandAction(currLi, icon, expandChild, callback);\n        }\n      });\n    } else {\n      this.nodeExpandAction(currLi, icon, expandChild, callback);\n    }\n  };\n\n  TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {\n    var ul = select('.' + PARENTITEM, currLi);\n\n    if (ul && ul.nodeName === 'UL') {\n      this.expandNode(currLi, icon);\n    } else {\n      this.renderChildNodes(currLi, expandChild, callback);\n      var liEles = selectAll('.' + LISTITEM, currLi);\n\n      for (var i = 0; i < liEles.length; i++) {\n        var id = this.getId(liEles[i]);\n\n        if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n          var icon_1 = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\n\n          if (!isNOU(icon_1)) {\n            this.expandAction(liEles[i], icon_1, null);\n          }\n\n          this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.keyActionHandler = function (e) {\n    var _this = this;\n\n    var target = e.target;\n    var focusedNode = this.getFocusedNode();\n\n    if (target && target.classList.contains(INPUT)) {\n      var inpEle = target;\n\n      if (e.action === 'enter') {\n        inpEle.blur();\n        this.element.focus();\n        addClass([focusedNode], HOVER);\n      } else if (e.action === 'escape') {\n        inpEle.value = this.oldText;\n        inpEle.blur();\n        this.element.focus();\n        addClass([focusedNode], HOVER);\n      }\n\n      return;\n    }\n\n    e.preventDefault();\n    var eventArgs = {\n      cancel: false,\n      event: e,\n      node: focusedNode\n    };\n    this.trigger('keyPress', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'space':\n            if (_this.showCheckBox) {\n              _this.checkNode(e);\n            }\n\n            break;\n\n          case 'moveRight':\n            _this.openNode(_this.enableRtl ? false : true, e);\n\n            break;\n\n          case 'moveLeft':\n            _this.openNode(_this.enableRtl ? true : false, e);\n\n            break;\n\n          case 'shiftDown':\n            _this.shiftKeySelect(true, e);\n\n            break;\n\n          case 'moveDown':\n          case 'ctrlDown':\n          case 'csDown':\n            _this.navigateNode(true);\n\n            break;\n\n          case 'shiftUp':\n            _this.shiftKeySelect(false, e);\n\n            break;\n\n          case 'moveUp':\n          case 'ctrlUp':\n          case 'csUp':\n            _this.navigateNode(false);\n\n            break;\n\n          case 'home':\n          case 'shiftHome':\n          case 'ctrlHome':\n          case 'csHome':\n            _this.navigateRootNode(true);\n\n            break;\n\n          case 'end':\n          case 'shiftEnd':\n          case 'ctrlEnd':\n          case 'csEnd':\n            _this.navigateRootNode(false);\n\n            break;\n\n          case 'enter':\n          case 'ctrlEnter':\n          case 'shiftEnter':\n          case 'csEnter':\n            _this.toggleSelect(focusedNode, e);\n\n            break;\n\n          case 'f2':\n            if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n              _this.createTextbox(focusedNode, e);\n            }\n\n            break;\n\n          case 'ctrlA':\n            if (_this.allowMultiSelection) {\n              var sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);\n\n              _this.selectGivenNodes(sNodes);\n            }\n\n            break;\n        }\n      }\n    });\n  };\n\n  TreeView.prototype.navigateToFocus = function (isUp) {\n    var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n    var pos = focusNode.getBoundingClientRect();\n    var parent = this.getScrollParent(this.element);\n\n    if (!isNOU(parent)) {\n      var parentPos = parent.getBoundingClientRect();\n\n      if (pos.bottom > parentPos.bottom) {\n        parent.scrollTop += pos.bottom - parentPos.bottom;\n      } else if (pos.top < parentPos.top) {\n        parent.scrollTop -= parentPos.top - pos.top;\n      }\n    }\n\n    var isVisible = this.isVisibleInViewport(focusNode);\n\n    if (!isVisible) {\n      focusNode.scrollIntoView(isUp);\n    }\n  };\n\n  TreeView.prototype.isVisibleInViewport = function (txtWrap) {\n    var pos = txtWrap.getBoundingClientRect();\n    return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);\n  };\n\n  TreeView.prototype.getScrollParent = function (node) {\n    if (isNOU(node)) {\n      return null;\n    }\n\n    return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);\n  };\n\n  TreeView.prototype.shiftKeySelect = function (isTowards, e) {\n    if (this.allowMultiSelection) {\n      var focusedNode = this.getFocusedNode();\n      var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n      this.removeHover();\n      this.setFocusElement(nextNode);\n      this.toggleSelect(nextNode, e, false);\n      this.navigateToFocus(!isTowards);\n    } else {\n      this.navigateNode(isTowards);\n    }\n  };\n\n  TreeView.prototype.checkNode = function (e) {\n    var focusedNode = this.getFocusedNode();\n    var checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\n    var isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n\n    if (!focusedNode.classList.contains('e-disable')) {\n      if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\n        this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n      }\n    }\n  };\n\n  TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {\n    var _this = this;\n\n    var currLi = closest(checkWrap, '.' + LISTITEM);\n    this.checkActionNodes = [];\n    var ariaState = !isCheck ? 'true' : 'false';\n\n    if (!isNOU(ariaState)) {\n      checkWrap.setAttribute('aria-checked', ariaState);\n    }\n\n    var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n    this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n      }\n    });\n  };\n\n  TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {\n    if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n      this.checkedElement.push(li.getAttribute('data-uid'));\n      var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n      child !== null ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\n    }\n\n    this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n\n    if (this.autoCheck) {\n      this.ensureChildCheckState(li);\n      this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\n      var doCheck = void 0;\n\n      if (eventArgs.action === 'check') {\n        doCheck = true;\n      } else if (eventArgs.action === 'uncheck') {\n        doCheck = false;\n      }\n\n      this.ensureStateChange(li, doCheck);\n    }\n\n    this.allowServerDataBinding = true;\n    this.updateServerProperties(\"check\");\n    this.allowServerDataBinding = false;\n    this.nodeCheckedEvent(checkWrap, isCheck, e);\n  };\n  /**\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM\n   */\n\n\n  TreeView.prototype.ensureStateChange = function (li, doCheck) {\n    var childElement = select('.' + PARENTITEM, li);\n    var parentIndex = li.getAttribute('data-uid');\n    var mapper = this.fields;\n\n    if (this.dataType === 1 && this.autoCheck) {\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\n\n      for (var i = 0; i < resultData.length; i++) {\n        var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n        var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\n\n        if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n          this.checkedNodes.push(resultId);\n          var childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n\n          if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n          }\n\n          if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {\n            var childNodes = this.getChildNodes(this.treeData, resultId);\n            this.getChildItems(childNodes, doCheck);\n\n            if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n            }\n          }\n        } else {\n          var childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n        }\n      }\n    } else if (this.dataType === 1 && !this.autoCheck) {\n      if (!doCheck) {\n        var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (var i = 0; i < checkedData.length; i++) {\n          var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(id) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n\n        this.checkedNodes = [];\n      } else {\n        for (var i = 0; i < this.treeData.length; i++) {\n          var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(checkedId) === -1) {\n            this.checkedNodes.push(checkedId);\n          }\n        }\n      }\n    } else {\n      var childItems = this.getChildNodes(this.treeData, parentIndex);\n\n      if (childItems) {\n        this.childStateChange(childItems, parentIndex, childElement, doCheck);\n      }\n    }\n  };\n\n  TreeView.prototype.getChildItems = function (childItems, doCheck) {\n    for (var i = 0; i < childItems.length; i++) {\n      var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n      var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n      }\n\n      if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n        this.checkedNodes.push(childId);\n      }\n\n      if (childIsCheck === 'true' && !doCheck) {\n        this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n      }\n\n      var subChildItems = this.getChildNodes(this.treeData, childId);\n\n      if (subChildItems.length > 0) {\n        this.getChildItems(subChildItems, doCheck);\n      }\n    }\n  };\n  /**\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\n   */\n\n\n  TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {\n    for (var i = 0; i < childItems.length; i++) {\n      var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\n      var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.autoCheck) {\n        if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n          this.checkedNodes.push(checkedChild);\n\n          if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          }\n        }\n      } else if (!this.autoCheck) {\n        if (!doCheck) {\n          if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          this.checkedNodes = [];\n        } else {\n          if (this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n      }\n\n      var subChild = this.getChildNodes([childItems[i]], checkedChild);\n\n      if (subChild) {\n        this.childStateChange(subChild, parent, childElement, doCheck);\n      }\n    }\n  }; //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n\n\n  TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {\n    if (child) {\n      for (var length_1 = 0; length_1 < child.length; length_1++) {\n        var childId = getValue(this.fields.id, child[length_1]);\n        var check = this.element.querySelector('[data-uid=\"' + childId + '\"]'); //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n\n        if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n          if (check === null && !isNOU(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {\n            child[length_1][this.fields.isChecked] !== false || checked === 2 ? newCheck.push(childId.toString()) : childCheck = null;\n            childCheck = child[length_1][this.fields.isChecked] !== false || checked === 2 ? 0 : null;\n          }\n        } //Pushes child checked node done thro' UI interaction\n\n\n        if (newCheck.indexOf(childId.toString()) === -1 && isNOU(checked)) {\n          newCheck.push(childId.toString());\n        } //Gets if any next level children are available for child nodes\n\n\n        if (getValue(this.fields.hasChildren, child[length_1]) === true || getValue(this.fields.child.toString(), child[length_1])) {\n          var id = getValue(this.fields.id, child[length_1]);\n          var childId_1 = this.getChildNodes(this.treeData, id.toString());\n\n          if (childId_1) {\n            isNOU(validateCheck) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) : this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);\n            childCheck = null;\n          }\n        }\n\n        childCheck = null;\n      }\n    }\n  };\n\n  TreeView.prototype.openNode = function (toBeOpened, e) {\n    var focusedNode = this.getFocusedNode();\n    var icon = select('div.' + ICON, focusedNode);\n\n    if (toBeOpened) {\n      if (!icon) {\n        return;\n      } else if (icon.classList.contains(EXPANDABLE)) {\n        this.expandAction(focusedNode, icon, e);\n      } else {\n        this.focusNextNode(focusedNode, true);\n      }\n    } else {\n      if (icon && icon.classList.contains(COLLAPSIBLE)) {\n        this.collapseNode(focusedNode, icon, e);\n      } else {\n        var parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n\n        if (!parentLi) {\n          return;\n        } else {\n          if (!parentLi.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, parentLi);\n            this.navigateToFocus(true);\n          }\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.navigateNode = function (isTowards) {\n    var focusedNode = this.getFocusedNode();\n    this.focusNextNode(focusedNode, isTowards);\n  };\n\n  TreeView.prototype.navigateRootNode = function (isBackwards) {\n    var focusedNode = this.getFocusedNode();\n    var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n\n    if (!rootNode.classList.contains('e-disable')) {\n      this.setFocus(focusedNode, rootNode);\n      this.navigateToFocus(isBackwards);\n    }\n  };\n\n  TreeView.prototype.getFocusedNode = function () {\n    var selectedItem;\n    var fNode = select('.' + LISTITEM + '.' + FOCUS, this.element);\n\n    if (isNOU(fNode)) {\n      selectedItem = select('.' + LISTITEM, this.element);\n    }\n\n    return isNOU(fNode) ? isNOU(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;\n  };\n\n  TreeView.prototype.focusNextNode = function (li, isTowards) {\n    var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n    this.setFocus(li, nextNode);\n    this.navigateToFocus(!isTowards);\n\n    if (nextNode.classList.contains('e-disable')) {\n      var lastChild = nextNode.lastChild;\n\n      if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n        this.focusNextNode(nextNode, true);\n      } else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n        this.focusNextNode(nextNode, false);\n      } else if (nextNode.nextSibling == null && lastChild.classList.contains('e-text-content')) {\n        this.focusNextNode(nextNode, false);\n      } else {\n        this.focusNextNode(nextNode, isTowards);\n      }\n    }\n  };\n\n  TreeView.prototype.getNextNode = function (li) {\n    var index = this.liList.indexOf(li);\n    var nextNode;\n\n    do {\n      index++;\n      nextNode = this.liList[index];\n\n      if (isNOU(nextNode)) {\n        return li;\n      }\n    } while (!isVisible(nextNode));\n\n    return nextNode;\n  };\n\n  TreeView.prototype.getPrevNode = function (li) {\n    var index = this.liList.indexOf(li);\n    var prevNode;\n\n    do {\n      index--;\n      prevNode = this.liList[index];\n\n      if (isNOU(prevNode)) {\n        return li;\n      }\n    } while (!isVisible(prevNode));\n\n    return prevNode;\n  };\n\n  TreeView.prototype.getRootNode = function () {\n    var index = 0;\n    var rootNode;\n\n    do {\n      rootNode = this.liList[index];\n      index++;\n    } while (!isVisible(rootNode));\n\n    return rootNode;\n  };\n\n  TreeView.prototype.getEndNode = function () {\n    var index = this.liList.length - 1;\n    var endNode;\n\n    do {\n      endNode = this.liList[index];\n      index--;\n    } while (!isVisible(endNode));\n\n    return endNode;\n  };\n\n  TreeView.prototype.setFocus = function (preNode, nextNode) {\n    removeClass([preNode], [HOVER, FOCUS]);\n\n    if (!nextNode.classList.contains('e-disable')) {\n      addClass([nextNode], [HOVER, FOCUS]);\n      this.updateIdAttr(preNode, nextNode);\n    }\n  };\n\n  TreeView.prototype.updateIdAttr = function (preNode, nextNode) {\n    this.element.removeAttribute('aria-activedescendant');\n\n    if (preNode) {\n      preNode.removeAttribute('id');\n    }\n\n    nextNode.setAttribute('id', this.element.id + '_active');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n  };\n\n  TreeView.prototype.focusIn = function () {\n    if (!this.mouseDownStatus) {\n      addClass([this.getFocusedNode()], HOVER);\n    }\n\n    this.mouseDownStatus = false;\n  };\n\n  TreeView.prototype.focusOut = function () {\n    removeClass([this.getFocusedNode()], HOVER);\n  };\n\n  TreeView.prototype.onMouseOver = function (e) {\n    var target = e.target;\n    var classList = target.classList;\n    var currentLi = closest(target, '.' + LISTITEM);\n\n    if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {\n      this.removeHover();\n      return;\n    } else {\n      if (currentLi && !currentLi.classList.contains('e-disable')) {\n        this.setHover(currentLi);\n      }\n    }\n  };\n\n  TreeView.prototype.setHover = function (li) {\n    if (!li.classList.contains(HOVER)) {\n      this.removeHover();\n      addClass([li], HOVER);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.onMouseLeave = function (e) {\n    this.removeHover();\n  };\n\n  TreeView.prototype.removeHover = function () {\n    var hoveredNode = selectAll('.' + HOVER, this.element);\n\n    if (hoveredNode && hoveredNode.length) {\n      removeClass(hoveredNode, HOVER);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.getNodeData = function (currLi, fromDS) {\n    if (!isNOU(currLi) && currLi.classList.contains(LISTITEM) && !isNOU(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n      var id = currLi.getAttribute('data-uid');\n      var text = this.getText(currLi, fromDS);\n      var pNode = closest(currLi.parentNode, '.' + LISTITEM);\n      var pid = pNode ? pNode.getAttribute('data-uid') : null;\n      var selected = currLi.classList.contains(ACTIVE);\n      var expanded = currLi.getAttribute('aria-expanded') === 'true' ? true : false;\n      var hasChildren = currLi.getAttribute('aria-expanded') === null ? false : true;\n\n      if (this.isBlazorPlatform) {\n        hasChildren = currLi.getAttribute('aria-expanded') === 'true' ? true : (currLi.querySelector('.e-icon-expandable') || currLi.querySelector('.e-icon-collapsible')) != null ? true : false;\n      }\n\n      var checked = null;\n\n      if (this.showCheckBox) {\n        checked = select('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');\n      }\n\n      return {\n        id: id,\n        text: text,\n        parentID: pid,\n        selected: selected,\n        expanded: expanded,\n        isChecked: checked,\n        hasChildren: hasChildren\n      };\n    }\n\n    return {\n      id: '',\n      text: '',\n      parentID: '',\n      selected: false,\n      expanded: false,\n      isChecked: '',\n      hasChildren: false\n    };\n  };\n\n  TreeView.prototype.getText = function (currLi, fromDS) {\n    if (fromDS) {\n      var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n      var level = parseFloat(currLi.getAttribute('aria-level'));\n      var nodeFields = this.getFields(this.fields, level, 1);\n      return getValue(nodeFields.text, nodeData);\n    }\n\n    return select('.' + LISTTEXT, currLi).textContent;\n  };\n\n  TreeView.prototype.getExpandEvent = function (currLi, e) {\n    var nodeData = this.getNodeData(currLi);\n    return {\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData,\n      event: e\n    };\n  };\n\n  TreeView.prototype.renderNodeTemplate = function (data, textEle, dataId) {\n    var tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle);\n\n    if (tempArr) {\n      tempArr = Array.prototype.slice.call(tempArr);\n      append(tempArr, textEle);\n    }\n  };\n\n  TreeView.prototype.destroyTemplate = function (liEle) {\n    this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);\n  };\n\n  TreeView.prototype.reRenderNodes = function () {\n    this.updateListProp(this.fields);\n    resetBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate');\n\n    if (this.isBlazorPlatform) {\n      this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    } else {\n      this.element.innerHTML = '';\n    }\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      this.clearTemplate();\n    }\n\n    this.setTouchClass();\n    this.setProperties({\n      selectedNodes: [],\n      checkedNodes: [],\n      expandedNodes: []\n    }, true);\n    this.checkedElement = [];\n    this.isLoaded = false;\n    this.setDataBinding(true);\n  };\n\n  TreeView.prototype.setCssClass = function (oldClass, newClass) {\n    if (!isNOU(oldClass) && oldClass !== '') {\n      removeClass([this.element], oldClass.split(' '));\n    }\n\n    if (!isNOU(newClass) && newClass !== '') {\n      addClass([this.element], newClass.split(' '));\n    }\n  };\n\n  TreeView.prototype.editingHandler = function (e) {\n    var target = e.target;\n\n    if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n      return;\n    } else {\n      var liEle = closest(target, '.' + LISTITEM);\n      this.createTextbox(liEle, e);\n    }\n  };\n\n  TreeView.prototype.createTextbox = function (liEle, e) {\n    var _this = this;\n\n    var oldInpEle = select('.' + TREEINPUT, this.element);\n\n    if (oldInpEle) {\n      oldInpEle.blur();\n    }\n\n    var textEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    var innerEle = this.createElement('input', {\n      className: TREEINPUT,\n      attrs: {\n        value: this.oldText\n      }\n    });\n    var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n    this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        var inpWidth = textEle.offsetWidth + 5;\n        var style = 'width:' + inpWidth + 'px';\n        addClass([liEle], EDITING);\n\n        if (!isNOU(_this.nodeTemplateFn)) {\n          _this.destroyTemplate(liEle);\n        }\n\n        textEle.innerHTML = eventArgs.innerHtml;\n        var inpEle = select('.' + TREEINPUT, textEle);\n        _this.inputObj = Input.createInput({\n          element: inpEle,\n          properties: {\n            enableRtl: _this.enableRtl\n          }\n        }, _this.createElement);\n\n        _this.inputObj.container.setAttribute('style', style);\n\n        inpEle.focus();\n        var inputEle = inpEle;\n        inputEle.setSelectionRange(0, inputEle.value.length);\n\n        _this.wireInputEvents(inpEle);\n      }\n    });\n  };\n\n  TreeView.prototype.updateOldText = function (liEle) {\n    var id = liEle.getAttribute('data-uid');\n    this.editData = this.getNodeObject(id);\n    var level = parseFloat(liEle.getAttribute('aria-level'));\n    this.editFields = this.getFields(this.fields, level, 1);\n    this.oldText = getValue(this.editFields.text, this.editData);\n  };\n\n  TreeView.prototype.inputFocusOut = function (e) {\n    if (!select('.' + TREEINPUT, this.element)) {\n      return;\n    }\n\n    var target = e.target;\n    var newText = target.value;\n    var txtEle = closest(target, '.' + LISTTEXT);\n    var liEle = closest(target, '.' + LISTITEM);\n    detach(this.inputObj.container);\n\n    if (this.fields.dataSource instanceof DataManager && !this.isOffline && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {\n      this.crudOperation('update', null, liEle, newText, null, null, true);\n    } else {\n      this.appendNewText(liEle, txtEle, newText, true);\n    }\n  };\n\n  TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {\n    var _this = this;\n\n    var eventArgs = this.getEditEvent(liEle, newText, null);\n    this.trigger('nodeEdited', eventArgs, function (observedArgs) {\n      newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n\n      _this.updateText(liEle, txtEle, newText, isInput);\n\n      if (observedArgs.oldText !== newText) {\n        _this.triggerEvent();\n      }\n    });\n  };\n\n  TreeView.prototype.updateText = function (liEle, txtEle, newText, isInput) {\n    var newData = setValue(this.editFields.text, newText, this.editData);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      txtEle.innerText = '';\n      var dataId = liEle.getAttribute('data-uid');\n      this.renderNodeTemplate(newData, txtEle, dataId);\n      this.updateBlazorTemplate();\n      this.renderReactTemplates();\n    } else {\n      txtEle.innerText = newText;\n    }\n\n    if (isInput) {\n      removeClass([liEle], EDITING);\n      txtEle.focus();\n    }\n  };\n\n  TreeView.prototype.getElement = function (ele) {\n    if (isNOU(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n    } else if (typeof ele === 'object') {\n      return getElement(ele);\n    } else {\n      return null;\n    }\n  };\n\n  TreeView.prototype.getId = function (ele) {\n    if (isNOU(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return ele;\n    } else if (typeof ele === 'object') {\n      return getElement(ele).getAttribute('data-uid');\n    } else {\n      return null;\n    }\n  };\n\n  TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {\n    var data = this.getNodeData(liEle);\n    return {\n      cancel: false,\n      newText: newText,\n      node: liEle,\n      nodeData: data,\n      oldText: this.oldText,\n      innerHtml: inpEle\n    };\n  };\n\n  TreeView.prototype.getNodeObject = function (id) {\n    var childNodes;\n\n    if (isNOU(id)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {\n        var dataId = getValue(this.fields.id, this.treeData[i]);\n\n        if (!isNOU(this.treeData[i]) && !isNOU(dataId) && dataId.toString() === id) {\n          return this.treeData[i];\n        }\n      }\n    } else {\n      return this.getChildNodeObject(this.treeData, this.fields, id);\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {\n    var newList;\n\n    if (isNOU(obj)) {\n      return newList;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var dataId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && dataId && dataId.toString() === id) {\n        return obj[i];\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childData = getValue(mapper.child, obj[i]);\n        newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var child = 'child';\n        newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return newList;\n  };\n\n  TreeView.prototype.setDragAndDrop = function (toBind) {\n    if (toBind && !this.disabled) {\n      this.initializeDrag();\n    } else {\n      this.destroyDrag();\n    }\n  }; // tslint:disable-next-line:max-func-body-length\n\n\n  TreeView.prototype.initializeDrag = function () {\n    var _this = this;\n\n    var virtualEle;\n    var proxy = this;\n    this.dragObj = new Draggable(this.element, {\n      enableTailMode: true,\n      enableAutoScroll: true,\n      dragArea: this.dragArea,\n      dragTarget: '.' + TEXTWRAP,\n      helper: function (e) {\n        _this.dragTarget = e.sender.target;\n        var dragRoot = closest(_this.dragTarget, '.' + ROOT);\n        var dragWrap = closest(_this.dragTarget, '.' + TEXTWRAP);\n        _this.dragLi = closest(_this.dragTarget, '.' + LISTITEM);\n\n        if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {\n          dragWrap = _this.dragTarget.nextElementSibling;\n        }\n\n        if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {\n          return false;\n        }\n\n        var cloneEle = dragWrap.cloneNode(true);\n\n        if (isNOU(select('div.' + ICON, cloneEle))) {\n          var icon = proxy.createElement('div', {\n            className: ICON + ' ' + EXPANDABLE\n          });\n          cloneEle.insertBefore(icon, cloneEle.children[0]);\n        }\n\n        var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');\n        virtualEle = proxy.createElement('div', {\n          className: cssClass\n        });\n        virtualEle.appendChild(cloneEle);\n        var nLen = _this.selectedNodes.length;\n\n        if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {\n          var cNode = proxy.createElement('span', {\n            className: DROPCOUNT,\n            innerHTML: '' + nLen\n          });\n          virtualEle.appendChild(cNode);\n        }\n\n        document.body.appendChild(virtualEle);\n        document.body.style.cursor = '';\n        _this.dragData = _this.getNodeData(_this.dragLi);\n        return virtualEle;\n      },\n      dragStart: function (e) {\n        addClass([_this.element], DRAGGING);\n        var listItem = closest(e.target, '.e-list-item');\n        var level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);\n\n        if (eventArgs.draggedNode.classList.contains(EDITING)) {\n          _this.dragObj.intDestroy(e.event);\n\n          _this.dragCancelAction(virtualEle);\n        } else {\n          _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {\n            if (observedArgs.cancel) {\n              _this.dragObj.intDestroy(e.event);\n\n              _this.dragCancelAction(virtualEle);\n            } else {\n              _this.dragStartAction = true;\n            }\n\n            if (isBlazor()) {\n              e.bindEvents(getElement(e.dragElement));\n            }\n          });\n        }\n      },\n      drag: function (e) {\n        _this.dragObj.setProperties({\n          cursorAt: {\n            top: !isNOU(e.event.targetTouches) || Browser.isDevice ? 60 : -20\n          }\n        });\n\n        _this.dragAction(e, virtualEle);\n      },\n      dragStop: function (e) {\n        removeClass([_this.element], DRAGGING);\n\n        _this.removeVirtualEle();\n\n        var dropTarget = e.target;\n        var preventTargetExpand = false;\n        var dropRoot = closest(dropTarget, '.' + DROPPABLE);\n        var isHelperElement = true;\n\n        if (!dropTarget || !dropRoot) {\n          detach(e.helper);\n          document.body.style.cursor = '';\n          isHelperElement = false;\n        }\n\n        var listItem = closest(dropTarget, '.e-list-item');\n        var level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);\n\n        eventArgs.preventTargetExpand = preventTargetExpand;\n\n        if (_this.isBlazorPlatform && _this.dragStartAction || !_this.isBlazorPlatform) {\n          _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {\n            _this.dragParent = observedArgs.draggedParentNode;\n            _this.preventExpand = observedArgs.preventTargetExpand;\n\n            if (observedArgs.cancel) {\n              if (e.helper.parentNode) {\n                detach(e.helper);\n              }\n\n              document.body.style.cursor = '';\n              isHelperElement = false;\n            }\n\n            _this.dragStartAction = false;\n\n            if (_this.isBlazorPlatform && isHelperElement) {\n              _this.dropAction(e, true);\n            }\n          });\n        }\n      }\n    });\n    this.dropObj = new Droppable(this.element, {\n      out: function (e) {\n        if (!isNOU(e) && !e.target.classList.contains(SIBLING)) {\n          document.body.style.cursor = 'not-allowed';\n        }\n      },\n      over: function (e) {\n        document.body.style.cursor = '';\n      },\n      drop: function (e) {\n        if (!_this.isBlazorPlatform) {\n          _this.dropAction(e);\n        }\n      }\n    });\n  };\n\n  TreeView.prototype.dragCancelAction = function (virtualEle) {\n    detach(virtualEle);\n    removeClass([this.element], DRAGGING);\n    this.dragStartAction = false;\n  };\n\n  TreeView.prototype.dragAction = function (e, virtualEle) {\n    var dropRoot = closest(e.target, '.' + DROPPABLE);\n    var dropWrap = closest(e.target, '.' + TEXTWRAP);\n    var icon = select('div.' + ICON, virtualEle);\n    removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n    this.removeVirtualEle();\n    document.body.style.cursor = '';\n    var classList = e.target.classList;\n\n    if (this.fullRowSelect && !dropWrap && !isNOU(classList) && classList.contains(FULLROW)) {\n      dropWrap = e.target.nextElementSibling;\n    }\n\n    if (dropRoot) {\n      var dropLi = closest(e.target, '.' + LISTITEM);\n      var checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\n      var collapse = closest(e.target, '.' + COLLAPSIBLE);\n      var expand = closest(e.target, '.' + EXPANDABLE);\n\n      if (!dropRoot.classList.contains(ROOT) || dropWrap && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        if (dropLi && e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {\n          addClass([icon], DROPNEXT);\n          var virEle = this.createElement('div', {\n            className: SIBLING\n          });\n          var index = this.fullRowSelect ? 1 : 0;\n          dropLi.insertBefore(virEle, dropLi.children[index]);\n        } else if (dropLi && e && !expand && !collapse && e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10 && !checkWrapper || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {\n          addClass([icon], DROPNEXT);\n          var virEle = this.createElement('div', {\n            className: SIBLING\n          });\n          var index = this.fullRowSelect ? 2 : 1;\n          dropLi.insertBefore(virEle, dropLi.children[index]);\n        } else {\n          addClass([icon], DROPIN);\n        }\n      } else if (e.target.nodeName === 'LI' && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        addClass([icon], DROPNEXT);\n        this.renderVirtualEle(e);\n      } else if (e.target.classList.contains(SIBLING)) {\n        addClass([icon], DROPNEXT);\n      } else {\n        addClass([icon], DROPOUT);\n      }\n    } else {\n      addClass([icon], NODROP);\n      document.body.style.cursor = 'not-allowed';\n    }\n\n    var listItem = closest(e.target, '.e-list-item');\n    var level;\n\n    if (listItem) {\n      level = parseInt(listItem.getAttribute('aria-level'), 10);\n    }\n\n    var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n\n    if (eventArgs.dropIndicator) {\n      removeClass([icon], eventArgs.dropIndicator);\n    }\n\n    this.trigger('nodeDragging', eventArgs);\n\n    if (eventArgs.dropIndicator) {\n      addClass([icon], eventArgs.dropIndicator);\n    }\n  }; // tslint:disable\n\n\n  TreeView.prototype.dropAction = function (e, isBlazorDrop) {\n    var offsetY = e.event.offsetY;\n    var dropTarget = e.target;\n    var dragObj;\n    var level;\n    var drop = false;\n    var dragInstance;\n\n    if (!isBlazorDrop) {\n      dragInstance = e.dragData.draggable;\n    } else {\n      dragInstance = e.element;\n    }\n\n    for (var i = 0; i < dragInstance.ej2_instances.length; i++) {\n      if (dragInstance.ej2_instances[i] instanceof TreeView_1) {\n        dragObj = dragInstance.ej2_instances[i];\n        break;\n      }\n    }\n\n    if (dragObj && dragObj.dragTarget) {\n      var dragTarget = dragObj.dragTarget;\n      var dragLi = closest(dragTarget, '.' + LISTITEM);\n      var dropLi = closest(dropTarget, '.' + LISTITEM);\n\n      if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n        dropLi = dropTarget.firstElementChild;\n      }\n\n      if (!isBlazorDrop) {\n        detach(e.droppedElement);\n      } else {\n        detach(e.helper);\n      }\n\n      document.body.style.cursor = '';\n\n      if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        if (this.fields.dataSource instanceof DataManager === false) {\n          this.preventExpand = false;\n        }\n\n        return;\n      }\n\n      if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n        var sNodes = selectAll('.' + ACTIVE, dragObj.element);\n\n        if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n          for (var i = sNodes.length - 1; i >= 0; i--) {\n            if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n          }\n        } else {\n          for (var i = 0; i < sNodes.length; i++) {\n            if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n          }\n        }\n      } else {\n        this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n      }\n\n      level = parseInt(dragLi.getAttribute('aria-level'), 10);\n      drop = true;\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    if (!isBlazorDrop) {\n      this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n    } else {\n      this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.element, null, level, drop));\n    }\n\n    this.triggerEvent();\n  };\n\n  TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n    var checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\n    var collapse = closest(e.target, '.' + COLLAPSIBLE);\n    var expand = closest(e.target, '.' + EXPANDABLE);\n\n    if (!dragLi.classList.contains('e-disable') && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {\n      if (dropTarget.nodeName === 'LI') {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n        if (dropTarget.firstElementChild.nodeName === 'UL') {\n          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n        }\n      } else if (dropTarget.classList.contains('e-icon-collapsible') || dropTarget.classList.contains('e-icon-expandable')) {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else {\n        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\n      }\n    } else {\n      this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\n    }\n  };\n\n  TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {\n    var dropUl = closest(dropLi, '.' + PARENTITEM);\n    var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    var pre;\n\n    if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    } else if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      if (e.event.offsetY < 5 || e.event.offsetX < 3) {\n        pre = true;\n      } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {\n        pre = false;\n      }\n    }\n\n    if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      var target = e.target.closest('li');\n      dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n    } else {\n      dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n    }\n\n    this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  };\n\n  TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {\n    var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    var dropParentUl = closest(dropLi, '.' + PARENTITEM);\n\n    if (e && pos < 7 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi);\n      this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n    } else if (e && e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n    } else {\n      var dropUl = this.expandParent(dropLi);\n      var childLi = dropUl.childNodes[index];\n      dropUl.insertBefore(dragLi, childLi);\n      this.moveData(dragLi, childLi, dropUl, true, dragObj);\n    }\n\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  };\n\n  TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {\n    var dropParentLi = closest(dropUl, '.' + LISTITEM);\n    var id = this.getId(dragLi);\n    var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n    var refId = this.getId(dropLi);\n    var index = this.getDataPos(this.treeData, this.fields, refId);\n    var parentId = this.getId(dropParentLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n      var pos = isNOU(index) ? this.treeData.length : pre ? index : index + 1;\n\n      if (isNOU(parentId) && !this.hasPid) {\n        delete removedData[0][this.fields.parentID];\n      } else {\n        var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n        setValue(this.fields.parentID, currPid, removedData[0]);\n      }\n\n      this.treeData.splice(pos, 0, removedData[0]);\n\n      if (dragObj.element.id !== this.element.id) {\n        var childData = dragObj.removeChildNodes(id);\n        pos++;\n\n        for (var i = 0, len = childData.length; i < len; i++) {\n          this.treeData.splice(pos, 0, childData[i]);\n          pos++;\n        }\n\n        dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n    }\n  };\n\n  TreeView.prototype.expandParent = function (dropLi) {\n    var dropIcon = select('div.' + ICON, dropLi);\n\n    if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n      this.expandAction(dropLi, dropIcon, null);\n    }\n\n    var dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (this.preventExpand === true && !dropUl && dropIcon) {\n      this.renderChildNodes(dropLi);\n    }\n\n    dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (!isNOU(dropUl) && this.preventExpand === true) {\n      dropUl.style.display = 'none';\n    }\n\n    if (!isNOU(dropUl) && this.preventExpand === false) {\n      dropUl.style.display = 'block';\n    }\n\n    if (isNOU(dropUl) && this.preventExpand === true) {\n      if (isNOU(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      var icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        icon.classList.add('e-icon-expandable');\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n\n      if (icon) {\n        removeClass([icon], COLLAPSIBLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      dropLi.setAttribute('aria-expanded', 'false');\n      dropUl.style.display = 'none';\n    }\n\n    if (isNOU(dropUl)) {\n      this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n\n      if (isNOU(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n      }\n\n      var icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        removeClass([icon], EXPANDABLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n        icon = select('div.' + ICON, dropLi);\n        removeClass([icon], EXPANDABLE);\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n      this.addExpand(dropLi);\n      this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n    }\n\n    return dropUl;\n  };\n\n  TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {\n    if (dragParentLi && dragParentUl.childElementCount === 0) {\n      var dragIcon = select('div.' + ICON, dragParentLi);\n      detach(dragParentUl);\n      detach(dragIcon);\n      var parentId = this.getId(dragParentLi);\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n      this.removeExpand(dragParentLi, true);\n    }\n  };\n\n  TreeView.prototype.updateAriaLevel = function (dragLi) {\n    var level = this.parents(dragLi, '.' + PARENTITEM).length;\n    dragLi.setAttribute('aria-level', '' + level);\n    this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\n  };\n\n  TreeView.prototype.updateChildAriaLevel = function (element, level) {\n    if (!isNOU(element)) {\n      var cNodes = element.childNodes;\n\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var liEle = cNodes[i];\n        liEle.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\n      }\n    }\n  };\n\n  TreeView.prototype.renderVirtualEle = function (e) {\n    var pre;\n\n    if (e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    }\n\n    var virEle = this.createElement('div', {\n      className: SIBLING\n    });\n    var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;\n    e.target.insertBefore(virEle, e.target.children[index]);\n  };\n\n  TreeView.prototype.removeVirtualEle = function () {\n    var sibEle = select('.' + SIBLING);\n\n    if (sibEle) {\n      detach(sibEle);\n    }\n  };\n\n  TreeView.prototype.destroyDrag = function () {\n    if (this.dragObj && this.dropObj) {\n      this.dragObj.destroy();\n      this.dropObj.destroy();\n    }\n  };\n\n  TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n    var dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\n    var dropData = dropLi ? this.getNodeData(dropLi) : null;\n    var draggedNode = obj ? obj.dragLi : dragNode;\n    var draggedNodeData = obj ? obj.dragData : null;\n    var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n    var dragLiParent = obj.dragLi.parentElement;\n    var dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\n    var targetParent = null;\n    var indexValue = null;\n    var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n    var iconClass = null;\n    var node = drop === true ? draggedNode : dropLi;\n    var index = node ? closest(node, '.e-list-parent') : null;\n    var i = 0;\n    var position = null;\n    dragParent = obj.dragLi && dragParent === null ? closest(dragLiParent, '.' + ROOT) : dragParent;\n    dragParent = drop === true ? this.dragParent : dragParent;\n\n    if (cloneEle) {\n      while (i < 4) {\n        if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\n          iconClass = iconCss[i];\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    if (index) {\n      var dropTar = 0;\n\n      for (i = 0; i < index.childElementCount; i++) {\n        dropTar = drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;\n\n        if (drop !== true && index.children[i].classList.contains('e-hover')) {\n          indexValue = event.offsetY >= 23 ? i + 1 : i;\n          break;\n        } else if (index.children[i] === node) {\n          indexValue = event.offsetY >= 23 ? i : i;\n          break;\n        }\n      }\n\n      indexValue = dropTar !== 0 ? --indexValue : indexValue;\n      position = iconClass == \"e-drop-in\" ? \"Inside\" : event.offsetY < 7 ? \"Before\" : \"After\";\n    }\n\n    if (dropTarget) {\n      if (newParent.length === 0) {\n        targetParent = null;\n      } else if (dropTarget.classList.contains(LISTITEM)) {\n        targetParent = newParent[0];\n      } else {\n        targetParent = newParent[1];\n      }\n    }\n\n    if (dropLi === draggedNode) {\n      targetParent = dropLi;\n    }\n\n    if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n      targetParent = dropLi;\n\n      if (drop !== true) {\n        level = ++level;\n        var parent_2 = targetParent ? select('.e-list-parent', targetParent) : null;\n        indexValue = parent_2 ? parent_2.children.length : 0;\n\n        if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {\n          var parent_3 = targetParent.hasAttribute('data-uid') ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n          indexValue = parent_3 ? parent_3.length : 0;\n        }\n      }\n    }\n\n    return {\n      cancel: false,\n      clonedNode: cloneEle,\n      event: event,\n      draggedNode: draggedNode,\n      draggedNodeData: draggedNodeData,\n      droppedNode: dropLi,\n      droppedNodeData: dropData,\n      dropIndex: indexValue,\n      dropLevel: level,\n      draggedParentNode: dragParent,\n      dropTarget: targetParent,\n      dropIndicator: iconClass,\n      target: target,\n      position: position\n    };\n  };\n\n  TreeView.prototype.addFullRow = function (toAdd) {\n    var len = this.liList.length;\n\n    if (toAdd) {\n      for (var i = 0; i < len; i++) {\n        this.createFullRow(this.liList[i]);\n      }\n    } else {\n      for (var i = 0; i < len; i++) {\n        var rowDiv = select('.' + FULLROW, this.liList[i]);\n        detach(rowDiv);\n      }\n    }\n  };\n\n  TreeView.prototype.createFullRow = function (item) {\n    var rowDiv = this.createElement('div', {\n      className: FULLROW\n    });\n    item.insertBefore(rowDiv, item.childNodes[0]);\n  };\n\n  TreeView.prototype.addMultiSelect = function (toAdd) {\n    if (toAdd) {\n      var liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n\n      for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {\n        var ele = liEles_1[_i];\n        ele.setAttribute('aria-selected', 'false');\n      }\n    } else {\n      var liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n\n      for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {\n        var ele = liEles_2[_a];\n        ele.removeAttribute('aria-selected');\n      }\n    }\n  };\n\n  TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNOU(element)) {\n      var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var liEle = cNodes[i];\n        var icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNOU(icon)) {\n          this.collapseNode(liEle, icon, null);\n        }\n\n        this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  };\n\n  TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {\n    var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\n\n    for (var i = 0, len = cIcons.length; i < len; i++) {\n      var icon = cIcons[i];\n      var liEle = closest(icon, '.' + LISTITEM);\n      this.collapseNode(liEle, icon, null);\n    }\n  };\n\n  TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNOU(element)) {\n      var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (var i = 0, len = eNodes.length; i < len; i++) {\n        var liEle = eNodes[i];\n        var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNOU(icon)) {\n          this.expandAction(liEle, icon, null);\n        }\n\n        this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  };\n\n  TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {\n    var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\n\n    for (var i = 0, len = eIcons.length; i < len; i++) {\n      var icon = eIcons[i];\n      var liEle = closest(icon, '.' + LISTITEM);\n      this.expandAction(liEle, icon, null, true);\n    }\n  };\n\n  TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {\n    var vNodes = Array.prototype.slice.call(nodes);\n\n    if (excludeHiddenNodes) {\n      for (var i = 0; i < vNodes.length; i++) {\n        if (!isVisible(vNodes[i])) {\n          vNodes.splice(i, 1);\n          i--;\n        }\n      }\n    }\n\n    return vNodes;\n  };\n\n  TreeView.prototype.removeNode = function (node) {\n    var dragParentUl = closest(node, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      this.destroyTemplate(node);\n    }\n\n    detach(node);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateInstance();\n    this.removeData(node);\n  };\n\n  TreeView.prototype.updateInstance = function () {\n    this.updateList();\n    this.updateSelectedNodes();\n    this.updateExpandedNodes();\n    this.allowServerDataBinding = false;\n    this.updateServerProperties(\"expand\");\n    this.updateServerProperties(\"check\");\n    this.updateServerProperties(\"select\");\n    this.allowServerDataBinding = true;\n  };\n\n  TreeView.prototype.updateServerProperties = function (action) {\n    if (this.isBlazorPlatform) {\n      if (action == \"expand\") {\n        this.isBlazorExpandedNodes = this.expandedNodes;\n        this.setProperties({\n          expandedNodes: []\n        }, true);\n      } else if (action == \"check\") {\n        this.setProperties({\n          checkedNodes: this.checkedNodes\n        }, true);\n      } else {\n        this.setProperties({\n          selectedNodes: this.selectedNodes\n        }, true);\n      }\n    }\n  };\n\n  TreeView.prototype.updateList = function () {\n    this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\n  };\n\n  TreeView.prototype.updateSelectedNodes = function () {\n    if (!this.isBlazorPlatform || this.isBlazorPlatform && !this.initialRender) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n      var sNodes = selectAll('.' + ACTIVE, this.element);\n      this.selectGivenNodes(sNodes);\n    } else if (this.isBlazorPlatform && this.initialRender) {\n      var sNodes = selectAll('.' + ACTIVE, this.element);\n\n      for (var a = 0; a < sNodes.length; a++) {\n        var id = sNodes[a].getAttribute(\"data-uid\").toString();\n\n        if (!isNOU(id) && this.selectedNodes.indexOf(id) === -1) {\n          this.selectedNodes.push(id);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.updateExpandedNodes = function () {\n    if (!this.isBlazorPlatform || this.isBlazorPlatform && !this.initialRender) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n      var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n\n      for (var i = 0, len = eNodes.length; i < len; i++) {\n        this.addExpand(eNodes[i]);\n      }\n    } else if (this.isBlazorPlatform && this.initialRender) {\n      var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n\n      for (var a = 0; a < eNodes.length; a++) {\n        var id = eNodes[a].getAttribute(\"data-uid\").toString();\n\n        if (!isNOU(id) && this.expandedNodes.indexOf(id) === -1) {\n          this.expandedNodes.push(id);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.removeData = function (node) {\n    if (this.dataType === 1) {\n      var dm = new DataManager(this.treeData);\n      var id = this.getId(node);\n      var data = {};\n      var newId = this.isNumberTypeId ? parseFloat(id) : id;\n      data[this.fields.id] = newId;\n      dm.remove(this.fields.id, data);\n      this.removeChildNodes(id);\n    } else {\n      var id = this.getId(node);\n      this.updateChildField(this.treeData, this.fields, id, null, null, true);\n    }\n  };\n\n  TreeView.prototype.removeChildNodes = function (parentId) {\n    var cNodes = this.getChildGroup(this.groupedData, parentId, false);\n    var childData = [];\n\n    if (cNodes) {\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var dm = new DataManager(this.treeData);\n        var id = getValue(this.fields.id, cNodes[i]).toString();\n        var data = {};\n        var currId = this.isNumberTypeId ? parseFloat(id) : id;\n        data[this.fields.id] = currId;\n        var nodeData = dm.remove(this.fields.id, data);\n        childData.push(nodeData[0]);\n        this.removeChildNodes(id);\n      }\n    }\n\n    return childData;\n  };\n\n  TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var liEle = this.getElement(nodes[i]);\n\n      if (isNOU(liEle)) {\n        continue;\n      }\n\n      var icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\n\n      if (!isNOU(icon)) {\n        toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\n      }\n    }\n  };\n\n  TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    var sNodes = this.getSortedData(nodes);\n    var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n\n    if (isRemote) {\n      this.updateMapper(level);\n    }\n\n    var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n    var dropUl;\n\n    if (!dropEle) {\n      dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\n    } else {\n      dropUl = dropEle;\n    }\n\n    var refNode = dropUl.childNodes[index];\n\n    for (var i = 0; i < li.length; i++) {\n      dropUl.insertBefore(li[i], refNode);\n    }\n\n    if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n      this.updateBlazorTemplate();\n    }\n\n    var id = this.getId(dropLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n      var refId = this.getId(refNode);\n      var pos = isNOU(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n\n      for (var j = 0; j < nodes.length; j++) {\n        if (!isNOU(id)) {\n          var currId = this.isNumberTypeId ? parseFloat(id) : id;\n          setValue(this.fields.parentID, currId, nodes[j]);\n        }\n\n        this.treeData.splice(pos, 0, nodes[j]);\n        pos++;\n      }\n    } else {\n      this.addChildData(this.treeData, this.fields, id, nodes, index);\n    }\n\n    this.finalizeNode(dropUl);\n  };\n\n  TreeView.prototype.updateMapper = function (level) {\n    var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n    this.updateListProp(mapper);\n  };\n\n  TreeView.prototype.updateListProp = function (mapper) {\n    var prop = this.getActualProperties(mapper);\n    this.listBaseOption.fields = prop;\n    this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n  };\n\n  TreeView.prototype.getDataPos = function (obj, mapper, id) {\n    var pos = null;\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        return i;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var data = getValue(mapper.child, obj[i]);\n        pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var items = getValue('child', obj[i]);\n        pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      }\n    }\n\n    return pos;\n  };\n\n  TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {\n    var updated;\n\n    if (isNOU(id)) {\n      index = isNOU(index) ? obj.length : index;\n\n      for (var k = 0, len = data.length; k < len; k++) {\n        obj.splice(index, 0, data[k]);\n        index++;\n      }\n\n      return updated;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (typeof mapper.child === 'string' && obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null || this.fields.dataSource instanceof DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor' && obj[i].hasOwnProperty('child')) {\n          var key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          var childData = getValue(key, obj[i]);\n\n          if (isNOU(childData)) {\n            childData = [];\n          }\n\n          index = isNOU(index) ? childData.length : index;\n\n          for (var k = 0, len = data.length; k < len; k++) {\n            childData.splice(index, 0, data[k]);\n            index++;\n          }\n        } else {\n          var key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          obj[i][key] = data;\n        }\n\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childObj = getValue(mapper.child, obj[i]);\n        updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor' && !isNOU(getValue('child', obj[i]))) {\n        var childData = getValue('child', obj[i]);\n        updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return updated;\n  };\n\n  TreeView.prototype.doDisableAction = function (nodes) {\n    var validNodes = this.nodeType(nodes);\n    var validID = this.checkValidId(validNodes);\n    this.validArr = [];\n\n    for (var i = 0, len = validID.length; i < len; i++) {\n      var id = validID[i][this.fields.id].toString();\n\n      if (id && this.disableNode.indexOf(id) === -1) {\n        this.disableNode.push(id);\n      }\n\n      var liEle = this.getElement(id);\n\n      if (liEle) {\n        liEle.setAttribute('aria-disabled', 'true');\n        addClass([liEle], DISABLE);\n      }\n    }\n  };\n\n  TreeView.prototype.doEnableAction = function (nodes) {\n    var strNodes = this.nodeType(nodes);\n\n    for (var i = 0, len = strNodes.length; i < len; i++) {\n      var liEle = this.getElement(strNodes[i]);\n      var id = strNodes[i];\n\n      if (id && this.disableNode.indexOf(id) !== -1) {\n        this.disableNode.splice(this.disableNode.indexOf(id), 1);\n      }\n\n      if (liEle) {\n        liEle.removeAttribute('aria-disabled');\n        removeClass([liEle], DISABLE);\n      }\n    }\n  };\n\n  TreeView.prototype.nodeType = function (nodes) {\n    var validID = [];\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var id = void 0;\n\n      if (typeof nodes[i] == \"string\") {\n        id = nodes[i] ? nodes[i].toString() : null;\n      } else if (typeof nodes[i] === \"object\") {\n        id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\n      }\n\n      if (validID.indexOf(id) == -1) {\n        validID.push(id);\n      }\n    }\n\n    return validID;\n  };\n\n  TreeView.prototype.checkValidId = function (node) {\n    var _this = this;\n\n    if (this.dataType === 1) {\n      this.validArr = this.treeData.filter(function (data) {\n        return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;\n      });\n    } else if (this.dataType === 2) {\n      for (var k = 0; k < this.treeData.length; k++) {\n        var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\n\n        if (node.indexOf(id) !== -1) {\n          this.validArr.push(this.treeData[k]);\n        }\n\n        var childItems = getValue(this.fields.child.toString(), this.treeData[k]);\n\n        if (childItems) {\n          this.filterNestedChild(childItems, node);\n        }\n      }\n    }\n\n    return this.validArr;\n  };\n\n  TreeView.prototype.filterNestedChild = function (treeData, nodes) {\n    for (var k = 0; k < treeData.length; k++) {\n      var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\n\n      if (nodes.indexOf(id) !== -1) {\n        this.validArr.push(treeData[k]);\n      }\n\n      var childItems = getValue(this.fields.child.toString(), treeData[k]);\n\n      if (childItems) {\n        this.filterNestedChild(childItems, nodes);\n      }\n    }\n  };\n\n  TreeView.prototype.setTouchClass = function () {\n    var ele = closest(this.element, '.' + BIGGER);\n    this.touchClass = isNOU(ele) ? '' : SMALL;\n  };\n\n  TreeView.prototype.updatePersistProp = function () {\n    this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n    var sleNodes = this.selectedNodes;\n\n    for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {\n      this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\n    }\n\n    var enodes = this.expandedNodes;\n\n    if (this.isBlazorPlatform) {\n      enodes = this.isBlazorExpandedNodes;\n    }\n\n    for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {\n      this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\n    }\n\n    if (this.showCheckBox) {\n      this.removeField(this.treeData, this.fields, ['isChecked']);\n      var cnodes = this.checkedNodes;\n\n      for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n        this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\n      }\n    }\n  };\n\n  TreeView.prototype.removeField = function (obj, mapper, names) {\n    if (isNOU(obj) || isNOU(mapper)) {\n      return;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      for (var j = 0; j < names.length; j++) {\n        var field = this.getMapperProp(mapper, names[j]);\n\n        if (!isNOU(obj[i][field])) {\n          delete obj[i][field];\n        }\n      }\n\n      if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\n      }\n    }\n  };\n\n  TreeView.prototype.getMapperProp = function (mapper, fieldName) {\n    switch (fieldName) {\n      case 'selected':\n        return !isNOU(mapper.selected) ? mapper.selected : 'selected';\n\n      case 'expanded':\n        return !isNOU(mapper.expanded) ? mapper.expanded : 'expanded';\n\n      case 'isChecked':\n        return !isNOU(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n\n      case 'hasChildren':\n        return !isNOU(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n\n      default:\n        return fieldName;\n    }\n  };\n\n  TreeView.prototype.updateField = function (obj, mapper, id, key, value) {\n    var childNodes;\n\n    if (isNOU(id)) {\n      return;\n    } else if (this.dataType === 1) {\n      var newId = this.isNumberTypeId ? parseFloat(id) : id;\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\n      setValue(this.getMapperProp(mapper, key), value, resultData[0]);\n    } else {\n      this.updateChildField(obj, mapper, id, key, value);\n    }\n  };\n\n  TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {\n    var removedData;\n\n    if (isNOU(obj)) {\n      return removedData;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (remove) {\n          removedData = obj.splice(i, 1);\n        } else {\n          setValue(this.getMapperProp(mapper, key), value, obj[i]);\n          removedData = [];\n        }\n\n        return removedData;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childData = getValue(mapper.child, obj[i]);\n        removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var childItems = getValue('child', obj[i]);\n        removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return removedData;\n  };\n\n  TreeView.prototype.triggerEvent = function () {\n    this.updateTemplateForBlazor();\n    this.renderReactTemplates();\n    var eventArgs = {\n      data: this.treeData\n    };\n    this.trigger('dataSourceChanged', eventArgs);\n  };\n\n  TreeView.prototype.updateBlazorTemplate = function () {\n    updateBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate', this, false);\n  };\n\n  TreeView.prototype.clientUpdateInitial = function () {\n    this.blazorInitialRender = true;\n  };\n\n  TreeView.prototype.wireInputEvents = function (inpEle) {\n    EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n  };\n\n  TreeView.prototype.wireEditingEvents = function (toBind) {\n    var _this = this;\n\n    if (toBind && !this.disabled) {\n      var proxy_2 = this;\n      this.touchEditObj = new Touch(this.element, {\n        tap: function (e) {\n          if (_this.isDoubleTapped(e) && e.tapCount === 2) {\n            e.originalEvent.preventDefault();\n            proxy_2.editingHandler(e.originalEvent);\n          }\n        }\n      });\n    } else {\n      if (this.touchEditObj) {\n        this.touchEditObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.wireClickEvent = function (toBind) {\n    if (toBind) {\n      var proxy_3 = this;\n      this.touchClickObj = new Touch(this.element, {\n        tap: function (e) {\n          proxy_3.clickHandler(e);\n        }\n      });\n    } else {\n      if (this.touchClickObj) {\n        this.touchClickObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.wireExpandOnEvent = function (toBind) {\n    var _this = this;\n\n    if (toBind) {\n      var proxy_4 = this;\n      this.touchExpandObj = new Touch(this.element, {\n        tap: function (e) {\n          if ((_this.expandOnType === 'Click' || _this.expandOnType === 'DblClick' && _this.isDoubleTapped(e) && e.tapCount === 2) && e.originalEvent.which !== 3) {\n            proxy_4.expandHandler(e);\n          }\n        }\n      });\n    } else {\n      if (this.touchExpandObj) {\n        this.touchExpandObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.mouseDownHandler = function (e) {\n    this.mouseDownStatus = true;\n\n    if (e.shiftKey || e.ctrlKey) {\n      e.preventDefault();\n    }\n\n    if (e.ctrlKey && this.allowMultiSelection) {\n      EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.preventContextMenu = function (e) {\n    e.preventDefault();\n  };\n\n  TreeView.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n    this.wireClickEvent(true);\n\n    if (this.expandOnType !== 'None') {\n      this.wireExpandOnEvent(true);\n    }\n\n    EventHandler.add(this.element, 'focus', this.focusIn, this);\n    EventHandler.add(this.element, 'blur', this.focusOut, this);\n    EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n    EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  TreeView.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n    this.wireClickEvent(false);\n    this.wireExpandOnEvent(false);\n    EventHandler.remove(this.element, 'focus', this.focusIn);\n    EventHandler.remove(this.element, 'blur', this.focusOut);\n    EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n    EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n\n    if (!this.disabled) {\n      this.keyboardModule.destroy();\n    }\n  };\n\n  TreeView.prototype.parents = function (element, selector) {\n    var matched = [];\n    var el = element.parentNode;\n\n    while (!isNOU(el)) {\n      if (matches(el, selector)) {\n        matched.push(el);\n      }\n\n      el = el.parentNode;\n    }\n\n    return matched;\n  };\n\n  TreeView.prototype.isDoubleTapped = function (e) {\n    var target = e.originalEvent.target;\n    var secondTap;\n\n    if (target && e.tapCount) {\n      if (e.tapCount === 1) {\n        this.firstTap = closest(target, '.' + LISTITEM);\n      } else if (e.tapCount === 2) {\n        secondTap = closest(target, '.' + LISTITEM);\n      }\n    }\n\n    return this.firstTap === secondTap;\n  };\n\n  TreeView.prototype.isDescendant = function (parent, child) {\n    var node = child.parentNode;\n\n    while (!isNOU(node)) {\n      if (node === parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  };\n\n  TreeView.prototype.showSpinner = function (element) {\n    addClass([element], LOAD);\n    createSpinner({\n      target: element,\n      width: Browser.isDevice ? 16 : 14\n    }, this.createElement);\n    showSpinner(element);\n  };\n\n  TreeView.prototype.hideSpinner = function (element) {\n    hideSpinner(element);\n    element.innerHTML = '';\n    removeClass([element], LOAD);\n  };\n\n  TreeView.prototype.setCheckedNodes = function (nodes) {\n    nodes = JSON.parse(JSON.stringify(nodes));\n    this.uncheckAll(this.checkedNodes);\n    this.setIndeterminate(nodes);\n\n    if (nodes.length > 0) {\n      this.checkAll(nodes);\n    }\n  };\n  /**\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\n   */\n\n\n  TreeView.prototype.setValidCheckedNode = function (node) {\n    if (this.dataType === 1) {\n      var mapper = this.fields;\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\n\n      if (resultData[0]) {\n        this.setChildCheckState(resultData, node, resultData[0]);\n\n        if (this.autoCheck) {\n          var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n          var childNodes = this.getChildNodes(this.treeData, parent_4);\n          var count = 0;\n\n          for (var len = 0; len < childNodes.length; len++) {\n            var childId = childNodes[len][this.fields.id].toString();\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n\n          if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {\n            this.checkedNodes.push(parent_4);\n          }\n        }\n      }\n    } else if (this.dataType === 2) {\n      for (var a = 0; a < this.treeData.length; a++) {\n        var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\n\n        if (index === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n          break;\n        }\n\n        var childItems = getValue(this.fields.child.toString(), this.treeData[a]);\n\n        if (childItems) {\n          this.setChildCheckState(childItems, node, this.treeData[a]);\n        }\n      }\n    }\n  };\n  /**\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\n   */\n\n\n  TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {\n    var checkedParent;\n    var count = 0;\n\n    if (this.dataType === 1) {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n      }\n\n      for (var index = 0; index < childItems.length; index++) {\n        var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n            this.checkedNodes.push(checkNode);\n          }\n        }\n\n        if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        var subChildItems = this.getChildNodes(this.treeData, checkNode);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, treeData);\n        }\n      }\n    } else {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n      }\n\n      for (var index = 0; index < childItems.length; index++) {\n        var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n\n        if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, childItems[index]);\n        }\n\n        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n          count++;\n        }\n\n        if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n          this.checkedNodes.push(checkedParent);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.setIndeterminate = function (nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      this.setValidCheckedNode(nodes[i]);\n    }\n  };\n\n  TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {\n    if (this.dataType === 1) {\n      var pos = this.getDataPos(this.treeData, this.fields, id);\n      this.treeData.splice(pos, 1, newData);\n\n      if (isRefreshChild) {\n        this.removeChildNodes(id);\n\n        for (var j = 0; j < childValue.length; j++) {\n          this.treeData.splice(pos, 0, childValue[j]);\n          pos++;\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n    }\n  };\n\n  TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {\n    var found;\n\n    for (var i = 0, objlen = treeData.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, treeData[i]);\n\n      if (treeData[i] && nodeId && nodeId.toString() === currID) {\n        treeData[i] = newData[0];\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, treeData[i]))) {\n        var childObj = getValue(mapper.child, treeData[i]);\n        found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', treeData[i]))) {\n        var childData = getValue('child', treeData[i]);\n        found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  TreeView.prototype.dynamicState = function () {\n    this.setDragAndDrop(this.allowDragAndDrop);\n    this.wireEditingEvents(this.allowEditing);\n\n    if (!this.disabled) {\n      this.wireEvents();\n      this.setRipple();\n    } else {\n      this.unWireEvents();\n      this.rippleFn();\n      this.rippleIconFn();\n    }\n  };\n\n  TreeView.prototype.crudOperation = function (operation, nodes, target, newText, newNode, index, prevent) {\n    var _this = this;\n\n    var data = this.fields.dataSource;\n    var matchedArr = [];\n    var query = this.getQuery(this.fields);\n    var key = this.fields.id;\n    var crud;\n    var changes = {\n      addedRecords: [],\n      deletedRecords: [],\n      changedRecords: []\n    };\n    var nodesID = [];\n\n    if (nodes) {\n      nodesID = this.nodeType(nodes);\n    } else if (target) {\n      if (typeof target == \"string\") {\n        nodesID[0] = target.toString();\n      } else if (typeof target === \"object\") {\n        nodesID[0] = target.getAttribute(\"data-uid\").toString();\n      }\n    }\n\n    for (var i = 0, len = nodesID.length; i < len; i++) {\n      var liEle = this.getElement(nodesID[i]);\n\n      if (isNullOrUndefined(liEle)) {\n        continue;\n      }\n\n      var removedData = this.getNodeObject(nodesID[i]);\n      matchedArr.push(removedData);\n    }\n\n    switch (operation) {\n      case 'delete':\n        if (nodes.length == 1) {\n          crud = data.remove(key, matchedArr[0], query.fromTable, query);\n        } else {\n          changes.deletedRecords = matchedArr;\n          crud = data.saveChanges(changes, key, query.fromTable, query);\n        }\n\n        crud.then(function (e) {\n          return _this.deleteSuccess(nodesID);\n        }).catch(function (e) {\n          return _this.dmFailure(e);\n        });\n        break;\n\n      case 'update':\n        matchedArr[0][this.fields.text] = newText;\n        crud = data.update(key, matchedArr[0], query.fromTable, query);\n        crud.then(function (e) {\n          return _this.editSucess(target, newText, prevent);\n        }).catch(function (e) {\n          return _this.dmFailure(e, target, prevent);\n        });\n        break;\n\n      case 'insert':\n        if (newNode.length == 1) {\n          crud = data.insert(newNode[0], query.fromTable, query);\n        } else {\n          var arr = [];\n\n          for (var i = 0, len = newNode.length; i < len; i++) {\n            arr.push(newNode[i]);\n          }\n\n          changes.addedRecords = arr;\n          crud = data.saveChanges(changes, key, query.fromTable, query);\n        }\n\n        crud.then(function (e) {\n          var dropLi = _this.getElement(target);\n\n          _this.addSuccess(newNode, dropLi, index);\n\n          _this.preventExpand = false;\n        }).catch(function (e) {\n          return _this.dmFailure(e);\n        });\n        break;\n    }\n  };\n\n  TreeView.prototype.deleteSuccess = function (nodes) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var liEle = this.getElement(nodes[i]);\n\n      if (isNOU(liEle)) {\n        continue;\n      }\n\n      this.removeNode(liEle);\n    }\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    this.triggerEvent();\n  };\n\n  TreeView.prototype.editSucess = function (target, newText, prevent) {\n    var liEle = this.getElement(target);\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.appendNewText(liEle, txtEle, newText, prevent);\n  };\n\n  TreeView.prototype.addSuccess = function (nodes, dropLi, index) {\n    var dropUl;\n    var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n    var proxy = this;\n\n    if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector('.' + PARENTITEM) === null) {\n      proxy.renderChildNodes(dropLi, null, function () {\n        dropUl = dropLi.querySelector('.' + PARENTITEM);\n        proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);\n        proxy.triggerEvent();\n      });\n    } else {\n      this.addGivenNodes(nodes, dropLi, index, true);\n      this.triggerEvent();\n    }\n  };\n\n  TreeView.prototype.dmFailure = function (e, target, prevent) {\n    if (target) {\n      this.updatePreviousText(target, prevent);\n    }\n\n    this.trigger('actionFailure', {\n      error: e\n    });\n  };\n\n  TreeView.prototype.updatePreviousText = function (target, prevent) {\n    var liEle = this.getElement(target);\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.updateText(liEle, txtEle, this.oldText, prevent);\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * @param  {TreeView} newProp\n   * @param  {TreeView} oldProp\n   * @returns void\n   * @private\n   */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'allowDragAndDrop':\n          this.setDragAndDrop(this.allowDragAndDrop);\n          break;\n\n        case 'dragArea':\n          if (this.allowDragAndDrop) {\n            this.dragObj.dragArea = this.dragArea;\n          }\n\n          break;\n\n        case 'allowEditing':\n          this.wireEditingEvents(this.allowEditing);\n          break;\n\n        case 'allowMultiSelection':\n          if (this.selectedNodes.length > 1) {\n            var sNode = this.getElement(this.selectedNodes[0]);\n            this.isLoaded = false;\n            this.removeSelectAll();\n            this.selectNode(sNode, null);\n            this.isLoaded = true;\n          }\n\n          this.setMultiSelect(this.allowMultiSelection);\n          this.addMultiSelect(this.allowMultiSelection);\n          break;\n\n        case 'checkedNodes':\n          if (this.showCheckBox) {\n            this.checkedNodes = oldProp.checkedNodes;\n            this.setCheckedNodes(newProp.checkedNodes);\n          }\n\n          break;\n\n        case 'autoCheck':\n          if (this.showCheckBox) {\n            this.autoCheck = newProp.autoCheck;\n            this.ensureIndeterminate();\n          }\n\n          break;\n\n        case 'cssClass':\n          this.setCssClass(oldProp.cssClass, newProp.cssClass);\n          break;\n\n        case 'enableRtl':\n          this.setEnableRtl();\n          break;\n\n        case 'expandedNodes':\n          this.isAnimate = false;\n\n          if (!this.isBlazorPlatform) {\n            this.setProperties({\n              expandedNodes: []\n            }, true);\n          }\n\n          this.collapseAll();\n          this.isInitalExpand = true;\n\n          if (!this.isBlazorPlatform) {\n            this.setProperties({\n              expandedNodes: isNOU(newProp.expandedNodes) ? [] : newProp.expandedNodes\n            }, true);\n          }\n\n          this.doExpandAction();\n          this.isInitalExpand = false;\n          this.isAnimate = true;\n          break;\n\n        case 'expandOn':\n          this.wireExpandOnEvent(false);\n          this.setExpandOnType();\n\n          if (this.expandOnType !== 'None' && !this.disabled) {\n            this.wireExpandOnEvent(true);\n          }\n\n          break;\n\n        case 'disabled':\n          this.setDisabledMode();\n          this.dynamicState();\n          break;\n\n        case 'fields':\n          this.isAnimate = false;\n          this.isFieldChange = true;\n          this.initialRender = true;\n\n          if (!this.blazorInitialRender) {\n            this.reRenderNodes();\n          }\n\n          this.blazorInitialRender = false;\n          this.initialRender = false;\n          this.isAnimate = true;\n          this.isFieldChange = false;\n          break;\n\n        case 'fullRowSelect':\n          this.setFullRow(this.fullRowSelect);\n          this.addFullRow(this.fullRowSelect);\n          break;\n\n        case 'loadOnDemand':\n          if (this.loadOnDemand === false && !this.onLoaded) {\n            var nodes = this.element.querySelectorAll('li');\n            var i = 0;\n\n            while (i < nodes.length) {\n              if (nodes[i].getAttribute('aria-expanded') !== 'true') {\n                this.renderChildNodes(nodes[i], true, null, true);\n              }\n\n              i++;\n            }\n\n            this.onLoaded = true;\n          }\n\n          break;\n\n        case 'nodeTemplate':\n          this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n          this.reRenderNodes();\n          break;\n\n        case 'selectedNodes':\n          this.removeSelectAll();\n          this.setProperties({\n            selectedNodes: newProp.selectedNodes\n          }, true);\n          this.doSelectionAction();\n          break;\n\n        case 'showCheckBox':\n          this.reRenderNodes();\n          break;\n\n        case 'sortOrder':\n          this.reRenderNodes();\n          break;\n\n        case 'fullRowNavigable':\n          this.setProperties({\n            fullRowNavigable: newProp.fullRowNavigable\n          }, true);\n          this.listBaseOption.itemNavigable = newProp.fullRowNavigable;\n          this.reRenderNodes();\n          break;\n      }\n    }\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n   */\n\n\n  TreeView.prototype.destroy = function () {\n    resetBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate');\n    this.clearTemplate();\n    this.element.removeAttribute('aria-activedescendant');\n    this.element.removeAttribute('tabindex');\n    this.unWireEvents();\n    this.wireEditingEvents(false);\n\n    if (!this.disabled) {\n      this.rippleFn();\n      this.rippleIconFn();\n    }\n\n    this.setCssClass(this.cssClass, null);\n    this.setDragAndDrop(false);\n    this.setFullRow(false);\n\n    if (this.isBlazorPlatform) {\n      this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n    }\n\n    if (this.ulElement && this.ulElement.parentElement) {\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    }\n\n    if (!this.isBlazorPlatform) {\n      _super.prototype.destroy.call(this);\n    }\n  };\n  /**\n   * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\n   * then the nodes are added as children of the given parentID or in the root level of TreeView.\n   * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\n   * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n   */\n\n\n  TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {\n    if (isNOU(nodes)) {\n      return;\n    }\n\n    nodes = JSON.parse(JSON.stringify(nodes));\n    var dropLi = this.getElement(target);\n    this.preventExpand = preventTargetExpand;\n\n    if (this.fields.dataSource instanceof DataManager && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {\n      if (!this.isOffline) {\n        this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);\n      } else {\n        this.addSuccess(nodes, dropLi, index);\n      }\n    } else if (this.dataType === 2) {\n      this.addGivenNodes(nodes, dropLi, index);\n    } else {\n      if (dropLi) {\n        this.addGivenNodes(nodes, dropLi, index);\n      } else {\n        nodes = this.getSortedData(nodes);\n\n        for (var i = 0; i < nodes.length; i++) {\n          var pid = getValue(this.fields.parentID, nodes[i]);\n          dropLi = pid ? this.getElement(pid.toString()) : pid;\n          this.addGivenNodes([nodes[i]], dropLi, index);\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    this.updateCheckedStateFromDS();\n\n    if (this.showCheckBox && dropLi) {\n      this.ensureParentCheckState(dropLi);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false || this.fields.dataSource instanceof DataManager && this.fields.dataSource.adaptorName === 'BlazorAdaptor') {\n      this.preventExpand = false;\n      this.triggerEvent();\n    }\n  };\n  /**\n   * Instead of clicking on the TreeView node for editing, we can enable it by using\n   * `beginEdit` property. On passing the node ID or element through this property, the edit textBox\n   * will be created for the particular node thus allowing us to edit it.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   */\n\n\n  TreeView.prototype.beginEdit = function (node) {\n    var ele = this.getElement(node);\n\n    if (isNOU(ele) || this.disabled) {\n      return;\n    }\n\n    this.createTextbox(ele, null);\n  };\n  /**\n   * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\n   * as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  TreeView.prototype.checkAll = function (nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, true);\n    }\n  };\n  /**\n   * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\n   * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\n   * a specific level of nodes, set **level** as argument to collapseAll method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\n   * @param  {number} level - TreeView nodes will collapse up to the given level.\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\n   */\n\n\n  TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {\n    if (!isNOU(nodes)) {\n      this.doGivenAction(nodes, COLLAPSIBLE, false);\n    } else {\n      if (level > 0) {\n        this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.collapseAllNodes(excludeHiddenNodes);\n      }\n    }\n  };\n  /**\n   * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   */\n\n\n  TreeView.prototype.disableNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      this.doDisableAction(nodes);\n    }\n  };\n  /**\n   * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   */\n\n\n  TreeView.prototype.enableNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      this.doEnableAction(nodes);\n    }\n  };\n  /**\n   * Ensures visibility of the TreeView node by using node ID or node element.\n   * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\n   * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\n   */\n\n\n  TreeView.prototype.ensureVisible = function (node) {\n    var liEle = this.getElement(node);\n\n    if (isNOU(liEle)) {\n      return;\n    }\n\n    var parents = this.parents(liEle, '.' + LISTITEM);\n    this.expandAll(parents);\n    setTimeout(function () {\n      liEle.scrollIntoView(true);\n    }, 450);\n  };\n  /**\n   * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\n   * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\n   * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   * @param  {number} level - TreeView nodes will expand up to the given level.\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\n   */\n\n\n  TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {\n    if (!isNOU(nodes)) {\n      this.doGivenAction(nodes, EXPANDABLE, true);\n    } else {\n      if (level > 0) {\n        this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.expandAllNodes(excludeHiddenNodes);\n      }\n    }\n  };\n  /**\n   * Gets all the checked nodes including child, whether it is loaded or not.\n   */\n\n\n  TreeView.prototype.getAllCheckedNodes = function () {\n    var checkNodes = this.checkedNodes;\n    return checkNodes;\n  };\n  /**\n  * Gets all the disabled nodes including child, whether it is loaded or not.\n  */\n\n\n  TreeView.prototype.getDisabledNodes = function () {\n    var disabledNodes = this.disableNode;\n    return disabledNodes;\n  };\n  /**\n   * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   * @BlazorType NodeData\n   */\n\n\n  TreeView.prototype.getNode = function (node) {\n    var ele = this.getElement(node);\n    return this.getNodeData(ele, true);\n  };\n  /**\n   * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\n   * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\n   * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\n   * of the corresponding node otherwise it will return the entire updated data source of TreeView.\n   * * The updated data source also contains custom attributes if you specified in data source.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   * @isGenericType true\n   */\n\n\n  TreeView.prototype.getTreeData = function (node) {\n    var id = this.getId(node);\n    this.updatePersistProp();\n\n    if (isNOU(id)) {\n      return this.treeData;\n    } else {\n      var data = this.getNodeObject(id);\n      return isNOU(data) ? [] : [data];\n    }\n  };\n  /**\n   * Moves the collection of nodes within the same TreeView based on target or its index position.\n   * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  {number} index - Specifies the index to place the moved nodes in the target element.\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n   */\n\n\n  TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {\n    var dropLi = this.getElement(target);\n\n    if (isNOU(dropLi)) {\n      return;\n    }\n\n    for (var i = 0; i < sourceNodes.length; i++) {\n      var dragLi = this.getElement(sourceNodes[i]);\n\n      if (isNOU(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        continue;\n      }\n\n      this.preventExpand = preventTargetExpand;\n      this.dropAsChildNode(dragLi, dropLi, this, index);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    this.triggerEvent();\n  };\n  /**\n   * Refreshes a particular node of the TreeView.\n   * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\n   * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\n   */\n\n\n  TreeView.prototype.refreshNode = function (target, newData) {\n    if (isNOU(target) || isNOU(newData)) {\n      return;\n    }\n\n    var id;\n    var isRefreshChild = false;\n\n    if (this.dataType == 1 && newData.length > 1) {\n      isRefreshChild = true;\n    } else if (this.dataType == 2 && newData.length === 1) {\n      var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\n\n      if (!isNOU(updatedChildValue)) {\n        isRefreshChild = true;\n      }\n    }\n\n    var liEle = this.getElement(target);\n    id = liEle ? liEle.getAttribute('data-uid') : target ? target.toString() : null;\n    this.refreshData = this.getNodeObject(id);\n    newData = JSON.parse(JSON.stringify(newData)); // tslint:disable\n\n    var newNodeData;\n    var parentData;\n\n    if (this.dataType == 1 && isRefreshChild) {\n      for (var k = 0; k < newData.length; k++) {\n        if (isNOU(newData[k][this.fields.parentID])) {\n          parentData = newData[k];\n          newData.splice(k, 1);\n          break;\n        }\n      }\n\n      newNodeData = extend({}, this.refreshData, parentData);\n    } else {\n      newNodeData = extend({}, this.refreshData, newData[0]);\n    }\n\n    if (isNOU(liEle)) {\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n      return;\n    }\n\n    this.isRefreshed = true;\n    var level = parseFloat(liEle.getAttribute('aria-level'));\n    var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n    var ul = select('.' + PARENTITEM, liEle);\n    var childItems = getValue(this.fields.child.toString(), newNodeData);\n\n    if (isRefreshChild && ul || isRefreshChild && !isNOU(childItems)) {\n      var parentEle = liEle.parentElement;\n      var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);\n      remove(liEle);\n      parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n\n      if (isRefreshChild && ul) {\n        this.expandAll([id]);\n      }\n    } else {\n      var txtEle = select('.' + TEXTWRAP, liEle);\n      var newTextEle = select('.' + TEXTWRAP, newliEle[0]);\n      var icon = select('div.' + ICON, txtEle);\n      var newIcon = select('div.' + ICON, newTextEle);\n\n      if (icon && newIcon) {\n        if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n          removeClass([newIcon], EXPANDABLE);\n          addClass([newIcon], COLLAPSIBLE);\n        } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n          removeClass([newIcon], COLLAPSIBLE);\n          addClass([newIcon], EXPANDABLE);\n        } else if (icon.classList.contains('interaction')) {\n          addClass([newIcon], 'interaction');\n        }\n      }\n\n      remove(txtEle);\n      var fullEle = select('.' + FULLROW, liEle);\n      fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n    }\n\n    liEle = this.getElement(target);\n\n    if (newNodeData[this.fields.tooltip]) {\n      liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\n    }\n\n    if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n      var attr = {};\n      merge(attr, newNodeData[this.fields.htmlAttributes]);\n\n      if (attr.class) {\n        addClass([liEle], attr.class.split(' '));\n        delete attr.class;\n      } else {\n        attributes(liEle, attr);\n      }\n    }\n\n    if (this.selectedNodes.indexOf(id) !== -1) {\n      liEle.setAttribute('aria-selected', 'true');\n      addClass([liEle], ACTIVE);\n    }\n\n    this.isRefreshed = false;\n    this.triggerEvent();\n  };\n  /**\n   * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  TreeView.prototype.removeNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      if (this.fields.dataSource instanceof DataManager && !this.isOffline && this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {\n        this.crudOperation('delete', nodes);\n      } else {\n        this.deleteSuccess(nodes);\n      }\n    }\n  };\n  /**\n   * Replaces the text of the TreeView node with the given text.\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  {string} newText - Specifies the new text of TreeView node.\n   */\n\n\n  TreeView.prototype.updateNode = function (target, newText) {\n    var _this = this;\n\n    if (isNOU(target) || isNOU(newText) || !this.allowEditing) {\n      return;\n    }\n\n    var liEle = this.getElement(target);\n\n    if (isNOU(liEle)) {\n      return;\n    }\n\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    var eventArgs = this.getEditEvent(liEle, null, null);\n    this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        if (_this.fields.dataSource instanceof DataManager && !_this.isOffline && _this.fields.dataSource.adaptorName !== 'BlazorAdaptor') {\n          _this.crudOperation('update', null, target, newText, null, null, false);\n        } else {\n          _this.appendNewText(liEle, txtEle, newText, false);\n        }\n      }\n    });\n  };\n  /**\n   * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\n   * as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  TreeView.prototype.uncheckAll = function (nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, false);\n    }\n  };\n\n  var TreeView_1;\n\n  __decorate([Property(false)], TreeView.prototype, \"allowDragAndDrop\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"allowEditing\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"allowMultiSelection\", void 0);\n\n  __decorate([Complex({}, NodeAnimationSettings)], TreeView.prototype, \"animation\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"checkedNodes\", void 0);\n\n  __decorate([Property('')], TreeView.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"disabled\", void 0);\n\n  __decorate([Property(null)], TreeView.prototype, \"dragArea\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"expandedNodes\", void 0);\n\n  __decorate([Property('Auto')], TreeView.prototype, \"expandOn\", void 0);\n\n  __decorate([Complex({}, FieldsSettings)], TreeView.prototype, \"fields\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"fullRowSelect\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"loadOnDemand\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"locale\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"nodeTemplate\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"selectedNodes\", void 0);\n\n  __decorate([Property('None')], TreeView.prototype, \"sortOrder\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"showCheckBox\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"autoCheck\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"fullRowNavigable\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"actionFailure\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"created\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"dataBound\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"dataSourceChanged\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"drawNode\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"destroyed\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"keyPress\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeChecked\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeChecking\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeClicked\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeCollapsed\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeCollapsing\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragging\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragStart\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragStop\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDropped\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeEdited\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeEditing\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeExpanded\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeExpanding\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeSelected\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeSelecting\", void 0);\n\n  TreeView = TreeView_1 = __decorate([NotifyPropertyChanges], TreeView);\n  return TreeView;\n}(Component);\n\nexport { TreeView };","map":{"version":3,"sources":["C:/Users/Power GSM/Desktop/React-Fito-v1.0-9-April-2021V/React-Fito-v1.0-9-April-2021V/react-fito/node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Component","isUndefined","Browser","compile","isNullOrUndefined","Property","NotifyPropertyChanges","ChildProperty","Complex","Event","EventHandler","KeyboardEvents","rippleEffect","Animation","remove","Draggable","Droppable","updateBlazorTemplate","resetBlazorTemplate","isBlazor","getElement","addClass","removeClass","closest","matches","detach","select","selectAll","isVisible","append","DataManager","Query","isNOU","Touch","getValue","setValue","extend","merge","attributes","ListBase","createCheckBox","rippleMouseHandler","Input","createSpinner","showSpinner","hideSpinner","ROOT","CONTROL","COLLAPSIBLE","EXPANDABLE","LISTITEM","LISTTEXT","LISTICON","LISTIMG","LISTURL","PARENTITEM","HOVER","ACTIVE","LOAD","PROCESS","ICON","TEXTWRAP","INPUT","INPUTGROUP","TREEINPUT","EDITING","RTL","INTERACTION","DRAGITEM","DROPPABLE","DRAGGING","SIBLING","DROPIN","DROPNEXT","DROPOUT","NODROP","FULLROWWRAP","FULLROW","SELECTED","EXPANDED","NODECOLLAPSED","DISABLE","CONTENT","DOWNTAIL","DROPCOUNT","CHECK","INDETERMINATE","CHECKBOXWRAP","CHECKBOXFRAME","CHECKBOXRIPPLE","RIPPLE","RIPPLEELMENT","FOCUS","IMAGE","BIGGER","SMALL","CHILD","ITEM_ANIMATION_ACTIVE","DISABLED","treeAriaAttr","treeRole","itemRole","listRole","itemText","wrapperRole","FieldsSettings","_super","apply","ActionSettings","NodeAnimationSettings","effect","duration","easing","TreeView","options","element","_this","call","isRefreshed","preventExpand","checkedElement","disableNode","validArr","expandChildren","isFieldChange","changeDataSource","isBlazorExpandedNodes","mouseDownStatus","TreeView_1","getModuleName","preRender","isBlazorPlatform","isServerRendered","checkActionNodes","parentNodeCheck","dragStartAction","isAnimate","keyConfigs","escape","end","enter","f2","home","moveDown","moveLeft","moveRight","moveUp","ctrlDown","ctrlUp","ctrlEnter","ctrlHome","ctrlEnd","ctrlA","shiftDown","shiftUp","shiftEnter","shiftHome","shiftEnd","csDown","csUp","csEnter","csHome","csEnd","space","listBaseOption","expandCollapse","showIcon","expandIconClass","ariaAttributes","expandIconPosition","itemCreated","e","beforeNodeCreate","enableHtmlSanitizer","itemNavigable","fullRowNavigable","updateListProp","fields","aniObj","treeList","isLoaded","isInitalExpand","index","setTouchClass","selectedNodes","setProperties","checkedNodes","expandedNodes","getPersistData","keyEntity","addOnPersist","render","initialRender","blazorInitialRender","initialize","setDataBinding","setDisabledMode","setExpandOnType","disabled","setRipple","wireEditingEvents","allowEditing","setDragAndDrop","allowDragAndDrop","wireEvents","renderComplete","setAttribute","id","setCssClass","cssClass","setEnableRtl","setFullRow","fullRowSelect","nodeTemplateFn","templateComplier","nodeTemplate","classList","add","enableRtl","tempStr","rippleModel","selector","ignore","rippleFn","iconModel","isCenterRipple","rippleIconFn","isEnabled","setMultiSelect","firstUl","removeAttribute","template","document","querySelectorAll","querySelector","innerHTML","trim","undefined","push","dataSource","isOffline","offline","ready","then","pop","treeData","result","isNumberTypeId","getType","setRootData","renderItems","finalize","catch","trigger","error","executeQuery","getQuery","rootData","JSON","parse","stringify","mapper","value","columns","query","prop","getActualProperties","_i","_a","keys","col","indexOf","from","tableName","clone","addSorting","sortOrder","text","parentID","where","parseFloat","dataType","getDataType","groupedData","getGroupedData","rootItems","getChildNodes","isSorted","adaptorName","level","sortedData","getSortedData","ulElement","createList","createElement","appendChild","rootNodes","loadOnDemand","renderChildNodes","parentEle","finalizeNode","updateTemplateForBlazor","parentCheckData","updateCheckedStateFromDS","autoCheck","showCheckBox","updateParentCheckState","isStringTemplate","resultData","executeLocal","isChecked","resultId","toString","resultPId","hasChildren","id_1","childData","child","childId","mapper_1","checkState","getCheckedNodeDetails","checkIndeterminateState","checkedData","checkedId","fieldId","childItems","updateChildCheckState","checkNodes","count","len","childNodes","preElement","check","changeState","indeterminate","childCheckedElement","node","nodeId","getAttribute","j","nodeCheck","data","ariaChecked","checkedParent","checkedChild","subChildItems","checkboxEle","touchClass","icon","item","insertBefore","checkValue","curData","addCheck","frame","frameMouseHandler","createFullRow","allowMultiSelection","contains","addActionClass","selected","expanded","textEle","dataId","renderNodeTemplate","eventArgs","nodeData","rippleSpan","parentElement","action","actionValue","ds","groupBy","cusQuery","group","getDataSource","grpItem","itemObj","items","list","iNodes","k","sNodes","selectNode","cNodes","disableExpandAttr","eNodes","updateList","updateCheckedProp","nodes","concat","ensureIndeterminate","liElement","ensureParentCheckState","ensureChildCheckState","indeterminateNodes","checkBoxEle","getElementsByClassName","parentUL","currentParent","childElement","checkBoxes","parentCheck","childCheck","expandState","checkedState","currentLoadData","ele","splice","isNodeChecked","doCheckBoxAction","doCheck","li","liEle","setValidCheckedNode","dynamicCheckState","updateField","checkBox","validateCheckNode","updateFieldChecked","checkbox","currLi","nodeDetails","getNodeData","parent_1","updateIndeterminate","subChild","updateChildIndeterminate","indeterminateData","getTreeData","parent","subId","childElementCheck","innerChild","wrapper","state","isPrevent","isAdd","getCheckEvent","observedArgs","cancel","nodeCheckAction","ariaState","frameSpan","removeCheck","ensureStateChange","allowServerDataBinding","updateServerProperties","checked","isInteracted","firstNode","updateIdAttr","renderReactTemplates","hasPid","doExpandAction","eUids","expandGivenNodes","eNode","expandAction","afterFinalized","arr","proxy","expandCallback","eUid","callback","doSelectionAction","setCheckedNodes","updateInstance","sUids","sNode","selectGivenNodes","clickHandler","event","originalEvent","preventContextMenu","which","rippleElement","rippleIcons","removeHover","setFocusElement","checkWrapper","checkElement","triggerClickEvent","collapseNode","toggleSelect","nodeCheckedEvent","isCheck","expandNode","loaded","start_1","end_1","proxy_1","ul_1","liEle_1","setHeight","activeElement_1","animate","name","animation","expand","timingFunction","begin","args","style","overflow","HTMLElement","offsetHeight","progress","display","animateHeight","expandedNode","ul","height","addExpand","expandArgs","getExpandEvent","colArgs","nodeCollapseAction","start","activeElement","collapse","collapsedNode","removeExpand","toRemove","visibility","remaining","timeStamp","currentHeight","parentLi","expandChild","eicon","parents","mapper_2","getChildFields","loadChild","setSelectionForChildNodes","ensureCheckNode","disableTreeNodes","renderSubChild","getNodeObject","doDisableAction","getFields","nodeLevel","dataLevel","getChildMapper","obj","parentId","isRoot","getChildGroup","objlen","cIcons","curLi","multiSelect","ctrlKey","isActive","unselectNode","getSelectEvent","nodeSelectAction","removeSelectAll","shiftKey","startNode","startIndex","liList","endIndex","temp","currNode","addSelect","nodeUnselectAction","removeSelect","focusedNode","getFocusedNode","selectedLI","selectedLI_1","expandOnType","expandOn","isDevice","expandHandler","expandCollapseAction","nodeExpandAction","nodeName","liEles","getId","icon_1","keyActionHandler","inpEle","blur","focus","oldText","preventDefault","checkNode","openNode","shiftKeySelect","navigateNode","navigateRootNode","createTextbox","navigateToFocus","isUp","focusNode","pos","getBoundingClientRect","getScrollParent","parentPos","bottom","scrollTop","top","isVisibleInViewport","scrollIntoView","txtWrap","left","window","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","scrollHeight","isTowards","nextNode","getNextNode","getPrevNode","checkWrap","nodeCheckingAction","allCheckNode","parentIndex","getChildItems","childStateChange","childIsCheck","newCheck","validateCheck","length_1","childId_1","toBeOpened","focusNextNode","setFocus","isBackwards","rootNode","getRootNode","getEndNode","selectedItem","fNode","firstElementChild","lastChild","previousSibling","nextSibling","prevNode","endNode","preNode","focusIn","focusOut","onMouseOver","currentLi","setHover","onMouseLeave","hoveredNode","fromDS","getText","pNode","parentNode","pid","nodeFields","textContent","tempArr","slice","destroyTemplate","clearTemplate","reRenderNodes","removeChild","oldClass","newClass","split","editingHandler","oldInpEle","updateOldText","innerEle","className","attrs","getEditEvent","outerHTML","inpWidth","offsetWidth","innerHtml","inputObj","createInput","properties","container","inputEle","setSelectionRange","wireInputEvents","editData","editFields","inputFocusOut","newText","txtEle","crudOperation","appendNewText","isInput","updateText","triggerEvent","newData","innerText","getChildNodeObject","newList","toBind","initializeDrag","destroyDrag","virtualEle","dragObj","enableTailMode","enableAutoScroll","dragArea","dragTarget","helper","sender","dragRoot","dragWrap","dragLi","nextElementSibling","isSameNode","cloneEle","cloneNode","children","nLen","cNode","body","cursor","dragData","dragStart","listItem","parseInt","getDragEvent","draggedNode","intDestroy","dragCancelAction","bindEvents","dragElement","drag","cursorAt","targetTouches","dragAction","dragStop","removeVirtualEle","dropTarget","preventTargetExpand","dropRoot","isHelperElement","dragParent","draggedParentNode","dropAction","dropObj","out","over","drop","dropWrap","dropLi","isDescendant","offsetY","offsetX","virEle","renderVirtualEle","dropIndicator","isBlazorDrop","dragInstance","draggable","ej2_instances","droppedElement","appendNode","draggedElement","dropAsSiblingNode","dropAsChildNode","dropUl","dragParentUl","dragParentLi","pre","moveData","updateElement","updateAriaLevel","dropParentUl","expandParent","childLi","dropParentLi","removedData","updateChildField","refId","getDataPos","currPid","removeChildNodes","addChildData","dropIcon","generateIcon","generateUL","childElementCount","dragIcon","updateChildAriaLevel","sibEle","destroy","dragNode","dropData","draggedNodeData","newParent","dragLiParent","targetParent","indexValue","iconCss","iconClass","position","dropTar","parent_2","parent_3","hasAttribute","clonedNode","droppedNode","droppedNodeData","dropIndex","dropLevel","addFullRow","toAdd","rowDiv","addMultiSelect","liEles_1","liEles_2","collapseByLevel","excludeHiddenNodes","getVisibleNodes","collapseAllNodes","expandByLevel","expandAllNodes","eIcons","vNodes","removeNode","removeData","updateSelectedNodes","updateExpandedNodes","a","dm","newId","currId","doGivenAction","toExpand","addGivenNodes","isRemote","dropEle","updateMapper","createListItemFromJson","refNode","url","navigateUrl","updated","childObj","validNodes","nodeType","validID","checkValidId","doEnableAction","strNodes","filter","filterNestedChild","updatePersistProp","removeField","sleNodes","l","slelen","enodes","nodelen","cnodes","m","names","field","getMapperProp","fieldName","clientUpdateInitial","proxy_2","touchEditObj","tap","isDoubleTapped","tapCount","wireClickEvent","proxy_3","touchClickObj","wireExpandOnEvent","proxy_4","touchExpandObj","mouseDownHandler","keyboardModule","keyAction","bind","eventName","unWireEvents","matched","el","secondTap","firstTap","width","uncheckAll","setIndeterminate","checkAll","setChildCheckState","parent_4","updatePosition","isRefreshChild","childValue","updateChildPosition","currID","found","dynamicState","operation","newNode","prevent","matchedArr","crud","changes","addedRecords","deletedRecords","changedRecords","nodesID","fromTable","saveChanges","deleteSuccess","dmFailure","update","editSucess","insert","addSuccess","updatePreviousText","onPropertyChanged","newProp","oldProp","collapseAll","onLoaded","addNodes","beginEdit","disableNodes","enableNodes","ensureVisible","expandAll","setTimeout","getAllCheckedNodes","getDisabledNodes","disabledNodes","getNode","moveNodes","sourceNodes","refreshNode","updatedChildValue","refreshData","newNodeData","parentData","newliEle","newTextEle","newIcon","fullEle","tooltip","htmlAttributes","attr","class","removeNodes","updateNode"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, isUndefined, Browser, compile, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Property, NotifyPropertyChanges, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { Event, EventHandler, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { rippleEffect, Animation, remove } from '@syncfusion/ej2-base';\nimport { Draggable, Droppable } from '@syncfusion/ej2-base';\nimport { updateBlazorTemplate, resetBlazorTemplate, isBlazor, getElement } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, closest, matches, detach, select, selectAll, isVisible, append } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { isNullOrUndefined as isNOU, Touch, getValue, setValue, extend, merge, attributes } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nvar ROOT = 'e-treeview';\nvar CONTROL = 'e-control';\nvar COLLAPSIBLE = 'e-icon-collapsible';\nvar EXPANDABLE = 'e-icon-expandable';\nvar LISTITEM = 'e-list-item';\nvar LISTTEXT = 'e-list-text';\nvar LISTICON = 'e-list-icon';\nvar LISTIMG = 'e-list-img';\nvar LISTURL = 'e-list-url';\nvar PARENTITEM = 'e-list-parent';\nvar HOVER = 'e-hover';\nvar ACTIVE = 'e-active';\nvar LOAD = 'e-icons-spinner';\nvar PROCESS = 'e-process';\nvar ICON = 'e-icons';\nvar TEXTWRAP = 'e-text-content';\nvar INPUT = 'e-input';\nvar INPUTGROUP = 'e-input-group';\nvar TREEINPUT = 'e-tree-input';\nvar EDITING = 'e-editing';\nvar RTL = 'e-rtl';\nvar INTERACTION = 'e-interaction';\nvar DRAGITEM = 'e-drag-item';\nvar DROPPABLE = 'e-droppable';\nvar DRAGGING = 'e-dragging';\nvar SIBLING = 'e-sibling';\nvar DROPIN = 'e-drop-in';\nvar DROPNEXT = 'e-drop-next';\nvar DROPOUT = 'e-drop-out';\nvar NODROP = 'e-no-drop';\nvar FULLROWWRAP = 'e-fullrow-wrap';\nvar FULLROW = 'e-fullrow';\nvar SELECTED = 'e-selected';\nvar EXPANDED = 'e-expanded';\nvar NODECOLLAPSED = 'e-node-collapsed';\nvar DISABLE = 'e-disable';\nvar CONTENT = 'e-content';\nvar DOWNTAIL = 'e-downtail';\nvar DROPCOUNT = 'e-drop-count';\nvar CHECK = 'e-check';\nvar INDETERMINATE = 'e-stop';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECKBOXRIPPLE = 'e-ripple-container';\nvar RIPPLE = 'e-ripple';\nvar RIPPLEELMENT = 'e-ripple-element';\nvar FOCUS = 'e-node-focus';\nvar IMAGE = 'e-list-img';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar CHILD = 'e-has-child';\nvar ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nvar DISABLED = 'e-disabled';\nvar treeAriaAttr = {\n    treeRole: 'tree',\n    itemRole: 'treeitem',\n    listRole: 'group',\n    itemText: '',\n    wrapperRole: '',\n};\n/**\n * Configures the fields to bind to the properties of node in the TreeView component.\n */\nvar FieldsSettings = /** @class */ (function (_super) {\n    __extends(FieldsSettings, _super);\n    function FieldsSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('child')\n    ], FieldsSettings.prototype, \"child\", void 0);\n    __decorate([\n        Property([])\n    ], FieldsSettings.prototype, \"dataSource\", void 0);\n    __decorate([\n        Property('expanded')\n    ], FieldsSettings.prototype, \"expanded\", void 0);\n    __decorate([\n        Property('hasChildren')\n    ], FieldsSettings.prototype, \"hasChildren\", void 0);\n    __decorate([\n        Property('htmlAttributes')\n    ], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n    __decorate([\n        Property('iconCss')\n    ], FieldsSettings.prototype, \"iconCss\", void 0);\n    __decorate([\n        Property('id')\n    ], FieldsSettings.prototype, \"id\", void 0);\n    __decorate([\n        Property('imageUrl')\n    ], FieldsSettings.prototype, \"imageUrl\", void 0);\n    __decorate([\n        Property('isChecked')\n    ], FieldsSettings.prototype, \"isChecked\", void 0);\n    __decorate([\n        Property('parentID')\n    ], FieldsSettings.prototype, \"parentID\", void 0);\n    __decorate([\n        Property(null)\n    ], FieldsSettings.prototype, \"query\", void 0);\n    __decorate([\n        Property('selected')\n    ], FieldsSettings.prototype, \"selected\", void 0);\n    __decorate([\n        Property(null)\n    ], FieldsSettings.prototype, \"tableName\", void 0);\n    __decorate([\n        Property('text')\n    ], FieldsSettings.prototype, \"text\", void 0);\n    __decorate([\n        Property('tooltip')\n    ], FieldsSettings.prototype, \"tooltip\", void 0);\n    __decorate([\n        Property('navigateUrl')\n    ], FieldsSettings.prototype, \"navigateUrl\", void 0);\n    return FieldsSettings;\n}(ChildProperty));\nexport { FieldsSettings };\n/**\n * Configures animation settings for the TreeView component.\n */\nvar ActionSettings = /** @class */ (function (_super) {\n    __extends(ActionSettings, _super);\n    function ActionSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('SlideDown')\n    ], ActionSettings.prototype, \"effect\", void 0);\n    __decorate([\n        Property(400)\n    ], ActionSettings.prototype, \"duration\", void 0);\n    __decorate([\n        Property('linear')\n    ], ActionSettings.prototype, \"easing\", void 0);\n    return ActionSettings;\n}(ChildProperty));\nexport { ActionSettings };\n/**\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\n */\nvar NodeAnimationSettings = /** @class */ (function (_super) {\n    __extends(NodeAnimationSettings, _super);\n    function NodeAnimationSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Complex({ effect: 'SlideUp', duration: 400, easing: 'linear' }, ActionSettings)\n    ], NodeAnimationSettings.prototype, \"collapse\", void 0);\n    __decorate([\n        Complex({ effect: 'SlideDown', duration: 400, easing: 'linear' }, ActionSettings)\n    ], NodeAnimationSettings.prototype, \"expand\", void 0);\n    return NodeAnimationSettings;\n}(ChildProperty));\nexport { NodeAnimationSettings };\n/**\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\n * functions to perform edit, drag and drop, selection with check-box, and more.\n * ```html\n *  <div id=\"tree\"></div>\n * ```\n * ```typescript\n *  let treeObj: TreeView = new TreeView();\n *  treeObj.appendTo('#tree');\n * ```\n */\nvar TreeView = /** @class */ (function (_super) {\n    __extends(TreeView, _super);\n    function TreeView(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.isRefreshed = false;\n        _this.preventExpand = false;\n        _this.checkedElement = [];\n        _this.disableNode = [];\n        _this.validArr = [];\n        _this.expandChildren = [];\n        _this.isFieldChange = false;\n        _this.changeDataSource = false;\n        _this.isBlazorExpandedNodes = [];\n        _this.mouseDownStatus = false;\n        return _this;\n    }\n    TreeView_1 = TreeView;\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    TreeView.prototype.getModuleName = function () {\n        return 'treeview';\n    };\n    /**\n     * Initialize the event handler\n     */\n    TreeView.prototype.preRender = function () {\n        var _this = this;\n        this.isBlazorPlatform = (isBlazor() && this.isServerRendered);\n        this.checkActionNodes = [];\n        this.parentNodeCheck = [];\n        this.dragStartAction = false;\n        this.isAnimate = false;\n        this.keyConfigs = {\n            escape: 'escape',\n            end: 'end',\n            enter: 'enter',\n            f2: 'f2',\n            home: 'home',\n            moveDown: 'downarrow',\n            moveLeft: 'leftarrow',\n            moveRight: 'rightarrow',\n            moveUp: 'uparrow',\n            ctrlDown: 'ctrl+downarrow',\n            ctrlUp: 'ctrl+uparrow',\n            ctrlEnter: 'ctrl+enter',\n            ctrlHome: 'ctrl+home',\n            ctrlEnd: 'ctrl+end',\n            ctrlA: 'ctrl+A',\n            shiftDown: 'shift+downarrow',\n            shiftUp: 'shift+uparrow',\n            shiftEnter: 'shift+enter',\n            shiftHome: 'shift+home',\n            shiftEnd: 'shift+end',\n            csDown: 'ctrl+shift+downarrow',\n            csUp: 'ctrl+shift+uparrow',\n            csEnter: 'ctrl+shift+enter',\n            csHome: 'ctrl+shift+home',\n            csEnd: 'ctrl+shift+end',\n            space: 'space',\n        };\n        this.listBaseOption = {\n            expandCollapse: true,\n            showIcon: true,\n            expandIconClass: EXPANDABLE,\n            ariaAttributes: treeAriaAttr,\n            expandIconPosition: 'Left',\n            itemCreated: function (e) {\n                _this.beforeNodeCreate(e);\n            },\n            enableHtmlSanitizer: this.enableHtmlSanitizer,\n            itemNavigable: this.fullRowNavigable,\n        };\n        this.updateListProp(this.fields);\n        this.aniObj = new Animation({});\n        this.treeList = [];\n        this.isLoaded = false;\n        this.isInitalExpand = false;\n        this.expandChildren = [];\n        this.index = 0;\n        this.setTouchClass();\n        if (isNOU(this.selectedNodes)) {\n            this.setProperties({ selectedNodes: [] }, true);\n        }\n        if (isNOU(this.checkedNodes)) {\n            this.setProperties({ checkedNodes: [] }, true);\n        }\n        if (isNOU(this.expandedNodes)) {\n            this.setProperties({ expandedNodes: [] }, true);\n        }\n        else {\n            this.isInitalExpand = true;\n        }\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns string\n     * @hidden\n     */\n    TreeView.prototype.getPersistData = function () {\n        var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    TreeView.prototype.render = function () {\n        this.initialRender = true;\n        this.blazorInitialRender = false;\n        this.initialize();\n        this.setDataBinding(false);\n        this.setDisabledMode();\n        this.setExpandOnType();\n        if (!this.disabled) {\n            this.setRipple();\n        }\n        this.wireEditingEvents(this.allowEditing);\n        this.setDragAndDrop(this.allowDragAndDrop);\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        if (!this.isBlazorPlatform) {\n            this.initialRender = false;\n        }\n        this.renderComplete();\n    };\n    TreeView.prototype.initialize = function () {\n        if (!this.isBlazorPlatform) {\n            this.element.setAttribute('role', 'tree');\n            this.element.setAttribute('tabindex', '0');\n            this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n            this.setCssClass(null, this.cssClass);\n            this.setEnableRtl();\n            this.setFullRow(this.fullRowSelect);\n        }\n        this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n    };\n    TreeView.prototype.setDisabledMode = function () {\n        if (this.disabled) {\n            this.element.classList.add(DISABLED);\n        }\n        else {\n            this.element.classList.remove(DISABLED);\n        }\n    };\n    TreeView.prototype.setEnableRtl = function () {\n        this.enableRtl ? addClass([this.element], RTL) : removeClass([this.element], RTL);\n    };\n    TreeView.prototype.setRipple = function () {\n        var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n        var rippleModel = {\n            selector: tempStr,\n            ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n        };\n        this.rippleFn = rippleEffect(this.element, rippleModel);\n        var iconModel = {\n            selector: '.' + TEXTWRAP + ' > .' + ICON,\n            isCenterRipple: true,\n        };\n        this.rippleIconFn = rippleEffect(this.element, iconModel);\n    };\n    TreeView.prototype.setFullRow = function (isEnabled) {\n        isEnabled ? addClass([this.element], FULLROWWRAP) : removeClass([this.element], FULLROWWRAP);\n    };\n    TreeView.prototype.setMultiSelect = function (isEnabled) {\n        var firstUl = select('.' + PARENTITEM, this.element);\n        if (isEnabled) {\n            firstUl.setAttribute('aria-multiselectable', 'true');\n        }\n        else {\n            firstUl.removeAttribute('aria-multiselectable');\n        }\n    };\n    TreeView.prototype.templateComplier = function (template) {\n        if (template) {\n            var e = void 0;\n            this.element.classList.add(INTERACTION);\n            try {\n                if (document.querySelectorAll(template).length) {\n                    return compile(document.querySelector(template).innerHTML.trim());\n                }\n            }\n            catch (e) {\n                return compile(template);\n            }\n        }\n        this.element.classList.remove(INTERACTION);\n        return undefined;\n    };\n    TreeView.prototype.setDataBinding = function (changeDataSource) {\n        var _this = this;\n        this.treeList.push('false');\n        if (this.fields.dataSource instanceof DataManager) {\n            // tslint:disable\n            this.isOffline = (this.isBlazorPlatform ? this.fields.dataSource.offline :\n                this.fields.dataSource.dataSource.offline);\n            if (this.fields.dataSource.ready) {\n                this.fields.dataSource.ready.then(function (e) {\n                    // tslint:disable\n                    _this.isOffline = (_this.isBlazorPlatform ? _this.fields.dataSource.offline :\n                        _this.fields.dataSource.dataSource.offline);\n                    if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {\n                        _this.treeList.pop();\n                        _this.treeData = e.result;\n                        _this.isNumberTypeId = _this.getType();\n                        _this.setRootData();\n                        _this.renderItems(true);\n                        if (_this.treeList.length === 0 && !_this.isLoaded) {\n                            _this.finalize();\n                        }\n                    }\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n            else {\n                this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {\n                    _this.treeList.pop();\n                    _this.treeData = e.result;\n                    _this.isNumberTypeId = _this.getType();\n                    _this.setRootData();\n                    if (changeDataSource) {\n                        _this.changeDataSource = true;\n                    }\n                    _this.renderItems(true);\n                    _this.changeDataSource = false;\n                    if (_this.treeList.length === 0 && !_this.isLoaded) {\n                        _this.finalize();\n                    }\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n        }\n        else {\n            this.treeList.pop();\n            if (isNOU(this.fields.dataSource)) {\n                this.rootData = this.treeData = [];\n            }\n            else {\n                this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n                this.setRootData();\n            }\n            this.isNumberTypeId = this.getType();\n            this.renderItems(false);\n        }\n        if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n        }\n    };\n    TreeView.prototype.getQuery = function (mapper, value) {\n        if (value === void 0) { value = null; }\n        var columns = [];\n        var query;\n        if (!mapper.query) {\n            query = new Query();\n            var prop = this.getActualProperties(mapper);\n            for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {\n                var col = _a[_i];\n                if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col]\n                    && col !== 'url' && columns.indexOf(mapper[col]) === -1) {\n                    columns.push(mapper[col]);\n                }\n            }\n            query.select(columns);\n            if (prop.hasOwnProperty('tableName')) {\n                query.from(mapper.tableName);\n            }\n        }\n        else {\n            query = mapper.query.clone();\n        }\n        ListBase.addSorting(this.sortOrder, mapper.text, query);\n        if (!isNOU(value) && !isNOU(mapper.parentID)) {\n            query.where(mapper.parentID, 'equal', (this.isNumberTypeId ? parseFloat(value) : value));\n        }\n        return query;\n    };\n    TreeView.prototype.getType = function () {\n        return this.treeData[0] ? ((typeof getValue(this.fields.id, this.treeData[0]) === 'number') ? true : false) : false;\n    };\n    TreeView.prototype.setRootData = function () {\n        this.dataType = this.getDataType(this.treeData, this.fields);\n        if (this.dataType === 1) {\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n            var rootItems = this.getChildNodes(this.treeData, undefined, true);\n            if (isNOU(rootItems)) {\n                this.rootData = [];\n            }\n            else {\n                this.rootData = rootItems;\n            }\n        }\n        else {\n            this.rootData = this.treeData;\n        }\n    };\n    TreeView.prototype.renderItems = function (isSorted) {\n        // tslint:disable\n        if (!this.isBlazorPlatform || (this.isBlazorPlatform && this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) || this.changeDataSource) {\n            this.listBaseOption.ariaAttributes.level = 1;\n            var sortedData = this.getSortedData(this.rootData);\n            this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);\n            this.element.appendChild(this.ulElement);\n            var rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n            if (this.loadOnDemand === false) {\n                var i = 0;\n                while (i < rootNodes.length) {\n                    this.renderChildNodes(rootNodes[i], true, null, true);\n                    i++;\n                }\n            }\n            var parentEle = selectAll('.' + PARENTITEM, this.element);\n            if ((parentEle.length === 1 && (rootNodes && rootNodes.length !== 0)) || this.loadOnDemand) {\n                this.finalizeNode(this.element);\n            }\n        }\n        this.updateTemplateForBlazor();\n        this.parentNodeCheck = [];\n        this.parentCheckData = [];\n        this.updateCheckedStateFromDS();\n        if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n            this.updateParentCheckState();\n        }\n    };\n    TreeView.prototype.updateTemplateForBlazor = function () {\n        if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n            this.updateBlazorTemplate();\n        }\n    };\n    /**\n     * Update the checkedNodes from datasource at initial rendering\n     */\n    TreeView.prototype.updateCheckedStateFromDS = function (id) {\n        if (this.treeData && this.showCheckBox) {\n            if (this.dataType === 1) {\n                var mapper = this.fields;\n                var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n                for (var i = 0; i < resultData.length; i++) {\n                    var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n                    var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\n                    if (this.checkedNodes.indexOf(resultId) === -1 && !(this.isLoaded)) {\n                        this.checkedNodes.push(resultId);\n                    }\n                    if (resultData[i][this.fields.hasChildren]) {\n                        var id_1 = resultData[i][this.fields.id];\n                        var childData = new DataManager(this.treeData).\n                            executeLocal(new Query().where(mapper.parentID, 'equal', id_1, false));\n                        for (var child = 0; child < childData.length; child++) {\n                            var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\n                            if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                                this.checkedNodes.push(childId);\n                            }\n                        }\n                    }\n                }\n                for (var i = 0; i < this.checkedNodes.length; i++) {\n                    var mapper_1 = this.fields;\n                    var checkState = new DataManager(this.treeData).\n                        executeLocal(new Query().where(mapper_1.id, 'equal', this.checkedNodes[i], true));\n                    if (checkState[0] && this.autoCheck) {\n                        this.getCheckedNodeDetails(mapper_1, checkState);\n                        this.checkIndeterminateState(checkState[0]);\n                    }\n                    var checkedData = new DataManager(this.treeData).\n                        executeLocal(new Query().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));\n                    for (var index = 0; index < checkedData.length; index++) {\n                        var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n                            this.checkedNodes.push(checkedId);\n                        }\n                    }\n                }\n            }\n            else if (this.dataType === 2 || (this.fields.dataSource instanceof DataManager &&\n                this.isOffline)) {\n                for (var index = 0; index < this.treeData.length; index++) {\n                    var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\n                    if (this.treeData[index][this.fields.isChecked] && !(this.isLoaded) && this.checkedNodes.indexOf(fieldId) === -1) {\n                        this.checkedNodes.push(fieldId);\n                    }\n                    var childItems = getValue(this.fields.child.toString(), this.treeData[index]);\n                    if (childItems) {\n                        this.updateChildCheckState(childItems, this.treeData[index]);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * To check whether the list data has sub child and to change the parent check state accordingly\n     */\n    TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {\n        var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n        var count = 0;\n        var element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n        var parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n        if (!element && !parentEle) {\n            var len = this.parentNodeCheck.length;\n            if (this.parentNodeCheck.indexOf(id) === -1) {\n                this.parentNodeCheck.push(id);\n            }\n            var childNodes = this.getChildNodes(this.treeData, id);\n            for (var i = 0; i < childNodes.length; i++) {\n                var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                if (this.checkedNodes.indexOf(childId) !== -1) {\n                    count++;\n                }\n                if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n                    this.checkedNodes.push(id);\n                }\n            }\n            var preElement = new DataManager(this.treeData).\n                executeLocal(new Query().where(mapper.id, 'equal', id, true));\n            this.getCheckedNodeDetails(mapper, preElement);\n        }\n        else if (parentEle) {\n            var check = select('.' + CHECK, parentEle);\n            if (!check) {\n                this.changeState(parentEle, 'indeterminate', null, true, true);\n            }\n        }\n    };\n    /**\n     * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\n     */\n    TreeView.prototype.updateParentCheckState = function () {\n        var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n        var childCheckedElement;\n        for (var i = 0; i < indeterminate.length; i++) {\n            var node = closest(indeterminate[i], '.' + LISTITEM);\n            var nodeId = node.getAttribute('data-uid').toString();\n            if (this.dataType === 1) {\n                childCheckedElement = new DataManager(this.treeData).\n                    executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\n            }\n            else {\n                childCheckedElement = this.getChildNodes(this.treeData, nodeId);\n            }\n            var count = 0;\n            if (childCheckedElement) {\n                for (var j = 0; j < childCheckedElement.length; j++) {\n                    var childId = childCheckedElement[j][this.fields.id].toString();\n                    if (this.checkedNodes.indexOf(childId) !== -1) {\n                        count++;\n                    }\n                }\n                if (count === childCheckedElement.length) {\n                    var nodeCheck = node.getAttribute('data-uid');\n                    if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n                        this.checkedNodes.push(nodeCheck);\n                    }\n                    this.changeState(node, 'check', null, true, true);\n                }\n                else if (count === 0 && this.checkedNodes.length === 0) {\n                    this.changeState(node, 'uncheck', null, true, true);\n                }\n            }\n        }\n    };\n    /**\n     * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\n     */\n    TreeView.prototype.checkIndeterminateState = function (data) {\n        var element;\n        if (this.dataType === 1) {\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n        }\n        else {\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n        }\n        if (element) {\n            var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\n            if (ariaChecked !== 'true') {\n                this.changeState(element, 'indeterminate', null, true, true);\n            }\n        }\n        else if (this.dataType === 2) {\n            var len = this.parentNodeCheck.length;\n            if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n                this.parentNodeCheck.push(data[this.fields.id].toString());\n            }\n        }\n    };\n    /**\n     * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\n     */\n    TreeView.prototype.updateChildCheckState = function (childItems, treeData) {\n        var count = 0;\n        var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n        for (var index = 0; index < childItems.length; index++) {\n            var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n            if (childItems[index][this.fields.isChecked] && !(this.isLoaded) && this.checkedNodes.indexOf(checkedChild) === -1) {\n                this.checkedNodes.push(checkedChild);\n            }\n            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n                this.checkedNodes.push(checkedChild);\n            }\n            if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n                count++;\n            }\n            var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n            if (subChildItems) {\n                this.parentCheckData.push(treeData);\n                this.updateChildCheckState(subChildItems, childItems[index]);\n            }\n            if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n                this.checkedNodes.push(checkedParent);\n            }\n        }\n        if (count !== 0 && this.autoCheck) {\n            this.checkIndeterminateState(treeData);\n            for (var len = 0; len < this.parentCheckData.length; len++) {\n                if ((treeData !== this.parentCheckData[len]) && (this.parentCheckData[len])) {\n                    this.checkIndeterminateState(this.parentCheckData[len]);\n                }\n            }\n        }\n        this.parentCheckData = [];\n    };\n    TreeView.prototype.beforeNodeCreate = function (e) {\n        if (this.showCheckBox) {\n            var checkboxEle = createCheckBox(this.createElement, true, { cssClass: this.touchClass });\n            checkboxEle.setAttribute('role', 'checkbox');\n            var icon = select('div.' + ICON, e.item);\n            var id = e.item.getAttribute('data-uid');\n            e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNOU(icon) ? 0 : 1]);\n            var checkValue = getValue(e.fields.isChecked, e.curData);\n            if (this.checkedNodes.indexOf(id) > -1) {\n                select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n                checkboxEle.setAttribute('aria-checked', 'true');\n                this.addCheck(e.item);\n            }\n            else if (!isNOU(checkValue) && checkValue.toString() === 'true') {\n                select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n                checkboxEle.setAttribute('aria-checked', 'true');\n                this.addCheck(e.item);\n            }\n            else {\n                checkboxEle.setAttribute('aria-checked', 'false');\n            }\n            var frame = select('.' + CHECKBOXFRAME, checkboxEle);\n            EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n            EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n        }\n        if (this.fullRowSelect) {\n            this.createFullRow(e.item);\n        }\n        if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {\n            e.item.setAttribute('aria-selected', 'false');\n        }\n        var fields = e.fields;\n        this.addActionClass(e, fields.selected, SELECTED);\n        this.addActionClass(e, fields.expanded, EXPANDED);\n        if (!isNOU(this.nodeTemplateFn)) {\n            var textEle = e.item.querySelector('.' + LISTTEXT);\n            var dataId = e.item.getAttribute('data-uid');\n            textEle.innerHTML = '';\n            this.renderNodeTemplate(e.curData, textEle, dataId);\n        }\n        var eventArgs = {\n            node: e.item,\n            nodeData: e.curData,\n            text: e.text,\n        };\n        if (!this.isRefreshed) {\n            this.trigger('drawNode', eventArgs);\n        }\n    };\n    TreeView.prototype.frameMouseHandler = function (e) {\n        var rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\n        rippleMouseHandler(e, rippleSpan);\n    };\n    TreeView.prototype.addActionClass = function (e, action, cssClass) {\n        var data = e.curData;\n        var actionValue = getValue(action, data);\n        if (!isNOU(actionValue) && actionValue.toString() !== 'false') {\n            e.item.classList.add(cssClass);\n        }\n    };\n    TreeView.prototype.getDataType = function (ds, mapper) {\n        if (this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n            for (var i = 0; i < ds.length; i++) {\n                if (this.isOffline) {\n                    if ((typeof mapper.child === 'string') && isNOU(getValue(mapper.child, ds[i])) && !isNOU(getValue(mapper.parentID, ds[i]))) {\n                        return 1;\n                    }\n                }\n                else if ((typeof mapper.child === 'string') && isNOU(getValue(mapper.child, ds[i]))) {\n                    return 1;\n                }\n            }\n            return 2;\n        }\n        for (var i = 0, len = ds.length; i < len; i++) {\n            if ((typeof mapper.child === 'string') && !isNOU(getValue(mapper.child, ds[i]))) {\n                return 2;\n            }\n            if (!isNOU(getValue(mapper.parentID, ds[i])) || !isNOU(getValue(mapper.hasChildren, ds[i]))) {\n                return 1;\n            }\n        }\n        return 1;\n    };\n    TreeView.prototype.getGroupedData = function (dataSource, groupBy) {\n        var cusQuery = new Query().group(groupBy);\n        var ds = ListBase.getDataSource(dataSource, cusQuery);\n        var grpItem = [];\n        for (var j = 0; j < ds.length; j++) {\n            var itemObj = ds[j].items;\n            grpItem.push(itemObj);\n        }\n        return grpItem;\n    };\n    TreeView.prototype.getSortedData = function (list) {\n        if (list && this.sortOrder !== 'None') {\n            list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\n        }\n        return list;\n    };\n    TreeView.prototype.finalizeNode = function (element) {\n        var iNodes = selectAll('.' + IMAGE, element);\n        for (var k = 0; k < iNodes.length; k++) {\n            iNodes[k].setAttribute('alt', IMAGE);\n        }\n        if (this.isLoaded) {\n            var sNodes = selectAll('.' + SELECTED, element);\n            for (var i = 0; i < sNodes.length; i++) {\n                this.selectNode(sNodes[i], null);\n                break;\n            }\n            removeClass(sNodes, SELECTED);\n        }\n        var cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n        for (var j = 0; j < cNodes.length; j++) {\n            var icon = select('div.' + ICON, cNodes[j]);\n            if (icon && icon.classList.contains(EXPANDABLE)) {\n                this.disableExpandAttr(cNodes[j]);\n            }\n        }\n        var eNodes = selectAll('.' + EXPANDED, element);\n        if (!this.isInitalExpand) {\n            for (var i = 0; i < eNodes.length; i++) {\n                this.renderChildNodes(eNodes[i]);\n            }\n        }\n        removeClass(eNodes, EXPANDED);\n        this.updateList();\n        if (this.isLoaded) {\n            this.updateCheckedProp();\n        }\n    };\n    TreeView.prototype.updateCheckedProp = function () {\n        if (this.showCheckBox) {\n            var nodes = [].concat([], this.checkedNodes);\n            this.setProperties({ checkedNodes: nodes }, true);\n        }\n    };\n    TreeView.prototype.ensureIndeterminate = function () {\n        if (this.autoCheck) {\n            var liElement = selectAll('li', this.element);\n            var ulElement = void 0;\n            for (var i = 0; i < liElement.length; i++) {\n                if (liElement[i].classList.contains(LISTITEM)) {\n                    ulElement = select('.' + PARENTITEM, liElement[i]);\n                    if (ulElement) {\n                        this.ensureParentCheckState(liElement[i]);\n                    }\n                    else {\n                        this.ensureChildCheckState(liElement[i]);\n                    }\n                }\n            }\n        }\n        else {\n            var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n            for (var i = 0; i < indeterminate.length; i++) {\n                indeterminate[i].classList.remove(INDETERMINATE);\n            }\n        }\n    };\n    TreeView.prototype.ensureParentCheckState = function (element) {\n        if (!isNOU(element)) {\n            if (element.classList.contains(ROOT)) {\n                return;\n            }\n            var ulElement = element;\n            if (element.classList.contains(LISTITEM)) {\n                ulElement = select('.' + PARENTITEM, element);\n            }\n            var checkedNodes = selectAll('.' + CHECK, ulElement);\n            var indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\n            var nodes = selectAll('.' + LISTITEM, ulElement);\n            var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n            if (nodes.length === checkedNodes.length) {\n                this.changeState(checkBoxEle, 'check', null, true, true);\n            }\n            else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\n                this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n            }\n            else if (checkedNodes.length === 0) {\n                this.changeState(checkBoxEle, 'uncheck', null, true, true);\n            }\n            var parentUL = closest(element, '.' + PARENTITEM);\n            if (!isNOU(parentUL)) {\n                var currentParent = closest(parentUL, '.' + LISTITEM);\n                this.ensureParentCheckState(currentParent);\n            }\n        }\n    };\n    TreeView.prototype.ensureChildCheckState = function (element, e) {\n        if (!isNOU(element)) {\n            var childElement = select('.' + PARENTITEM, element);\n            var checkBoxes = void 0;\n            if (!isNOU(childElement)) {\n                checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\n                var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n                var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n                var childCheck = childElement.querySelectorAll('li');\n                var expandState = childElement.parentElement.getAttribute('aria-expanded');\n                var checkedState = void 0;\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    var childId = childCheck[index].getAttribute('data-uid');\n                    if (!isNOU(this.currentLoadData) && !isNOU(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\n                        checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\n                        if (this.ele !== -1) {\n                            checkedState = isChecked ? 'check' : 'uncheck';\n                        }\n                        if ((checkedState === 'uncheck') && (!isUndefined(this.parentNodeCheck) && this.autoCheck\n                            && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                            checkedState = 'indeterminate';\n                        }\n                    }\n                    else {\n                        var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n                        if (isChecked) {\n                            checkedState = 'check';\n                        }\n                        else if (isNodeChecked && !this.isLoaded) {\n                            checkedState = 'check';\n                        }\n                        else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n                            checkedState = 'check';\n                        }\n                        else if (childCheck[index].classList.contains(CHILD) && (!isUndefined(this.parentNodeCheck) && this.autoCheck\n                            && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            checkedState = 'indeterminate';\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                        }\n                        else if (this.dataType === 1 && (!isUndefined(this.parentNodeCheck) && this.autoCheck &&\n                            (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            checkedState = 'indeterminate';\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                        }\n                        else {\n                            checkedState = 'uncheck';\n                        }\n                    }\n                    this.changeState(checkBoxes[index], checkedState, e, true, true);\n                }\n            }\n            if (this.autoCheck && this.isLoaded) {\n                this.updateParentCheckState();\n            }\n        }\n    };\n    TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {\n        var li = selectAll('.' + LISTITEM, this.element);\n        if (!isNOU(nodes)) {\n            for (var len = nodes.length; len >= 0; len--) {\n                var liEle = void 0;\n                if (nodes.length === 1) {\n                    liEle = this.getElement(nodes[len - 1]);\n                }\n                else {\n                    liEle = this.getElement(nodes[len]);\n                }\n                if (isNOU(liEle)) {\n                    var node = void 0;\n                    node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\n                    if (node !== '' && doCheck && node) {\n                        this.setValidCheckedNode(node);\n                        this.dynamicCheckState(node, doCheck);\n                    }\n                    else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n                        var childItems = this.getChildNodes(this.treeData, node);\n                        if (childItems) {\n                            for (var i = 0; i < childItems.length; i++) {\n                                var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n                                if (this.checkedNodes.indexOf(id) !== -1) {\n                                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                                }\n                            }\n                            if (this.parentNodeCheck.indexOf(node) !== -1) {\n                                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n                            }\n                        }\n                        if (node) {\n                            this.dynamicCheckState(node, doCheck);\n                        }\n                        this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n                    }\n                    continue;\n                }\n                var checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n                this.validateCheckNode(checkBox, !doCheck, liEle, null);\n            }\n        }\n        else {\n            var checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\n            if (this.loadOnDemand) {\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    this.updateFieldChecked(checkBoxes[index], doCheck);\n                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n                }\n            }\n            else {\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    this.updateFieldChecked(checkBoxes[index], doCheck);\n                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\n                }\n            }\n        }\n        if (nodes) {\n            for (var j = 0; j < nodes.length; j++) {\n                var node = nodes[j] ? nodes[j].toString() : '';\n                if (!doCheck) {\n                    this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n                }\n            }\n        }\n        if (this.autoCheck) {\n            this.updateParentCheckState();\n        }\n    };\n    TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {\n        var currLi = closest(checkbox, '.' + LISTITEM);\n        var id = currLi.getAttribute('data-uid');\n        var nodeDetails = this.getNodeData(currLi);\n        if (nodeDetails.isChecked === 'true' && !doCheck) {\n            this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n    };\n    /**\n     * Changes the parent and child  check state while changing the checkedNodes via setmodel\n     */\n    TreeView.prototype.dynamicCheckState = function (node, doCheck) {\n        if (this.dataType === 1) {\n            var count = 0;\n            var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\n            if (resultId[0]) {\n                var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n                var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n                var parentElement = this.element.querySelector('[data-uid=\"' + parent_1 + '\"]');\n                var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n                var check = parentElement ? select('.' + CHECK, parentElement) : null;\n                var element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                var childNodes = this.getChildNodes(this.treeData, parent_1);\n                if (childNodes) {\n                    for (var i = 0; i < childNodes.length; i++) {\n                        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\n                            count++;\n                        }\n                    }\n                }\n                if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (id === node) && this.autoCheck) {\n                    this.changeState(parentElement, 'indeterminate', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && element && (id === node) && !doCheck) {\n                    this.changeState(element, 'uncheck', null);\n                }\n                else if (this.checkedNodes.indexOf(node) !== -1 && element && (id === node) && doCheck) {\n                    this.changeState(element, 'check', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\n                    && count !== 0) {\n                    this.changeState(parentElement, 'indeterminate', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\n                    && count === 0) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                else if (!element && !parentElement && (id === node) && this.autoCheck) {\n                    this.updateIndeterminate(node, doCheck);\n                }\n            }\n        }\n        else if (this.dataType === 2 || (this.fields.dataSource instanceof DataManager &&\n            this.isOffline)) {\n            var id = void 0;\n            var parentElement = void 0;\n            var check = void 0;\n            for (var i = 0; i < this.treeData.length; i++) {\n                id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\n                parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                check = parentElement ? select('.' + CHECK, parentElement) : null;\n                if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                var subChild = getValue(this.fields.child.toString(), this.treeData[i]);\n                if (subChild) {\n                    this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n                }\n            }\n        }\n    };\n    /**\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\n     */\n    TreeView.prototype.updateIndeterminate = function (node, doCheck) {\n        var indeterminateData = this.getTreeData(node);\n        var count = 0;\n        var parent;\n        if (this.dataType === 1) {\n            parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n        }\n        var childNodes = this.getChildNodes(this.treeData, parent);\n        if (childNodes) {\n            for (var i = 0; i < childNodes.length; i++) {\n                var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                if (this.checkedNodes.indexOf(childId) !== -1) {\n                    count++;\n                }\n            }\n        }\n        var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n        if (parentElement && doCheck) {\n            this.changeState(parentElement, 'indeterminate', null);\n        }\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n        }\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n            this.changeState(parentElement, 'uncheck', null);\n        }\n        else if (!parentElement) {\n            if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n            }\n            else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n                this.parentNodeCheck.push(parent);\n            }\n            else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1\n                && count !== 0) {\n                this.parentNodeCheck.push(parent);\n            }\n            this.updateIndeterminate(parent, doCheck);\n            if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n                this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n            }\n        }\n    };\n    /**\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\n     */\n    TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {\n        var count = 0;\n        for (var j = 0; j < subChild.length; j++) {\n            var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\n            if (this.checkedNodes.indexOf(subId) !== -1) {\n                count++;\n            }\n            var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n            var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n            var check = parentElement ? select('.' + CHECK, parentElement) : null;\n            var element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n            var childElementCheck = element ? select('.' + CHECK, element) : null;\n            if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (subId === node) && this.autoCheck) {\n                this.changeState(parentElement, 'indeterminate', null);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && (subId === node) && !doCheck) {\n                if (this.autoCheck) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                else {\n                    if (count !== 0) {\n                        this.changeState(parentElement, 'indeterminate', null);\n                    }\n                    else {\n                        this.changeState(parentElement, 'uncheck', null);\n                    }\n                }\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && element && (subId === node) && !doCheck) {\n                this.changeState(element, 'uncheck', null);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && (subId === node) && this.autoCheck && count === 0\n                && !doCheck) {\n                indeterminate.classList.remove(INDETERMINATE);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && !element && check && (subId === node) && count === 0) {\n                this.changeState(parentElement, 'uncheck', null);\n            }\n            else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n                this.changeState(element, 'uncheck', null);\n            }\n            else if (!element && !parentElement && (subId === node) || (this.parentNodeCheck.indexOf(parent) !== -1) && this.autoCheck) {\n                var childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n                if (doCheck && count !== 0) {\n                    this.changeState(childElement, 'indeterminate', null);\n                }\n                else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n                    this.checkedNodes.push(parent);\n                }\n                else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n                    this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n                }\n                if (this.parentNodeCheck.indexOf(parent) === -1) {\n                    this.parentNodeCheck.push(parent);\n                }\n            }\n            var innerChild = getValue(this.fields.child.toString(), subChild[j]);\n            if (innerChild) {\n                this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n            }\n        }\n    };\n    TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {\n        var _this = this;\n        var eventArgs;\n        var currLi = closest(wrapper, '.' + LISTITEM);\n        if (!isPrevent) {\n            this.checkActionNodes = [];\n            eventArgs = this.getCheckEvent(currLi, state, e);\n            this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n                }\n            });\n        }\n        else {\n            this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n        }\n    };\n    TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n        var ariaState;\n        var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n        if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK);\n            this.addCheck(currLi);\n            ariaState = 'true';\n        }\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n            removeClass([frameSpan], [CHECK, INDETERMINATE]);\n            this.removeCheck(currLi);\n            ariaState = 'false';\n        }\n        else if (state === 'indeterminate' && this.autoCheck) {\n            frameSpan.classList.remove(CHECK);\n            frameSpan.classList.add(INDETERMINATE);\n            this.removeCheck(currLi);\n            ariaState = 'mixed';\n        }\n        ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n        if (!isNOU(ariaState)) {\n            wrapper.setAttribute('aria-checked', ariaState);\n        }\n        if (isAdd) {\n            var data = [].concat([], this.checkActionNodes);\n            eventArgs = this.getCheckEvent(currLi, state, e);\n            if (isUndefined(isPrevent)) {\n                eventArgs.data = data;\n            }\n        }\n        if (doCheck !== undefined) {\n            this.ensureStateChange(currLi, doCheck);\n        }\n        if (!isPrevent) {\n            if (!isNOU(ariaState)) {\n                wrapper.setAttribute('aria-checked', ariaState);\n                this.allowServerDataBinding = true;\n                this.updateServerProperties(\"check\");\n                this.allowServerDataBinding = false;\n                eventArgs.data[0].checked = ariaState;\n                this.trigger('nodeChecked', eventArgs);\n                this.checkActionNodes = [];\n            }\n        }\n    };\n    TreeView.prototype.addCheck = function (liEle) {\n        var id = liEle.getAttribute('data-uid');\n        if (!isNOU(id) && this.checkedNodes.indexOf(id) === -1) {\n            this.checkedNodes.push(id);\n        }\n    };\n    TreeView.prototype.removeCheck = function (liEle) {\n        var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.checkedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.getCheckEvent = function (currLi, action, e) {\n        this.checkActionNodes.push(this.getNodeData(currLi));\n        var nodeData = this.checkActionNodes;\n        return { action: action, cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, data: nodeData };\n    };\n    TreeView.prototype.finalize = function () {\n        var firstUl = select('.' + PARENTITEM, this.element);\n        if (!isNullOrUndefined(firstUl)) {\n            firstUl.setAttribute('role', treeAriaAttr.treeRole);\n            this.setMultiSelect(this.allowMultiSelection);\n            var firstNode = select('.' + LISTITEM, this.element);\n            if (firstNode) {\n                addClass([firstNode], FOCUS);\n                this.updateIdAttr(null, firstNode);\n            }\n            this.renderReactTemplates();\n            this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\n            this.doExpandAction();\n        }\n    };\n    TreeView.prototype.doExpandAction = function () {\n        var eUids = this.expandedNodes;\n        if (this.isInitalExpand && eUids.length > 0) {\n            this.setProperties({ expandedNodes: [] }, true);\n            if (this.isBlazorPlatform && !this.initialRender) {\n                return;\n            }\n            // tslint:disable\n            if (this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n                this.expandGivenNodes(eUids);\n            }\n            else {\n                for (var i = 0; i < eUids.length; i++) {\n                    var eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\n                    if (!isNOU(eNode)) {\n                        var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n                        if (!isNOU(icon)) {\n                            this.expandAction(eNode, icon, null);\n                        }\n                    }\n                    else {\n                        if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\n                            this.expandChildren.push(eUids[i].toString());\n                        }\n                        continue;\n                    }\n                }\n                this.afterFinalized();\n            }\n        }\n        else {\n            this.afterFinalized();\n        }\n    };\n    TreeView.prototype.expandGivenNodes = function (arr) {\n        var proxy = this;\n        this.expandCallback(arr[this.index], function () {\n            proxy.index++;\n            if (proxy.index < arr.length) {\n                proxy.expandGivenNodes(arr);\n            }\n            else {\n                proxy.afterFinalized();\n            }\n        });\n    };\n    TreeView.prototype.expandCallback = function (eUid, callback) {\n        var eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\n        if (!isNOU(eNode)) {\n            var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n            if (!isNOU(icon)) {\n                this.expandAction(eNode, icon, null, false, callback);\n            }\n            else {\n                callback();\n            }\n        }\n        else {\n            callback();\n        }\n    };\n    TreeView.prototype.afterFinalized = function () {\n        if (!this.isBlazorPlatform || (this.isBlazorPlatform && !this.initialRender)) {\n            this.doSelectionAction();\n        }\n        this.updateCheckedProp();\n        if (this.isBlazorPlatform) {\n            if (this.initialRender) {\n                this.setCheckedNodes(this.checkedNodes);\n            }\n            this.updateInstance();\n            this.initialRender = false;\n        }\n        this.isAnimate = true;\n        this.isInitalExpand = false;\n        if (!this.isLoaded || this.isFieldChange) {\n            var eventArgs = { data: this.treeData };\n            this.trigger('dataBound', eventArgs);\n        }\n        this.isLoaded = true;\n    };\n    TreeView.prototype.doSelectionAction = function () {\n        var sNodes = selectAll('.' + SELECTED, this.element);\n        var sUids = this.selectedNodes;\n        if (sUids.length > 0) {\n            this.setProperties({ selectedNodes: [] }, true);\n            for (var i = 0; i < sUids.length; i++) {\n                var sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\n                if (sNode && !(sNode.classList.contains('e-active'))) {\n                    this.selectNode(sNode, null, true);\n                }\n                else {\n                    this.selectedNodes.push(sUids[i]);\n                }\n                if (!this.allowMultiSelection) {\n                    break;\n                }\n            }\n        }\n        else {\n            this.selectGivenNodes(sNodes);\n        }\n        removeClass(sNodes, SELECTED);\n    };\n    TreeView.prototype.selectGivenNodes = function (sNodes) {\n        for (var i = 0; i < sNodes.length; i++) {\n            if (!sNodes[i].classList.contains('e-disable')) {\n                this.selectNode(sNodes[i], null, true);\n            }\n            if (!this.allowMultiSelection) {\n                break;\n            }\n        }\n    };\n    TreeView.prototype.clickHandler = function (event) {\n        var target = event.originalEvent.target;\n        EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n        if (!target || this.dragStartAction) {\n            return;\n        }\n        else {\n            var classList = target.classList;\n            var li = closest(target, '.' + LISTITEM);\n            if (!li) {\n                return;\n            }\n            else if (event.originalEvent.which !== 3) {\n                var rippleElement = select('.' + RIPPLEELMENT, li);\n                var rippleIcons = select('.' + ICON, li);\n                this.removeHover();\n                this.setFocusElement(li);\n                if (this.showCheckBox && !li.classList.contains('e-disable')) {\n                    var checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n                    if (!isNOU(checkWrapper)) {\n                        var checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\n                        this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n                        this.triggerClickEvent(event.originalEvent, li);\n                        return;\n                    }\n                }\n                if (classList.contains(EXPANDABLE)) {\n                    this.expandAction(li, target, event);\n                }\n                else if (classList.contains(COLLAPSIBLE)) {\n                    this.collapseNode(li, target, event);\n                }\n                else if (rippleElement && rippleIcons) {\n                    if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n                        this.expandAction(li, rippleIcons, event);\n                    }\n                    else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n                        this.collapseNode(li, rippleIcons, event);\n                    }\n                    else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n                        this.toggleSelect(li, event.originalEvent, false);\n                    }\n                }\n                else {\n                    if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n                        this.toggleSelect(li, event.originalEvent, false);\n                    }\n                }\n            }\n            this.triggerClickEvent(event.originalEvent, li);\n        }\n    };\n    TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {\n        var currLi = closest(wrapper, '.' + LISTITEM);\n        var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n        eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n        this.trigger('nodeChecked', eventArgs);\n    };\n    TreeView.prototype.triggerClickEvent = function (e, li) {\n        var eventArgs = {\n            event: e,\n            node: li,\n        };\n        this.trigger('nodeClicked', eventArgs);\n    };\n    TreeView.prototype.expandNode = function (currLi, icon, loaded) {\n        var _this = this;\n        this.renderReactTemplates();\n        if (icon.classList.contains(LOAD)) {\n            this.hideSpinner(icon);\n        }\n        if (!this.initialRender) {\n            icon.classList.add('interaction');\n        }\n        if (loaded !== true || (loaded === true && currLi.classList.contains('e-expanded'))) {\n            if (this.preventExpand !== true) {\n                removeClass([icon], EXPANDABLE);\n                addClass([icon], COLLAPSIBLE);\n                var start_1 = 0;\n                var end_1 = 0;\n                var proxy_1 = this;\n                var ul_1 = select('.' + PARENTITEM, currLi);\n                var liEle_1 = currLi;\n                this.setHeight(liEle_1, ul_1);\n                var activeElement_1 = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n                if (this.isAnimate && !this.isRefreshed) {\n                    this.aniObj.animate(ul_1, {\n                        name: this.animation.expand.effect,\n                        duration: this.animation.expand.duration,\n                        timingFunction: this.animation.expand.easing,\n                        begin: function (args) {\n                            liEle_1.style.overflow = 'hidden';\n                            if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);\n                            }\n                            start_1 = liEle_1.offsetHeight;\n                            end_1 = select('.' + TEXTWRAP, currLi).offsetHeight;\n                        },\n                        progress: function (args) {\n                            args.element.style.display = 'block';\n                            proxy_1.animateHeight(args, start_1, end_1);\n                        },\n                        end: function (args) {\n                            args.element.style.display = 'block';\n                            if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);\n                            }\n                            _this.expandedNode(liEle_1, ul_1, icon);\n                        }\n                    });\n                }\n                else {\n                    this.expandedNode(liEle_1, ul_1, icon);\n                }\n            }\n        }\n        else {\n            var ul = select('.' + PARENTITEM, currLi);\n            ul.style.display = 'none';\n            if (this.fields.dataSource instanceof DataManager === true) {\n                this.preventExpand = false;\n            }\n        }\n        if (this.initialRender) {\n            icon.classList.add('interaction');\n        }\n    };\n    TreeView.prototype.expandedNode = function (currLi, ul, icon) {\n        ul.style.display = 'block';\n        currLi.style.display = 'block';\n        currLi.style.overflow = '';\n        currLi.style.height = '';\n        removeClass([icon], PROCESS);\n        this.addExpand(currLi);\n        this.allowServerDataBinding = true;\n        this.updateServerProperties(\"expand\");\n        this.allowServerDataBinding = false;\n        if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n            this.expandArgs = this.getExpandEvent(currLi, null);\n            this.trigger('nodeExpanded', this.expandArgs);\n        }\n    };\n    TreeView.prototype.addExpand = function (liEle) {\n        liEle.setAttribute('aria-expanded', 'true');\n        removeClass([liEle], NODECOLLAPSED);\n        var id = liEle.getAttribute('data-uid');\n        if (!isNOU(id) && this.expandedNodes.indexOf(id) === -1) {\n            this.expandedNodes.push(id);\n        }\n    };\n    TreeView.prototype.collapseNode = function (currLi, icon, e) {\n        var _this = this;\n        if (icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            addClass([icon], PROCESS);\n        }\n        var colArgs;\n        if (this.isLoaded) {\n            colArgs = this.getExpandEvent(currLi, e);\n            this.trigger('nodeCollapsing', colArgs, function (observedArgs) {\n                if (observedArgs.cancel) {\n                    removeClass([icon], PROCESS);\n                }\n                else {\n                    _this.nodeCollapseAction(currLi, icon, observedArgs);\n                }\n            });\n        }\n        else {\n            this.nodeCollapseAction(currLi, icon, colArgs);\n        }\n    };\n    TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {\n        var _this = this;\n        removeClass([icon], COLLAPSIBLE);\n        addClass([icon], EXPANDABLE);\n        var start = 0;\n        var end = 0;\n        var proxy = this;\n        var ul = select('.' + PARENTITEM, currLi);\n        var liEle = currLi;\n        var activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n        if (this.isAnimate) {\n            this.aniObj.animate(ul, {\n                name: this.animation.collapse.effect,\n                duration: this.animation.collapse.duration,\n                timingFunction: this.animation.collapse.easing,\n                begin: function (args) {\n                    liEle.style.overflow = 'hidden';\n                    if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                        activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n                    }\n                    start = select('.' + TEXTWRAP, currLi).offsetHeight;\n                    end = liEle.offsetHeight;\n                },\n                progress: function (args) {\n                    proxy.animateHeight(args, start, end);\n                },\n                end: function (args) {\n                    args.element.style.display = 'none';\n                    if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                        activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n                    }\n                    _this.collapsedNode(liEle, ul, icon, colArgs);\n                }\n            });\n        }\n        else {\n            this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n    };\n    TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {\n        ul.style.display = 'none';\n        liEle.style.overflow = '';\n        liEle.style.height = '';\n        removeClass([icon], PROCESS);\n        this.allowServerDataBinding = true;\n        this.updateServerProperties(\"expand\");\n        this.allowServerDataBinding = false;\n        this.removeExpand(liEle);\n        if (this.isLoaded) {\n            colArgs = this.getExpandEvent(liEle, null);\n            this.trigger('nodeCollapsed', colArgs);\n        }\n    };\n    TreeView.prototype.removeExpand = function (liEle, toRemove) {\n        if (toRemove) {\n            liEle.removeAttribute('aria-expanded');\n        }\n        else {\n            this.disableExpandAttr(liEle);\n        }\n        var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.expandedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.disableExpandAttr = function (liEle) {\n        liEle.setAttribute('aria-expanded', 'false');\n        addClass([liEle], NODECOLLAPSED);\n    };\n    TreeView.prototype.setHeight = function (currLi, ul) {\n        ul.style.display = 'block';\n        ul.style.visibility = 'hidden';\n        currLi.style.height = currLi.offsetHeight + 'px';\n        ul.style.display = 'none';\n        ul.style.visibility = '';\n    };\n    TreeView.prototype.animateHeight = function (args, start, end) {\n        var remaining = (args.duration - args.timeStamp) / args.duration;\n        var currentHeight = (end - start) * remaining + start;\n        args.element.parentElement.style.height = currentHeight + 'px';\n    };\n    TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {\n        var _this = this;\n        var eicon = select('div.' + ICON, parentLi);\n        if (isNOU(eicon)) {\n            return;\n        }\n        this.showSpinner(eicon);\n        var childItems;\n        // tslint:disable\n        if (this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n            var level = this.parents(parentLi, '.' + PARENTITEM).length;\n            var mapper_2 = this.getChildFields(this.fields, level, 1);\n            if (isNOU(mapper_2) || isNOU(mapper_2.dataSource)) {\n                detach(eicon);\n                this.removeExpand(parentLi, true);\n                return;\n            }\n            this.treeList.push('false');\n            if (this.fields.dataSource instanceof DataManager && this.isOffline) {\n                this.treeList.pop();\n                childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n                this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n                this.updateTemplateForBlazor();\n            }\n            else {\n                mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {\n                    _this.treeList.pop();\n                    childItems = e.result;\n                    if (_this.dataType === 1) {\n                        _this.dataType = 2;\n                    }\n                    _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n                    _this.updateTemplateForBlazor();\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n        }\n        else {\n            childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n            this.currentLoadData = this.getSortedData(childItems);\n            if (isNOU(childItems) || childItems.length === 0) {\n                detach(eicon);\n                this.removeExpand(parentLi, true);\n                return;\n            }\n            else {\n                if (!this.isBlazorPlatform || !this.initialRender) {\n                    this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n                    parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));\n                }\n                this.expandNode(parentLi, eicon, loaded);\n                this.setSelectionForChildNodes(childItems);\n                this.ensureCheckNode(parentLi);\n                this.finalizeNode(parentLi);\n                if (this.loadOnDemand && this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n                    this.updateBlazorTemplate();\n                }\n                this.disableTreeNodes(childItems);\n                this.renderSubChild(parentLi, expandChild, loaded);\n            }\n        }\n    };\n    TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n        this.currentLoadData = childItems;\n        if (isNOU(childItems) || childItems.length === 0) {\n            detach(eicon);\n            this.removeExpand(parentLi, true);\n        }\n        else {\n            this.updateListProp(mapper);\n            if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n                var id = parentLi.getAttribute('data-uid');\n                var nodeData = this.getNodeObject(id);\n                setValue('child', childItems, nodeData);\n            }\n            this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n            parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\n            this.expandNode(parentLi, eicon, loaded);\n            this.setSelectionForChildNodes(childItems);\n            this.ensureCheckNode(parentLi);\n            this.finalizeNode(parentLi);\n            this.disableTreeNodes(childItems);\n            this.renderSubChild(parentLi, expandChild, loaded);\n        }\n        if (callback) {\n            callback();\n        }\n        if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n        }\n    };\n    TreeView.prototype.disableTreeNodes = function (childItems) {\n        var i = 0;\n        while (i < childItems.length) {\n            var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n            if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n                this.doDisableAction([id]);\n            }\n            i++;\n        }\n    };\n    /**\n     * Sets the child Item in selectedState while rendering the child node\n     */\n    TreeView.prototype.setSelectionForChildNodes = function (nodes) {\n        var i;\n        for (i = 0; i < nodes.length; i++) {\n            var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\n            if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n                this.doSelectionAction();\n            }\n        }\n    };\n    TreeView.prototype.ensureCheckNode = function (element) {\n        if (this.showCheckBox) {\n            this.ele = (this.checkedElement) ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n            if (this.autoCheck) {\n                this.ensureChildCheckState(element);\n                this.ensureParentCheckState(element);\n            }\n        }\n        this.currentLoadData = null;\n    };\n    TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {\n        if (nodeLevel === dataLevel) {\n            return mapper;\n        }\n        else {\n            return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n        }\n    };\n    TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {\n        var childData;\n        if (nodeLevel === dataLevel) {\n            return this.getChildMapper(mapper);\n        }\n        else {\n            return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n        }\n    };\n    TreeView.prototype.getChildMapper = function (mapper) {\n        return (typeof mapper.child === 'string' || isNOU(mapper.child)) ? mapper : mapper.child;\n    };\n    TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {\n        if (isRoot === void 0) { isRoot = false; }\n        var childNodes;\n        if (isNOU(obj)) {\n            return childNodes;\n        }\n        else if (this.dataType === 1) {\n            return this.getChildGroup(this.groupedData, parentId, isRoot);\n        }\n        else {\n            if (typeof this.fields.child === 'string') {\n                for (var i = 0, objlen = obj.length; i < objlen; i++) {\n                    var dataId = getValue(this.fields.id, obj[i]);\n                    if (dataId && dataId.toString() === parentId) {\n                        return getValue(this.fields.child, obj[i]);\n                    }\n                    else if (!isNOU(getValue(this.fields.child, obj[i]))) {\n                        childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId);\n                        if (childNodes !== undefined) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return childNodes;\n    };\n    TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {\n        var childNodes;\n        if (isNOU(data)) {\n            return childNodes;\n        }\n        for (var i = 0, objlen = data.length; i < objlen; i++) {\n            if (!isNOU(data[i][0]) && !isNOU(getValue(this.fields.parentID, data[i][0]))) {\n                if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\n                    return data[i];\n                }\n            }\n            else if (isRoot) {\n                return data[i];\n            }\n            else {\n                return [];\n            }\n        }\n        return childNodes;\n    };\n    TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {\n        if (expandChild) {\n            var cIcons = selectAll('.' + EXPANDABLE, element);\n            for (var i = 0, len = cIcons.length; i < len; i++) {\n                var icon = cIcons[i];\n                if (element.querySelector('.e-icons') !== cIcons[i]) {\n                    var curLi = closest(icon, '.' + LISTITEM);\n                    this.expandArgs = this.getExpandEvent(curLi, null);\n                    if (loaded !== true) {\n                        this.trigger('nodeExpanding', this.expandArgs);\n                    }\n                    this.renderChildNodes(curLi, expandChild, null, loaded);\n                }\n            }\n        }\n    };\n    TreeView.prototype.toggleSelect = function (li, e, multiSelect) {\n        if (!li.classList.contains('e-disable')) {\n            if (this.allowMultiSelection && ((e && e.ctrlKey) || multiSelect) && this.isActive(li)) {\n                this.unselectNode(li, e);\n            }\n            else {\n                this.selectNode(li, e, multiSelect);\n            }\n        }\n    };\n    TreeView.prototype.isActive = function (li) {\n        return li.classList.contains(ACTIVE) ? true : false;\n    };\n    TreeView.prototype.selectNode = function (li, e, multiSelect) {\n        var _this = this;\n        if (isNOU(li) || (!this.allowMultiSelection && this.isActive(li) && !isNOU(e))) {\n            this.setFocusElement(li);\n            return;\n        }\n        var eventArgs;\n        if (this.isLoaded) {\n            eventArgs = this.getSelectEvent(li, 'select', e);\n            this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeSelectAction(li, e, observedArgs, multiSelect);\n                }\n            });\n        }\n        else {\n            this.nodeSelectAction(li, e, eventArgs, multiSelect);\n        }\n    };\n    TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {\n        if (!this.allowMultiSelection || (!multiSelect && (!e || (e && !e.ctrlKey)))) {\n            this.removeSelectAll();\n        }\n        if (this.allowMultiSelection && e && e.shiftKey) {\n            if (!this.startNode) {\n                this.startNode = li;\n            }\n            var startIndex = this.liList.indexOf(this.startNode);\n            var endIndex = this.liList.indexOf(li);\n            if (startIndex > endIndex) {\n                var temp = startIndex;\n                startIndex = endIndex;\n                endIndex = temp;\n            }\n            for (var i = startIndex; i <= endIndex; i++) {\n                var currNode = this.liList[i];\n                if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\n                    this.addSelect(currNode);\n                }\n            }\n        }\n        else {\n            this.startNode = li;\n            this.addSelect(li);\n        }\n        this.setFocusElement(li);\n        if (this.isLoaded) {\n            this.allowServerDataBinding = true;\n            this.updateServerProperties(\"select\");\n            this.allowServerDataBinding = false;\n            eventArgs.nodeData = this.getNodeData(li);\n            this.trigger('nodeSelected', eventArgs);\n        }\n    };\n    TreeView.prototype.unselectNode = function (li, e) {\n        var _this = this;\n        var eventArgs;\n        if (this.isLoaded) {\n            eventArgs = this.getSelectEvent(li, 'un-select', e);\n            this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.allowServerDataBinding = true;\n                    _this.updateServerProperties(\"select\");\n                    _this.allowServerDataBinding = false;\n                    _this.nodeUnselectAction(li, observedArgs);\n                }\n            });\n        }\n        else {\n            this.nodeUnselectAction(li, eventArgs);\n        }\n    };\n    TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {\n        this.removeSelect(li);\n        this.setFocusElement(li);\n        if (this.isLoaded) {\n            this.allowServerDataBinding = true;\n            this.updateServerProperties(\"select\");\n            this.allowServerDataBinding = false;\n            eventArgs.nodeData = this.getNodeData(li);\n            this.trigger('nodeSelected', eventArgs);\n        }\n    };\n    TreeView.prototype.setFocusElement = function (li) {\n        if (!isNOU(li)) {\n            var focusedNode = this.getFocusedNode();\n            if (focusedNode) {\n                removeClass([focusedNode], FOCUS);\n            }\n            addClass([li], FOCUS);\n            this.updateIdAttr(focusedNode, li);\n        }\n    };\n    TreeView.prototype.addSelect = function (liEle) {\n        liEle.setAttribute('aria-selected', 'true');\n        addClass([liEle], ACTIVE);\n        var id = liEle.getAttribute('data-uid');\n        if (!isNOU(id) && this.selectedNodes.indexOf(id) === -1) {\n            this.selectedNodes.push(id);\n        }\n    };\n    TreeView.prototype.removeSelect = function (liEle) {\n        if (this.allowMultiSelection) {\n            liEle.setAttribute('aria-selected', 'false');\n        }\n        else {\n            liEle.removeAttribute('aria-selected');\n        }\n        removeClass([liEle], ACTIVE);\n        var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.selectedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.removeSelectAll = function () {\n        var selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n        for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\n            var ele = selectedLI_1[_i];\n            if (this.allowMultiSelection) {\n                ele.setAttribute('aria-selected', 'false');\n            }\n            else {\n                ele.removeAttribute('aria-selected');\n            }\n        }\n        removeClass(selectedLI, ACTIVE);\n        this.setProperties({ selectedNodes: [] }, true);\n    };\n    TreeView.prototype.getSelectEvent = function (currLi, action, e) {\n        var nodeData = this.getNodeData(currLi);\n        return { action: action, cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, nodeData: nodeData };\n    };\n    TreeView.prototype.setExpandOnType = function () {\n        this.expandOnType = (this.expandOn === 'Auto') ? (Browser.isDevice ? 'Click' : 'DblClick') : this.expandOn;\n    };\n    TreeView.prototype.expandHandler = function (e) {\n        var target = e.originalEvent.target;\n        if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) ||\n            target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) ||\n            target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\n            return;\n        }\n        else {\n            this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\n        }\n    };\n    TreeView.prototype.expandCollapseAction = function (currLi, e) {\n        var icon = select('div.' + ICON, currLi);\n        if (!icon || icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            var classList = icon.classList;\n            if (classList.contains(EXPANDABLE)) {\n                this.expandAction(currLi, icon, e);\n            }\n            else if (classList.contains(COLLAPSIBLE)) {\n                this.collapseNode(currLi, icon, e);\n            }\n        }\n    };\n    TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {\n        var _this = this;\n        if (icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            addClass([icon], PROCESS);\n        }\n        if (this.isLoaded && !this.isRefreshed) {\n            this.expandArgs = this.getExpandEvent(currLi, e);\n            this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {\n                if (observedArgs.cancel) {\n                    removeClass([icon], PROCESS);\n                }\n                else {\n                    _this.nodeExpandAction(currLi, icon, expandChild, callback);\n                }\n            });\n        }\n        else {\n            this.nodeExpandAction(currLi, icon, expandChild, callback);\n        }\n    };\n    TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {\n        var ul = select('.' + PARENTITEM, currLi);\n        if (ul && ul.nodeName === 'UL') {\n            this.expandNode(currLi, icon);\n        }\n        else {\n            this.renderChildNodes(currLi, expandChild, callback);\n            var liEles = selectAll('.' + LISTITEM, currLi);\n            for (var i = 0; i < liEles.length; i++) {\n                var id = this.getId(liEles[i]);\n                if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n                    var icon_1 = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\n                    if (!isNOU(icon_1)) {\n                        this.expandAction(liEles[i], icon_1, null);\n                    }\n                    this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n                }\n            }\n        }\n    };\n    TreeView.prototype.keyActionHandler = function (e) {\n        var _this = this;\n        var target = e.target;\n        var focusedNode = this.getFocusedNode();\n        if (target && target.classList.contains(INPUT)) {\n            var inpEle = target;\n            if (e.action === 'enter') {\n                inpEle.blur();\n                this.element.focus();\n                addClass([focusedNode], HOVER);\n            }\n            else if (e.action === 'escape') {\n                inpEle.value = this.oldText;\n                inpEle.blur();\n                this.element.focus();\n                addClass([focusedNode], HOVER);\n            }\n            return;\n        }\n        e.preventDefault();\n        var eventArgs = {\n            cancel: false,\n            event: e,\n            node: focusedNode,\n        };\n        this.trigger('keyPress', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'space':\n                        if (_this.showCheckBox) {\n                            _this.checkNode(e);\n                        }\n                        break;\n                    case 'moveRight':\n                        _this.openNode(_this.enableRtl ? false : true, e);\n                        break;\n                    case 'moveLeft':\n                        _this.openNode(_this.enableRtl ? true : false, e);\n                        break;\n                    case 'shiftDown':\n                        _this.shiftKeySelect(true, e);\n                        break;\n                    case 'moveDown':\n                    case 'ctrlDown':\n                    case 'csDown':\n                        _this.navigateNode(true);\n                        break;\n                    case 'shiftUp':\n                        _this.shiftKeySelect(false, e);\n                        break;\n                    case 'moveUp':\n                    case 'ctrlUp':\n                    case 'csUp':\n                        _this.navigateNode(false);\n                        break;\n                    case 'home':\n                    case 'shiftHome':\n                    case 'ctrlHome':\n                    case 'csHome':\n                        _this.navigateRootNode(true);\n                        break;\n                    case 'end':\n                    case 'shiftEnd':\n                    case 'ctrlEnd':\n                    case 'csEnd':\n                        _this.navigateRootNode(false);\n                        break;\n                    case 'enter':\n                    case 'ctrlEnter':\n                    case 'shiftEnter':\n                    case 'csEnter':\n                        _this.toggleSelect(focusedNode, e);\n                        break;\n                    case 'f2':\n                        if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n                            _this.createTextbox(focusedNode, e);\n                        }\n                        break;\n                    case 'ctrlA':\n                        if (_this.allowMultiSelection) {\n                            var sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);\n                            _this.selectGivenNodes(sNodes);\n                        }\n                        break;\n                }\n            }\n        });\n    };\n    TreeView.prototype.navigateToFocus = function (isUp) {\n        var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n        var pos = focusNode.getBoundingClientRect();\n        var parent = this.getScrollParent(this.element);\n        if (!isNOU(parent)) {\n            var parentPos = parent.getBoundingClientRect();\n            if (pos.bottom > parentPos.bottom) {\n                parent.scrollTop += pos.bottom - parentPos.bottom;\n            }\n            else if (pos.top < parentPos.top) {\n                parent.scrollTop -= parentPos.top - pos.top;\n            }\n        }\n        var isVisible = this.isVisibleInViewport(focusNode);\n        if (!isVisible) {\n            focusNode.scrollIntoView(isUp);\n        }\n    };\n    TreeView.prototype.isVisibleInViewport = function (txtWrap) {\n        var pos = txtWrap.getBoundingClientRect();\n        return (pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n            pos.right <= (window.innerWidth || document.documentElement.clientWidth));\n    };\n    TreeView.prototype.getScrollParent = function (node) {\n        if (isNOU(node)) {\n            return null;\n        }\n        return (node.scrollHeight > node.clientHeight) ? node : this.getScrollParent(node.parentElement);\n    };\n    TreeView.prototype.shiftKeySelect = function (isTowards, e) {\n        if (this.allowMultiSelection) {\n            var focusedNode = this.getFocusedNode();\n            var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n            this.removeHover();\n            this.setFocusElement(nextNode);\n            this.toggleSelect(nextNode, e, false);\n            this.navigateToFocus(!isTowards);\n        }\n        else {\n            this.navigateNode(isTowards);\n        }\n    };\n    TreeView.prototype.checkNode = function (e) {\n        var focusedNode = this.getFocusedNode();\n        var checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\n        var isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n        if (!focusedNode.classList.contains('e-disable')) {\n            if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\n                this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n            }\n        }\n    };\n    TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {\n        var _this = this;\n        var currLi = closest(checkWrap, '.' + LISTITEM);\n        this.checkActionNodes = [];\n        var ariaState = !isCheck ? 'true' : 'false';\n        if (!isNOU(ariaState)) {\n            checkWrap.setAttribute('aria-checked', ariaState);\n        }\n        var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n        this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n            }\n        });\n    };\n    TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {\n        if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n            this.checkedElement.push(li.getAttribute('data-uid'));\n            var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n            (child !== null) ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\n        }\n        this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n        if (this.autoCheck) {\n            this.ensureChildCheckState(li);\n            this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\n            var doCheck = void 0;\n            if (eventArgs.action === 'check') {\n                doCheck = true;\n            }\n            else if (eventArgs.action === 'uncheck') {\n                doCheck = false;\n            }\n            this.ensureStateChange(li, doCheck);\n        }\n        this.allowServerDataBinding = true;\n        this.updateServerProperties(\"check\");\n        this.allowServerDataBinding = false;\n        this.nodeCheckedEvent(checkWrap, isCheck, e);\n    };\n    /**\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM\n     */\n    TreeView.prototype.ensureStateChange = function (li, doCheck) {\n        var childElement = select('.' + PARENTITEM, li);\n        var parentIndex = li.getAttribute('data-uid');\n        var mapper = this.fields;\n        if (this.dataType === 1 && this.autoCheck) {\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\n            for (var i = 0; i < resultData.length; i++) {\n                var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n                var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\n                if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n                    this.checkedNodes.push(resultId);\n                    var childItems = this.getChildNodes(this.treeData, resultId);\n                    this.getChildItems(childItems, doCheck);\n                    if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n                    }\n                }\n                else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null &&\n                    this.checkedNodes.indexOf(resultId) !== -1) {\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n                    if (isCheck === 'true') {\n                        this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n                    }\n                    if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null ||\n                        this.parentNodeCheck.indexOf(resultId) !== -1) {\n                        var childNodes = this.getChildNodes(this.treeData, resultId);\n                        this.getChildItems(childNodes, doCheck);\n                        if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n                        }\n                    }\n                }\n                else {\n                    var childItems = this.getChildNodes(this.treeData, resultId);\n                    this.getChildItems(childItems, doCheck);\n                }\n            }\n        }\n        else if (this.dataType === 1 && !this.autoCheck) {\n            if (!doCheck) {\n                var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n                for (var i = 0; i < checkedData.length; i++) {\n                    var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\n                    if (this.checkedNodes.indexOf(id) !== -1) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                    }\n                    this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n                }\n                this.checkedNodes = [];\n            }\n            else {\n                for (var i = 0; i < this.treeData.length; i++) {\n                    var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\n                    if (this.checkedNodes.indexOf(checkedId) === -1) {\n                        this.checkedNodes.push(checkedId);\n                    }\n                }\n            }\n        }\n        else {\n            var childItems = this.getChildNodes(this.treeData, parentIndex);\n            if (childItems) {\n                this.childStateChange(childItems, parentIndex, childElement, doCheck);\n            }\n        }\n    };\n    TreeView.prototype.getChildItems = function (childItems, doCheck) {\n        for (var i = 0; i < childItems.length; i++) {\n            var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n            var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() :\n                null;\n            if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n                this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n            }\n            if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n                this.checkedNodes.push(childId);\n            }\n            if (childIsCheck === 'true' && !doCheck) {\n                this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n            }\n            var subChildItems = this.getChildNodes(this.treeData, childId);\n            if (subChildItems.length > 0) {\n                this.getChildItems(subChildItems, doCheck);\n            }\n        }\n    };\n    /**\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\n     */\n    TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {\n        for (var i = 0; i < childItems.length; i++) {\n            var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\n            var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n            if (this.autoCheck) {\n                if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n                    this.checkedNodes.push(checkedChild);\n                    if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n                    }\n                }\n                else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n                    if (isCheck === 'true') {\n                        this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n                    }\n                }\n            }\n            else if (!this.autoCheck) {\n                if (!doCheck) {\n                    if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n                    }\n                    this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n                    this.checkedNodes = [];\n                }\n                else {\n                    if (this.checkedNodes.indexOf(checkedChild) === -1) {\n                        this.checkedNodes.push(checkedChild);\n                    }\n                }\n            }\n            var subChild = this.getChildNodes([childItems[i]], checkedChild);\n            if (subChild) {\n                this.childStateChange(subChild, parent, childElement, doCheck);\n            }\n        }\n    };\n    //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n    TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {\n        if (child) {\n            for (var length_1 = 0; length_1 < child.length; length_1++) {\n                var childId = getValue(this.fields.id, child[length_1]);\n                var check = this.element.querySelector('[data-uid=\"' + childId + '\"]');\n                //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n                if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n                    if (((check === null && !isNOU(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1)\n                        || childCheck === 0 || checked === 2)) {\n                        (child[length_1][this.fields.isChecked] !== false || checked === 2) ? newCheck.push(childId.toString())\n                            : childCheck = null;\n                        childCheck = (child[length_1][this.fields.isChecked] !== false || checked === 2) ? 0 : null;\n                    }\n                }\n                //Pushes child checked node done thro' UI interaction\n                if (newCheck.indexOf(childId.toString()) === -1 && isNOU(checked)) {\n                    newCheck.push(childId.toString());\n                }\n                //Gets if any next level children are available for child nodes\n                if (getValue(this.fields.hasChildren, child[length_1]) === true ||\n                    getValue(this.fields.child.toString(), child[length_1])) {\n                    var id = getValue(this.fields.id, child[length_1]);\n                    var childId_1 = this.getChildNodes(this.treeData, id.toString());\n                    if (childId_1) {\n                        (isNOU(validateCheck)) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) :\n                            this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);\n                        childCheck = null;\n                    }\n                }\n                childCheck = null;\n            }\n        }\n    };\n    TreeView.prototype.openNode = function (toBeOpened, e) {\n        var focusedNode = this.getFocusedNode();\n        var icon = select('div.' + ICON, focusedNode);\n        if (toBeOpened) {\n            if (!icon) {\n                return;\n            }\n            else if (icon.classList.contains(EXPANDABLE)) {\n                this.expandAction(focusedNode, icon, e);\n            }\n            else {\n                this.focusNextNode(focusedNode, true);\n            }\n        }\n        else {\n            if (icon && icon.classList.contains(COLLAPSIBLE)) {\n                this.collapseNode(focusedNode, icon, e);\n            }\n            else {\n                var parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n                if (!parentLi) {\n                    return;\n                }\n                else {\n                    if (!parentLi.classList.contains('e-disable')) {\n                        this.setFocus(focusedNode, parentLi);\n                        this.navigateToFocus(true);\n                    }\n                }\n            }\n        }\n    };\n    TreeView.prototype.navigateNode = function (isTowards) {\n        var focusedNode = this.getFocusedNode();\n        this.focusNextNode(focusedNode, isTowards);\n    };\n    TreeView.prototype.navigateRootNode = function (isBackwards) {\n        var focusedNode = this.getFocusedNode();\n        var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n        if (!rootNode.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, rootNode);\n            this.navigateToFocus(isBackwards);\n        }\n    };\n    TreeView.prototype.getFocusedNode = function () {\n        var selectedItem;\n        var fNode = select('.' + LISTITEM + '.' + FOCUS, this.element);\n        if (isNOU(fNode)) {\n            selectedItem = select('.' + LISTITEM, this.element);\n        }\n        return isNOU(fNode) ? (isNOU(selectedItem) ? this.element.firstElementChild : selectedItem) : fNode;\n    };\n    TreeView.prototype.focusNextNode = function (li, isTowards) {\n        var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n        this.setFocus(li, nextNode);\n        this.navigateToFocus(!isTowards);\n        if (nextNode.classList.contains('e-disable')) {\n            var lastChild = nextNode.lastChild;\n            if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n                this.focusNextNode(nextNode, true);\n            }\n            else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n                this.focusNextNode(nextNode, false);\n            }\n            else if (nextNode.nextSibling == null && lastChild.classList.contains('e-text-content')) {\n                this.focusNextNode(nextNode, false);\n            }\n            else {\n                this.focusNextNode(nextNode, isTowards);\n            }\n        }\n    };\n    TreeView.prototype.getNextNode = function (li) {\n        var index = this.liList.indexOf(li);\n        var nextNode;\n        do {\n            index++;\n            nextNode = this.liList[index];\n            if (isNOU(nextNode)) {\n                return li;\n            }\n        } while (!isVisible(nextNode));\n        return nextNode;\n    };\n    TreeView.prototype.getPrevNode = function (li) {\n        var index = this.liList.indexOf(li);\n        var prevNode;\n        do {\n            index--;\n            prevNode = this.liList[index];\n            if (isNOU(prevNode)) {\n                return li;\n            }\n        } while (!isVisible(prevNode));\n        return prevNode;\n    };\n    TreeView.prototype.getRootNode = function () {\n        var index = 0;\n        var rootNode;\n        do {\n            rootNode = this.liList[index];\n            index++;\n        } while (!isVisible(rootNode));\n        return rootNode;\n    };\n    TreeView.prototype.getEndNode = function () {\n        var index = this.liList.length - 1;\n        var endNode;\n        do {\n            endNode = this.liList[index];\n            index--;\n        } while (!isVisible(endNode));\n        return endNode;\n    };\n    TreeView.prototype.setFocus = function (preNode, nextNode) {\n        removeClass([preNode], [HOVER, FOCUS]);\n        if (!nextNode.classList.contains('e-disable')) {\n            addClass([nextNode], [HOVER, FOCUS]);\n            this.updateIdAttr(preNode, nextNode);\n        }\n    };\n    TreeView.prototype.updateIdAttr = function (preNode, nextNode) {\n        this.element.removeAttribute('aria-activedescendant');\n        if (preNode) {\n            preNode.removeAttribute('id');\n        }\n        nextNode.setAttribute('id', this.element.id + '_active');\n        this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n    };\n    TreeView.prototype.focusIn = function () {\n        if (!this.mouseDownStatus) {\n            addClass([this.getFocusedNode()], HOVER);\n        }\n        this.mouseDownStatus = false;\n    };\n    TreeView.prototype.focusOut = function () {\n        removeClass([this.getFocusedNode()], HOVER);\n    };\n    TreeView.prototype.onMouseOver = function (e) {\n        var target = e.target;\n        var classList = target.classList;\n        var currentLi = closest(target, '.' + LISTITEM);\n        if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {\n            this.removeHover();\n            return;\n        }\n        else {\n            if (currentLi && !currentLi.classList.contains('e-disable')) {\n                this.setHover(currentLi);\n            }\n        }\n    };\n    TreeView.prototype.setHover = function (li) {\n        if (!li.classList.contains(HOVER)) {\n            this.removeHover();\n            addClass([li], HOVER);\n        }\n    };\n    ;\n    TreeView.prototype.onMouseLeave = function (e) {\n        this.removeHover();\n    };\n    TreeView.prototype.removeHover = function () {\n        var hoveredNode = selectAll('.' + HOVER, this.element);\n        if (hoveredNode && hoveredNode.length) {\n            removeClass(hoveredNode, HOVER);\n        }\n    };\n    ;\n    TreeView.prototype.getNodeData = function (currLi, fromDS) {\n        if (!isNOU(currLi) && currLi.classList.contains(LISTITEM) &&\n            !isNOU(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n            var id = currLi.getAttribute('data-uid');\n            var text = this.getText(currLi, fromDS);\n            var pNode = closest(currLi.parentNode, '.' + LISTITEM);\n            var pid = pNode ? pNode.getAttribute('data-uid') : null;\n            var selected = currLi.classList.contains(ACTIVE);\n            var expanded = (currLi.getAttribute('aria-expanded') === 'true') ? true : false;\n            var hasChildren = (currLi.getAttribute('aria-expanded') === null) ? false : true;\n            if (this.isBlazorPlatform) {\n                hasChildren = currLi.getAttribute('aria-expanded') === 'true' ? true : (currLi.querySelector('.e-icon-expandable') || currLi.querySelector('.e-icon-collapsible')) != null ? true : false;\n            }\n            var checked = null;\n            if (this.showCheckBox) {\n                checked = select('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');\n            }\n            return {\n                id: id, text: text, parentID: pid, selected: selected, expanded: expanded,\n                isChecked: checked, hasChildren: hasChildren\n            };\n        }\n        return { id: '', text: '', parentID: '', selected: false, expanded: false, isChecked: '', hasChildren: false };\n    };\n    TreeView.prototype.getText = function (currLi, fromDS) {\n        if (fromDS) {\n            var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n            var level = parseFloat(currLi.getAttribute('aria-level'));\n            var nodeFields = this.getFields(this.fields, level, 1);\n            return getValue(nodeFields.text, nodeData);\n        }\n        return select('.' + LISTTEXT, currLi).textContent;\n    };\n    TreeView.prototype.getExpandEvent = function (currLi, e) {\n        var nodeData = this.getNodeData(currLi);\n        return { cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, nodeData: nodeData, event: e };\n    };\n    TreeView.prototype.renderNodeTemplate = function (data, textEle, dataId) {\n        var tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle);\n        if (tempArr) {\n            tempArr = Array.prototype.slice.call(tempArr);\n            append(tempArr, textEle);\n        }\n    };\n    TreeView.prototype.destroyTemplate = function (liEle) {\n        this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);\n    };\n    TreeView.prototype.reRenderNodes = function () {\n        this.updateListProp(this.fields);\n        resetBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate');\n        if (this.isBlazorPlatform) {\n            this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n            this.ulElement.parentElement.removeChild(this.ulElement);\n        }\n        else {\n            this.element.innerHTML = '';\n        }\n        if (!isNOU(this.nodeTemplateFn)) {\n            this.clearTemplate();\n        }\n        this.setTouchClass();\n        this.setProperties({ selectedNodes: [], checkedNodes: [], expandedNodes: [] }, true);\n        this.checkedElement = [];\n        this.isLoaded = false;\n        this.setDataBinding(true);\n    };\n    TreeView.prototype.setCssClass = function (oldClass, newClass) {\n        if (!isNOU(oldClass) && oldClass !== '') {\n            removeClass([this.element], oldClass.split(' '));\n        }\n        if (!isNOU(newClass) && newClass !== '') {\n            addClass([this.element], newClass.split(' '));\n        }\n    };\n    TreeView.prototype.editingHandler = function (e) {\n        var target = e.target;\n        if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) ||\n            target.classList.contains(LISTITEM) || target.classList.contains(ICON) ||\n            target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n            return;\n        }\n        else {\n            var liEle = closest(target, '.' + LISTITEM);\n            this.createTextbox(liEle, e);\n        }\n    };\n    TreeView.prototype.createTextbox = function (liEle, e) {\n        var _this = this;\n        var oldInpEle = select('.' + TREEINPUT, this.element);\n        if (oldInpEle) {\n            oldInpEle.blur();\n        }\n        var textEle = select('.' + LISTTEXT, liEle);\n        this.updateOldText(liEle);\n        var innerEle = this.createElement('input', { className: TREEINPUT, attrs: { value: this.oldText } });\n        var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n        this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                var inpWidth = textEle.offsetWidth + 5;\n                var style = 'width:' + inpWidth + 'px';\n                addClass([liEle], EDITING);\n                if (!isNOU(_this.nodeTemplateFn)) {\n                    _this.destroyTemplate(liEle);\n                }\n                textEle.innerHTML = eventArgs.innerHtml;\n                var inpEle = select('.' + TREEINPUT, textEle);\n                _this.inputObj = Input.createInput({\n                    element: inpEle,\n                    properties: {\n                        enableRtl: _this.enableRtl,\n                    }\n                }, _this.createElement);\n                _this.inputObj.container.setAttribute('style', style);\n                inpEle.focus();\n                var inputEle = inpEle;\n                inputEle.setSelectionRange(0, inputEle.value.length);\n                _this.wireInputEvents(inpEle);\n            }\n        });\n    };\n    TreeView.prototype.updateOldText = function (liEle) {\n        var id = liEle.getAttribute('data-uid');\n        this.editData = this.getNodeObject(id);\n        var level = parseFloat(liEle.getAttribute('aria-level'));\n        this.editFields = this.getFields(this.fields, level, 1);\n        this.oldText = getValue(this.editFields.text, this.editData);\n    };\n    TreeView.prototype.inputFocusOut = function (e) {\n        if (!select('.' + TREEINPUT, this.element)) {\n            return;\n        }\n        var target = e.target;\n        var newText = target.value;\n        var txtEle = closest(target, '.' + LISTTEXT);\n        var liEle = closest(target, '.' + LISTITEM);\n        detach(this.inputObj.container);\n        if (this.fields.dataSource instanceof DataManager && !this.isOffline && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n            this.crudOperation('update', null, liEle, newText, null, null, true);\n        }\n        else {\n            this.appendNewText(liEle, txtEle, newText, true);\n        }\n    };\n    TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {\n        var _this = this;\n        var eventArgs = this.getEditEvent(liEle, newText, null);\n        this.trigger('nodeEdited', eventArgs, function (observedArgs) {\n            newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n            _this.updateText(liEle, txtEle, newText, isInput);\n            if (observedArgs.oldText !== newText) {\n                _this.triggerEvent();\n            }\n        });\n    };\n    TreeView.prototype.updateText = function (liEle, txtEle, newText, isInput) {\n        var newData = setValue(this.editFields.text, newText, this.editData);\n        if (!isNOU(this.nodeTemplateFn)) {\n            txtEle.innerText = '';\n            var dataId = liEle.getAttribute('data-uid');\n            this.renderNodeTemplate(newData, txtEle, dataId);\n            this.updateBlazorTemplate();\n            this.renderReactTemplates();\n        }\n        else {\n            txtEle.innerText = newText;\n        }\n        if (isInput) {\n            removeClass([liEle], EDITING);\n            txtEle.focus();\n        }\n    };\n    TreeView.prototype.getElement = function (ele) {\n        if (isNOU(ele)) {\n            return null;\n        }\n        else if (typeof ele === 'string') {\n            return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n        }\n        else if (typeof ele === 'object') {\n            return getElement(ele);\n        }\n        else {\n            return null;\n        }\n    };\n    TreeView.prototype.getId = function (ele) {\n        if (isNOU(ele)) {\n            return null;\n        }\n        else if (typeof ele === 'string') {\n            return ele;\n        }\n        else if (typeof ele === 'object') {\n            return (getElement(ele)).getAttribute('data-uid');\n        }\n        else {\n            return null;\n        }\n    };\n    TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {\n        var data = this.getNodeData(liEle);\n        return { cancel: false, newText: newText, node: liEle, nodeData: data, oldText: this.oldText, innerHtml: inpEle };\n    };\n    TreeView.prototype.getNodeObject = function (id) {\n        var childNodes;\n        if (isNOU(id)) {\n            return childNodes;\n        }\n        else if (this.dataType === 1) {\n            for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {\n                var dataId = getValue(this.fields.id, this.treeData[i]);\n                if (!isNOU(this.treeData[i]) && !isNOU(dataId) && dataId.toString() === id) {\n                    return this.treeData[i];\n                }\n            }\n        }\n        else {\n            return this.getChildNodeObject(this.treeData, this.fields, id);\n        }\n        return childNodes;\n    };\n    TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {\n        var newList;\n        if (isNOU(obj)) {\n            return newList;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var dataId = getValue(mapper.id, obj[i]);\n            if (obj[i] && dataId && dataId.toString() === id) {\n                return obj[i];\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var childData = getValue(mapper.child, obj[i]);\n                newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var child = 'child';\n                newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n        }\n        return newList;\n    };\n    TreeView.prototype.setDragAndDrop = function (toBind) {\n        if (toBind && !this.disabled) {\n            this.initializeDrag();\n        }\n        else {\n            this.destroyDrag();\n        }\n    };\n    // tslint:disable-next-line:max-func-body-length\n    TreeView.prototype.initializeDrag = function () {\n        var _this = this;\n        var virtualEle;\n        var proxy = this;\n        this.dragObj = new Draggable(this.element, {\n            enableTailMode: true, enableAutoScroll: true,\n            dragArea: this.dragArea,\n            dragTarget: '.' + TEXTWRAP,\n            helper: function (e) {\n                _this.dragTarget = e.sender.target;\n                var dragRoot = closest(_this.dragTarget, '.' + ROOT);\n                var dragWrap = closest(_this.dragTarget, '.' + TEXTWRAP);\n                _this.dragLi = closest(_this.dragTarget, '.' + LISTITEM);\n                if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {\n                    dragWrap = _this.dragTarget.nextElementSibling;\n                }\n                if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap ||\n                    _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) ||\n                    _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {\n                    return false;\n                }\n                var cloneEle = (dragWrap.cloneNode(true));\n                if (isNOU(select('div.' + ICON, cloneEle))) {\n                    var icon = proxy.createElement('div', { className: ICON + ' ' + EXPANDABLE });\n                    cloneEle.insertBefore(icon, cloneEle.children[0]);\n                }\n                var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');\n                virtualEle = proxy.createElement('div', { className: cssClass });\n                virtualEle.appendChild(cloneEle);\n                var nLen = _this.selectedNodes.length;\n                if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {\n                    var cNode = proxy.createElement('span', { className: DROPCOUNT, innerHTML: '' + nLen });\n                    virtualEle.appendChild(cNode);\n                }\n                document.body.appendChild(virtualEle);\n                document.body.style.cursor = '';\n                _this.dragData = _this.getNodeData(_this.dragLi);\n                return virtualEle;\n            },\n            dragStart: function (e) {\n                addClass([_this.element], DRAGGING);\n                var listItem = closest(e.target, '.e-list-item');\n                var level;\n                if (listItem) {\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\n                }\n                var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);\n                if (eventArgs.draggedNode.classList.contains(EDITING)) {\n                    _this.dragObj.intDestroy(e.event);\n                    _this.dragCancelAction(virtualEle);\n                }\n                else {\n                    _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {\n                        if (observedArgs.cancel) {\n                            _this.dragObj.intDestroy(e.event);\n                            _this.dragCancelAction(virtualEle);\n                        }\n                        else {\n                            _this.dragStartAction = true;\n                        }\n                        if (isBlazor()) {\n                            e.bindEvents(getElement(e.dragElement));\n                        }\n                    });\n                }\n            },\n            drag: function (e) {\n                _this.dragObj.setProperties({ cursorAt: { top: (!isNOU(e.event.targetTouches) || Browser.isDevice) ? 60 : -20 } });\n                _this.dragAction(e, virtualEle);\n            },\n            dragStop: function (e) {\n                removeClass([_this.element], DRAGGING);\n                _this.removeVirtualEle();\n                var dropTarget = e.target;\n                var preventTargetExpand = false;\n                var dropRoot = (closest(dropTarget, '.' + DROPPABLE));\n                var isHelperElement = true;\n                if (!dropTarget || !dropRoot) {\n                    detach(e.helper);\n                    document.body.style.cursor = '';\n                    isHelperElement = false;\n                }\n                var listItem = closest(dropTarget, '.e-list-item');\n                var level;\n                if (listItem) {\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\n                }\n                var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);\n                eventArgs.preventTargetExpand = preventTargetExpand;\n                if ((_this.isBlazorPlatform && _this.dragStartAction) || !_this.isBlazorPlatform) {\n                    _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {\n                        _this.dragParent = observedArgs.draggedParentNode;\n                        _this.preventExpand = observedArgs.preventTargetExpand;\n                        if (observedArgs.cancel) {\n                            if (e.helper.parentNode) {\n                                detach(e.helper);\n                            }\n                            document.body.style.cursor = '';\n                            isHelperElement = false;\n                        }\n                        _this.dragStartAction = false;\n                        if (_this.isBlazorPlatform && isHelperElement) {\n                            _this.dropAction(e, true);\n                        }\n                    });\n                }\n            }\n        });\n        this.dropObj = new Droppable(this.element, {\n            out: function (e) {\n                if (!isNOU(e) && !e.target.classList.contains(SIBLING)) {\n                    document.body.style.cursor = 'not-allowed';\n                }\n            },\n            over: function (e) {\n                document.body.style.cursor = '';\n            },\n            drop: function (e) {\n                if (!_this.isBlazorPlatform) {\n                    _this.dropAction(e);\n                }\n            }\n        });\n    };\n    TreeView.prototype.dragCancelAction = function (virtualEle) {\n        detach(virtualEle);\n        removeClass([this.element], DRAGGING);\n        this.dragStartAction = false;\n    };\n    TreeView.prototype.dragAction = function (e, virtualEle) {\n        var dropRoot = closest(e.target, '.' + DROPPABLE);\n        var dropWrap = closest(e.target, '.' + TEXTWRAP);\n        var icon = select('div.' + ICON, virtualEle);\n        removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n        this.removeVirtualEle();\n        document.body.style.cursor = '';\n        var classList = e.target.classList;\n        if (this.fullRowSelect && !dropWrap && !isNOU(classList) && classList.contains(FULLROW)) {\n            dropWrap = e.target.nextElementSibling;\n        }\n        if (dropRoot) {\n            var dropLi = closest(e.target, '.' + LISTITEM);\n            var checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\n            var collapse = closest(e.target, '.' + COLLAPSIBLE);\n            var expand = closest(e.target, '.' + EXPANDABLE);\n            if (!dropRoot.classList.contains(ROOT) || (dropWrap &&\n                (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)))) {\n                if ((dropLi && e && (!expand && !collapse) && (e.event.offsetY < 7) && !checkWrapper) || (((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3)))) {\n                    addClass([icon], DROPNEXT);\n                    var virEle = this.createElement('div', { className: SIBLING });\n                    var index = this.fullRowSelect ? (1) : (0);\n                    dropLi.insertBefore(virEle, dropLi.children[index]);\n                }\n                else if ((dropLi && e && (!expand && !collapse) && (e.target.offsetHeight > 0 && e.event.offsetY > (e.target.offsetHeight - 10)) && !checkWrapper) || (((expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19)))) {\n                    addClass([icon], DROPNEXT);\n                    var virEle = this.createElement('div', { className: SIBLING });\n                    var index = this.fullRowSelect ? (2) : (1);\n                    dropLi.insertBefore(virEle, dropLi.children[index]);\n                }\n                else {\n                    addClass([icon], DROPIN);\n                }\n            }\n            else if (e.target.nodeName === 'LI' && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {\n                addClass([icon], DROPNEXT);\n                this.renderVirtualEle(e);\n            }\n            else if (e.target.classList.contains(SIBLING)) {\n                addClass([icon], DROPNEXT);\n            }\n            else {\n                addClass([icon], DROPOUT);\n            }\n        }\n        else {\n            addClass([icon], NODROP);\n            document.body.style.cursor = 'not-allowed';\n        }\n        var listItem = closest(e.target, '.e-list-item');\n        var level;\n        if (listItem) {\n            level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n        var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n        if (eventArgs.dropIndicator) {\n            removeClass([icon], eventArgs.dropIndicator);\n        }\n        this.trigger('nodeDragging', eventArgs);\n        if (eventArgs.dropIndicator) {\n            addClass([icon], eventArgs.dropIndicator);\n        }\n    };\n    // tslint:disable\n    TreeView.prototype.dropAction = function (e, isBlazorDrop) {\n        var offsetY = e.event.offsetY;\n        var dropTarget = e.target;\n        var dragObj;\n        var level;\n        var drop = false;\n        var dragInstance;\n        if (!isBlazorDrop) {\n            dragInstance = e.dragData.draggable;\n        }\n        else {\n            dragInstance = e.element;\n        }\n        for (var i = 0; i < dragInstance.ej2_instances.length; i++) {\n            if (dragInstance.ej2_instances[i] instanceof TreeView_1) {\n                dragObj = dragInstance.ej2_instances[i];\n                break;\n            }\n        }\n        if (dragObj && dragObj.dragTarget) {\n            var dragTarget = dragObj.dragTarget;\n            var dragLi = (closest(dragTarget, '.' + LISTITEM));\n            var dropLi = (closest(dropTarget, '.' + LISTITEM));\n            if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n                dropLi = dropTarget.firstElementChild;\n            }\n            if (!isBlazorDrop) {\n                detach(e.droppedElement);\n            }\n            else {\n                detach(e.helper);\n            }\n            document.body.style.cursor = '';\n            if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n                if (this.fields.dataSource instanceof DataManager === false) {\n                    this.preventExpand = false;\n                }\n                return;\n            }\n            if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n                var sNodes = selectAll('.' + ACTIVE, dragObj.element);\n                if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n                    for (var i = sNodes.length - 1; i >= 0; i--) {\n                        if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n                            continue;\n                        }\n                        this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n                    }\n                }\n                else {\n                    for (var i = 0; i < sNodes.length; i++) {\n                        if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n                            continue;\n                        }\n                        this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n                    }\n                }\n            }\n            else {\n                this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n            }\n            level = parseInt(dragLi.getAttribute('aria-level'), 10);\n            drop = true;\n        }\n        if (this.fields.dataSource instanceof DataManager === false) {\n            this.preventExpand = false;\n        }\n        if (!isBlazorDrop) {\n            this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n        }\n        else {\n            this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.element, null, level, drop));\n        }\n        this.triggerEvent();\n    };\n    TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n        var checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\n        var collapse = closest(e.target, '.' + COLLAPSIBLE);\n        var expand = closest(e.target, '.' + EXPANDABLE);\n        if (!dragLi.classList.contains('e-disable') && !checkWrapper && ((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3) || (expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19) || (!expand && !collapse))) {\n            if (dropTarget.nodeName === 'LI') {\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n            }\n            else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n                if (dropTarget.firstElementChild.nodeName === 'UL') {\n                    this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n                }\n            }\n            else if ((dropTarget.classList.contains('e-icon-collapsible')) || (dropTarget.classList.contains('e-icon-expandable'))) {\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n            }\n            else {\n                this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\n            }\n        }\n        else {\n            this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\n        }\n    };\n    TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {\n        var dropUl = closest(dropLi, '.' + PARENTITEM);\n        var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        var pre;\n        if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n            pre = false;\n        }\n        else if (e.event.offsetY < 2) {\n            pre = true;\n        }\n        else if (e.target.classList.contains('e-icon-expandable') || (e.target.classList.contains('e-icon-collapsible'))) {\n            if ((e.event.offsetY < 5) || (e.event.offsetX < 3)) {\n                pre = true;\n            }\n            else if ((e.event.offsetY > 15) || (e.event.offsetX > 17)) {\n                pre = false;\n            }\n        }\n        if ((e.target.classList.contains('e-icon-expandable')) || (e.target.classList.contains('e-icon-collapsible'))) {\n            var target = e.target.closest('li');\n            dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n        }\n        else {\n            dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n        }\n        this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateAriaLevel(dragLi);\n        if (dragObj.element.id === this.element.id) {\n            this.updateList();\n        }\n        else {\n            dragObj.updateInstance();\n            this.updateInstance();\n        }\n    };\n    TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {\n        var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        var dropParentUl = closest(dropLi, '.' + PARENTITEM);\n        if (e && (pos < 7) && !isCheck) {\n            dropParentUl.insertBefore(dragLi, dropLi);\n            this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n        }\n        else if (e && (e.target.offsetHeight > 0 && pos > (e.target.offsetHeight - 10)) && !isCheck) {\n            dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n            this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n        }\n        else {\n            var dropUl = this.expandParent(dropLi);\n            var childLi = dropUl.childNodes[index];\n            dropUl.insertBefore(dragLi, childLi);\n            this.moveData(dragLi, childLi, dropUl, true, dragObj);\n        }\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateAriaLevel(dragLi);\n        if (dragObj.element.id === this.element.id) {\n            this.updateList();\n        }\n        else {\n            dragObj.updateInstance();\n            this.updateInstance();\n        }\n    };\n    TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {\n        var dropParentLi = closest(dropUl, '.' + LISTITEM);\n        var id = this.getId(dragLi);\n        var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n        var refId = this.getId(dropLi);\n        var index = this.getDataPos(this.treeData, this.fields, refId);\n        var parentId = this.getId(dropParentLi);\n        if (this.dataType === 1) {\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n            var pos = isNOU(index) ? this.treeData.length : (pre ? index : index + 1);\n            if (isNOU(parentId) && !this.hasPid) {\n                delete removedData[0][this.fields.parentID];\n            }\n            else {\n                var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n                setValue(this.fields.parentID, currPid, removedData[0]);\n            }\n            this.treeData.splice(pos, 0, removedData[0]);\n            if (dragObj.element.id !== this.element.id) {\n                var childData = dragObj.removeChildNodes(id);\n                pos++;\n                for (var i = 0, len = childData.length; i < len; i++) {\n                    this.treeData.splice(pos, 0, childData[i]);\n                    pos++;\n                }\n                dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        else {\n            this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n        }\n    };\n    TreeView.prototype.expandParent = function (dropLi) {\n        var dropIcon = select('div.' + ICON, dropLi);\n        if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n            this.expandAction(dropLi, dropIcon, null);\n        }\n        var dropUl = select('.' + PARENTITEM, dropLi);\n        if (this.preventExpand === true && !dropUl && dropIcon) {\n            this.renderChildNodes(dropLi);\n        }\n        dropUl = select('.' + PARENTITEM, dropLi);\n        if (!isNOU(dropUl) && this.preventExpand === true) {\n            dropUl.style.display = 'none';\n        }\n        if (!isNOU(dropUl) && this.preventExpand === false) {\n            dropUl.style.display = 'block';\n        }\n        if (isNOU(dropUl) && this.preventExpand === true) {\n            if (isNOU(dropIcon)) {\n                ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n            }\n            var icon = select('div.' + ICON, dropLi);\n            if (icon) {\n                icon.classList.add('e-icon-expandable');\n            }\n            dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n            dropLi.appendChild(dropUl);\n            if (icon) {\n                removeClass([icon], COLLAPSIBLE);\n            }\n            else {\n                ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n            }\n            dropLi.setAttribute('aria-expanded', 'false');\n            dropUl.style.display = 'none';\n        }\n        if (isNOU(dropUl)) {\n            this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n            if (isNOU(dropIcon)) {\n                ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n            }\n            var icon = select('div.' + ICON, dropLi);\n            if (icon) {\n                removeClass([icon], EXPANDABLE);\n            }\n            else {\n                ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n                icon = select('div.' + ICON, dropLi);\n                removeClass([icon], EXPANDABLE);\n            }\n            dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n            dropLi.appendChild(dropUl);\n            this.addExpand(dropLi);\n            this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n        }\n        return dropUl;\n    };\n    TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {\n        if (dragParentLi && dragParentUl.childElementCount === 0) {\n            var dragIcon = select('div.' + ICON, dragParentLi);\n            detach(dragParentUl);\n            detach(dragIcon);\n            var parentId = this.getId(dragParentLi);\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n            this.removeExpand(dragParentLi, true);\n        }\n    };\n    TreeView.prototype.updateAriaLevel = function (dragLi) {\n        var level = this.parents(dragLi, '.' + PARENTITEM).length;\n        dragLi.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\n    };\n    TreeView.prototype.updateChildAriaLevel = function (element, level) {\n        if (!isNOU(element)) {\n            var cNodes = element.childNodes;\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var liEle = cNodes[i];\n                liEle.setAttribute('aria-level', '' + level);\n                this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\n            }\n        }\n    };\n    TreeView.prototype.renderVirtualEle = function (e) {\n        var pre;\n        if (e.event.offsetY > e.target.offsetHeight - 2) {\n            pre = false;\n        }\n        else if (e.event.offsetY < 2) {\n            pre = true;\n        }\n        var virEle = this.createElement('div', { className: SIBLING });\n        var index = this.fullRowSelect ? (pre ? 1 : 2) : (pre ? 0 : 1);\n        e.target.insertBefore(virEle, e.target.children[index]);\n    };\n    TreeView.prototype.removeVirtualEle = function () {\n        var sibEle = select('.' + SIBLING);\n        if (sibEle) {\n            detach(sibEle);\n        }\n    };\n    TreeView.prototype.destroyDrag = function () {\n        if (this.dragObj && this.dropObj) {\n            this.dragObj.destroy();\n            this.dropObj.destroy();\n        }\n    };\n    TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n        var dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\n        var dropData = dropLi ? this.getNodeData(dropLi) : null;\n        var draggedNode = obj ? obj.dragLi : dragNode;\n        var draggedNodeData = obj ? obj.dragData : null;\n        var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n        var dragLiParent = obj.dragLi.parentElement;\n        var dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\n        var targetParent = null;\n        var indexValue = null;\n        var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n        var iconClass = null;\n        var node = (drop === true) ? draggedNode : dropLi;\n        var index = node ? closest(node, '.e-list-parent') : null;\n        var i = 0;\n        var position = null;\n        dragParent = (obj.dragLi && dragParent === null) ? closest(dragLiParent, '.' + ROOT) : dragParent;\n        dragParent = (drop === true) ? this.dragParent : dragParent;\n        if (cloneEle) {\n            while (i < 4) {\n                if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\n                    iconClass = iconCss[i];\n                    break;\n                }\n                i++;\n            }\n        }\n        if (index) {\n            var dropTar = 0;\n            for (i = 0; i < index.childElementCount; i++) {\n                dropTar = (drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode) ? ++dropTar : dropTar;\n                if ((drop !== true && index.children[i].classList.contains('e-hover'))) {\n                    indexValue = (event.offsetY >= 23) ? i + 1 : i;\n                    break;\n                }\n                else if (index.children[i] === node) {\n                    indexValue = (event.offsetY >= 23) ? i : i;\n                    break;\n                }\n            }\n            indexValue = (dropTar !== 0) ? --indexValue : indexValue;\n            position = (iconClass == \"e-drop-in\") ? \"Inside\" : ((event.offsetY < 7) ? \"Before\" : \"After\");\n        }\n        if (dropTarget) {\n            if (newParent.length === 0) {\n                targetParent = null;\n            }\n            else if (dropTarget.classList.contains(LISTITEM)) {\n                targetParent = newParent[0];\n            }\n            else {\n                targetParent = newParent[1];\n            }\n        }\n        if (dropLi === draggedNode) {\n            targetParent = dropLi;\n        }\n        if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n            targetParent = dropLi;\n            if (drop !== true) {\n                level = ++level;\n                var parent_2 = targetParent ? select('.e-list-parent', targetParent) : null;\n                indexValue = (parent_2) ? parent_2.children.length : 0;\n                if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {\n                    var parent_3 = targetParent.hasAttribute('data-uid') ?\n                        this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n                    indexValue = (parent_3) ? parent_3.length : 0;\n                }\n            }\n        }\n        return {\n            cancel: false,\n            clonedNode: cloneEle,\n            event: event,\n            draggedNode: draggedNode,\n            draggedNodeData: draggedNodeData,\n            droppedNode: dropLi,\n            droppedNodeData: dropData,\n            dropIndex: indexValue,\n            dropLevel: level,\n            draggedParentNode: dragParent,\n            dropTarget: targetParent,\n            dropIndicator: iconClass,\n            target: target,\n            position: position,\n        };\n    };\n    TreeView.prototype.addFullRow = function (toAdd) {\n        var len = this.liList.length;\n        if (toAdd) {\n            for (var i = 0; i < len; i++) {\n                this.createFullRow(this.liList[i]);\n            }\n        }\n        else {\n            for (var i = 0; i < len; i++) {\n                var rowDiv = select('.' + FULLROW, this.liList[i]);\n                detach(rowDiv);\n            }\n        }\n    };\n    TreeView.prototype.createFullRow = function (item) {\n        var rowDiv = this.createElement('div', { className: FULLROW });\n        item.insertBefore(rowDiv, item.childNodes[0]);\n    };\n    TreeView.prototype.addMultiSelect = function (toAdd) {\n        if (toAdd) {\n            var liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n            for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {\n                var ele = liEles_1[_i];\n                ele.setAttribute('aria-selected', 'false');\n            }\n        }\n        else {\n            var liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n            for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {\n                var ele = liEles_2[_a];\n                ele.removeAttribute('aria-selected');\n            }\n        }\n    };\n    TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {\n        if (level > 0 && !isNOU(element)) {\n            var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var liEle = cNodes[i];\n                var icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\n                if (!isNOU(icon)) {\n                    this.collapseNode(liEle, icon, null);\n                }\n                this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n            }\n        }\n    };\n    TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {\n        var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\n        for (var i = 0, len = cIcons.length; i < len; i++) {\n            var icon = cIcons[i];\n            var liEle = closest(icon, '.' + LISTITEM);\n            this.collapseNode(liEle, icon, null);\n        }\n    };\n    TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {\n        if (level > 0 && !isNOU(element)) {\n            var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n            for (var i = 0, len = eNodes.length; i < len; i++) {\n                var liEle = eNodes[i];\n                var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\n                if (!isNOU(icon)) {\n                    this.expandAction(liEle, icon, null);\n                }\n                this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n            }\n        }\n    };\n    TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {\n        var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\n        for (var i = 0, len = eIcons.length; i < len; i++) {\n            var icon = eIcons[i];\n            var liEle = closest(icon, '.' + LISTITEM);\n            this.expandAction(liEle, icon, null, true);\n        }\n    };\n    TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {\n        var vNodes = Array.prototype.slice.call(nodes);\n        if (excludeHiddenNodes) {\n            for (var i = 0; i < vNodes.length; i++) {\n                if (!isVisible(vNodes[i])) {\n                    vNodes.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        return vNodes;\n    };\n    TreeView.prototype.removeNode = function (node) {\n        var dragParentUl = closest(node, '.' + PARENTITEM);\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        if (!isNOU(this.nodeTemplateFn)) {\n            this.destroyTemplate(node);\n        }\n        detach(node);\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateInstance();\n        this.removeData(node);\n    };\n    TreeView.prototype.updateInstance = function () {\n        this.updateList();\n        this.updateSelectedNodes();\n        this.updateExpandedNodes();\n        this.allowServerDataBinding = false;\n        this.updateServerProperties(\"expand\");\n        this.updateServerProperties(\"check\");\n        this.updateServerProperties(\"select\");\n        this.allowServerDataBinding = true;\n    };\n    TreeView.prototype.updateServerProperties = function (action) {\n        if (this.isBlazorPlatform) {\n            if (action == \"expand\") {\n                this.isBlazorExpandedNodes = this.expandedNodes;\n                this.setProperties({ expandedNodes: [] }, true);\n            }\n            else if (action == \"check\") {\n                this.setProperties({ checkedNodes: this.checkedNodes }, true);\n            }\n            else {\n                this.setProperties({ selectedNodes: this.selectedNodes }, true);\n            }\n        }\n    };\n    TreeView.prototype.updateList = function () {\n        this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\n    };\n    TreeView.prototype.updateSelectedNodes = function () {\n        if (!this.isBlazorPlatform || (this.isBlazorPlatform && !this.initialRender)) {\n            this.setProperties({ selectedNodes: [] }, true);\n            var sNodes = selectAll('.' + ACTIVE, this.element);\n            this.selectGivenNodes(sNodes);\n        }\n        else if (this.isBlazorPlatform && this.initialRender) {\n            var sNodes = selectAll('.' + ACTIVE, this.element);\n            for (var a = 0; a < sNodes.length; a++) {\n                var id = sNodes[a].getAttribute(\"data-uid\").toString();\n                if (!isNOU(id) && this.selectedNodes.indexOf(id) === -1) {\n                    this.selectedNodes.push(id);\n                }\n            }\n        }\n    };\n    TreeView.prototype.updateExpandedNodes = function () {\n        if (!this.isBlazorPlatform || (this.isBlazorPlatform && !this.initialRender)) {\n            this.setProperties({ expandedNodes: [] }, true);\n            var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n            for (var i = 0, len = eNodes.length; i < len; i++) {\n                this.addExpand(eNodes[i]);\n            }\n        }\n        else if (this.isBlazorPlatform && this.initialRender) {\n            var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n            for (var a = 0; a < eNodes.length; a++) {\n                var id = eNodes[a].getAttribute(\"data-uid\").toString();\n                if (!isNOU(id) && this.expandedNodes.indexOf(id) === -1) {\n                    this.expandedNodes.push(id);\n                }\n            }\n        }\n    };\n    TreeView.prototype.removeData = function (node) {\n        if (this.dataType === 1) {\n            var dm = new DataManager(this.treeData);\n            var id = this.getId(node);\n            var data = {};\n            var newId = this.isNumberTypeId ? parseFloat(id) : id;\n            data[this.fields.id] = newId;\n            dm.remove(this.fields.id, data);\n            this.removeChildNodes(id);\n        }\n        else {\n            var id = this.getId(node);\n            this.updateChildField(this.treeData, this.fields, id, null, null, true);\n        }\n    };\n    TreeView.prototype.removeChildNodes = function (parentId) {\n        var cNodes = this.getChildGroup(this.groupedData, parentId, false);\n        var childData = [];\n        if (cNodes) {\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var dm = new DataManager(this.treeData);\n                var id = getValue(this.fields.id, cNodes[i]).toString();\n                var data = {};\n                var currId = this.isNumberTypeId ? parseFloat(id) : id;\n                data[this.fields.id] = currId;\n                var nodeData = dm.remove(this.fields.id, data);\n                childData.push(nodeData[0]);\n                this.removeChildNodes(id);\n            }\n        }\n        return childData;\n    };\n    TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var liEle = this.getElement(nodes[i]);\n            if (isNOU(liEle)) {\n                continue;\n            }\n            var icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\n            if (!isNOU(icon)) {\n                toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\n            }\n        }\n    };\n    TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {\n        if (nodes.length === 0) {\n            return;\n        }\n        var sNodes = this.getSortedData(nodes);\n        var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n        if (isRemote) {\n            this.updateMapper(level);\n        }\n        var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n        var dropUl;\n        if (!dropEle) {\n            dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\n        }\n        else {\n            dropUl = dropEle;\n        }\n        var refNode = dropUl.childNodes[index];\n        for (var i = 0; i < li.length; i++) {\n            dropUl.insertBefore(li[i], refNode);\n        }\n        if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n            this.updateBlazorTemplate();\n        }\n        var id = this.getId(dropLi);\n        if (this.dataType === 1) {\n            this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n            var refId = this.getId(refNode);\n            var pos = isNOU(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n            for (var j = 0; j < nodes.length; j++) {\n                if (!isNOU(id)) {\n                    var currId = this.isNumberTypeId ? parseFloat(id) : id;\n                    setValue(this.fields.parentID, currId, nodes[j]);\n                }\n                this.treeData.splice(pos, 0, nodes[j]);\n                pos++;\n            }\n        }\n        else {\n            this.addChildData(this.treeData, this.fields, id, nodes, index);\n        }\n        this.finalizeNode(dropUl);\n    };\n    TreeView.prototype.updateMapper = function (level) {\n        var mapper = (level === 1) ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n        this.updateListProp(mapper);\n    };\n    TreeView.prototype.updateListProp = function (mapper) {\n        var prop = this.getActualProperties(mapper);\n        this.listBaseOption.fields = prop;\n        this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n    };\n    TreeView.prototype.getDataPos = function (obj, mapper, id) {\n        var pos = null;\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                return i;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var data = getValue(mapper.child, obj[i]);\n                pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n                if (pos !== null) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var items = getValue('child', obj[i]);\n                pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n                if (pos !== null) {\n                    break;\n                }\n            }\n        }\n        return pos;\n    };\n    TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {\n        var updated;\n        if (isNOU(id)) {\n            index = isNOU(index) ? obj.length : index;\n            for (var k = 0, len = data.length; k < len; k++) {\n                obj.splice(index, 0, data[k]);\n                index++;\n            }\n            return updated;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                if ((typeof mapper.child === 'string' && (obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null)) ||\n                    ((this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) && obj[i].hasOwnProperty('child'))) {\n                    var key = (typeof mapper.child === 'string') ? mapper.child : 'child';\n                    var childData = getValue(key, obj[i]);\n                    if (isNOU(childData)) {\n                        childData = [];\n                    }\n                    index = isNOU(index) ? childData.length : index;\n                    for (var k = 0, len = data.length; k < len; k++) {\n                        childData.splice(index, 0, data[k]);\n                        index++;\n                    }\n                }\n                else {\n                    var key = (typeof mapper.child === 'string') ? mapper.child : 'child';\n                    obj[i][key] = data;\n                }\n                return true;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var childObj = getValue(mapper.child, obj[i]);\n                updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n                if (updated !== undefined) {\n                    break;\n                }\n            }\n            else if ((this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) && !isNOU(getValue('child', obj[i]))) {\n                var childData = getValue('child', obj[i]);\n                updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n                if (updated !== undefined) {\n                    break;\n                }\n            }\n        }\n        return updated;\n    };\n    TreeView.prototype.doDisableAction = function (nodes) {\n        var validNodes = this.nodeType(nodes);\n        var validID = this.checkValidId(validNodes);\n        this.validArr = [];\n        for (var i = 0, len = validID.length; i < len; i++) {\n            var id = validID[i][this.fields.id].toString();\n            if (id && this.disableNode.indexOf(id) === -1) {\n                this.disableNode.push(id);\n            }\n            var liEle = this.getElement(id);\n            if (liEle) {\n                liEle.setAttribute('aria-disabled', 'true');\n                addClass([liEle], DISABLE);\n            }\n        }\n    };\n    TreeView.prototype.doEnableAction = function (nodes) {\n        var strNodes = this.nodeType(nodes);\n        for (var i = 0, len = strNodes.length; i < len; i++) {\n            var liEle = this.getElement(strNodes[i]);\n            var id = strNodes[i];\n            if (id && this.disableNode.indexOf(id) !== -1) {\n                this.disableNode.splice(this.disableNode.indexOf(id), 1);\n            }\n            if (liEle) {\n                liEle.removeAttribute('aria-disabled');\n                removeClass([liEle], DISABLE);\n            }\n        }\n    };\n    TreeView.prototype.nodeType = function (nodes) {\n        var validID = [];\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var id = void 0;\n            if (typeof nodes[i] == \"string\") {\n                id = (nodes[i]) ? nodes[i].toString() : null;\n            }\n            else if (typeof nodes[i] === \"object\") {\n                id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\n            }\n            if (validID.indexOf(id) == -1) {\n                validID.push(id);\n            }\n        }\n        return validID;\n    };\n    TreeView.prototype.checkValidId = function (node) {\n        var _this = this;\n        if (this.dataType === 1) {\n            this.validArr = this.treeData.filter(function (data) {\n                return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;\n            });\n        }\n        else if (this.dataType === 2) {\n            for (var k = 0; k < this.treeData.length; k++) {\n                var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\n                if (node.indexOf(id) !== -1) {\n                    this.validArr.push(this.treeData[k]);\n                }\n                var childItems = getValue(this.fields.child.toString(), this.treeData[k]);\n                if (childItems) {\n                    this.filterNestedChild(childItems, node);\n                }\n            }\n        }\n        return this.validArr;\n    };\n    TreeView.prototype.filterNestedChild = function (treeData, nodes) {\n        for (var k = 0; k < treeData.length; k++) {\n            var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\n            if (nodes.indexOf(id) !== -1) {\n                this.validArr.push(treeData[k]);\n            }\n            var childItems = getValue(this.fields.child.toString(), treeData[k]);\n            if (childItems) {\n                this.filterNestedChild(childItems, nodes);\n            }\n        }\n    };\n    TreeView.prototype.setTouchClass = function () {\n        var ele = closest(this.element, '.' + BIGGER);\n        this.touchClass = isNOU(ele) ? '' : SMALL;\n    };\n    TreeView.prototype.updatePersistProp = function () {\n        this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n        var sleNodes = this.selectedNodes;\n        for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {\n            this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\n        }\n        var enodes = this.expandedNodes;\n        if (this.isBlazorPlatform) {\n            enodes = this.isBlazorExpandedNodes;\n        }\n        for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {\n            this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\n        }\n        if (this.showCheckBox) {\n            this.removeField(this.treeData, this.fields, ['isChecked']);\n            var cnodes = this.checkedNodes;\n            for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n                this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\n            }\n        }\n    };\n    TreeView.prototype.removeField = function (obj, mapper, names) {\n        if (isNOU(obj) || isNOU(mapper)) {\n            return;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            for (var j = 0; j < names.length; j++) {\n                var field = this.getMapperProp(mapper, names[j]);\n                if (!isNOU(obj[i][field])) {\n                    delete obj[i][field];\n                }\n            }\n            if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\n            }\n        }\n    };\n    TreeView.prototype.getMapperProp = function (mapper, fieldName) {\n        switch (fieldName) {\n            case 'selected':\n                return !isNOU(mapper.selected) ? mapper.selected : 'selected';\n            case 'expanded':\n                return !isNOU(mapper.expanded) ? mapper.expanded : 'expanded';\n            case 'isChecked':\n                return !isNOU(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n            case 'hasChildren':\n                return !isNOU(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n            default:\n                return fieldName;\n        }\n    };\n    TreeView.prototype.updateField = function (obj, mapper, id, key, value) {\n        var childNodes;\n        if (isNOU(id)) {\n            return;\n        }\n        else if (this.dataType === 1) {\n            var newId = this.isNumberTypeId ? parseFloat(id) : id;\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\n            setValue(this.getMapperProp(mapper, key), value, resultData[0]);\n        }\n        else {\n            this.updateChildField(obj, mapper, id, key, value);\n        }\n    };\n    TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {\n        var removedData;\n        if (isNOU(obj)) {\n            return removedData;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                if (remove) {\n                    removedData = obj.splice(i, 1);\n                }\n                else {\n                    setValue(this.getMapperProp(mapper, key), value, obj[i]);\n                    removedData = [];\n                }\n                return removedData;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var childData = getValue(mapper.child, obj[i]);\n                removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);\n                if (removedData !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var childItems = getValue('child', obj[i]);\n                removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);\n                if (removedData !== undefined) {\n                    break;\n                }\n            }\n        }\n        return removedData;\n    };\n    TreeView.prototype.triggerEvent = function () {\n        this.updateTemplateForBlazor();\n        this.renderReactTemplates();\n        var eventArgs = { data: this.treeData };\n        this.trigger('dataSourceChanged', eventArgs);\n    };\n    TreeView.prototype.updateBlazorTemplate = function () {\n        updateBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate', this, false);\n    };\n    TreeView.prototype.clientUpdateInitial = function () {\n        this.blazorInitialRender = true;\n    };\n    TreeView.prototype.wireInputEvents = function (inpEle) {\n        EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n    };\n    TreeView.prototype.wireEditingEvents = function (toBind) {\n        var _this = this;\n        if (toBind && !this.disabled) {\n            var proxy_2 = this;\n            this.touchEditObj = new Touch(this.element, {\n                tap: function (e) {\n                    if (_this.isDoubleTapped(e) && e.tapCount === 2) {\n                        e.originalEvent.preventDefault();\n                        proxy_2.editingHandler(e.originalEvent);\n                    }\n                }\n            });\n        }\n        else {\n            if (this.touchEditObj) {\n                this.touchEditObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.wireClickEvent = function (toBind) {\n        if (toBind) {\n            var proxy_3 = this;\n            this.touchClickObj = new Touch(this.element, {\n                tap: function (e) {\n                    proxy_3.clickHandler(e);\n                }\n            });\n        }\n        else {\n            if (this.touchClickObj) {\n                this.touchClickObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.wireExpandOnEvent = function (toBind) {\n        var _this = this;\n        if (toBind) {\n            var proxy_4 = this;\n            this.touchExpandObj = new Touch(this.element, {\n                tap: function (e) {\n                    if ((_this.expandOnType === 'Click' || (_this.expandOnType === 'DblClick' && _this.isDoubleTapped(e) && e.tapCount === 2))\n                        && e.originalEvent.which !== 3) {\n                        proxy_4.expandHandler(e);\n                    }\n                }\n            });\n        }\n        else {\n            if (this.touchExpandObj) {\n                this.touchExpandObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.mouseDownHandler = function (e) {\n        this.mouseDownStatus = true;\n        if (e.shiftKey || e.ctrlKey) {\n            e.preventDefault();\n        }\n        if (e.ctrlKey && this.allowMultiSelection) {\n            EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n        }\n    };\n    ;\n    TreeView.prototype.preventContextMenu = function (e) {\n        e.preventDefault();\n    };\n    TreeView.prototype.wireEvents = function () {\n        EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n        this.wireClickEvent(true);\n        if (this.expandOnType !== 'None') {\n            this.wireExpandOnEvent(true);\n        }\n        EventHandler.add(this.element, 'focus', this.focusIn, this);\n        EventHandler.add(this.element, 'blur', this.focusOut, this);\n        EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n        EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n        this.keyboardModule = new KeyboardEvents(this.element, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n    };\n    TreeView.prototype.unWireEvents = function () {\n        EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n        this.wireClickEvent(false);\n        this.wireExpandOnEvent(false);\n        EventHandler.remove(this.element, 'focus', this.focusIn);\n        EventHandler.remove(this.element, 'blur', this.focusOut);\n        EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n        EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n        if (!this.disabled) {\n            this.keyboardModule.destroy();\n        }\n    };\n    TreeView.prototype.parents = function (element, selector) {\n        var matched = [];\n        var el = element.parentNode;\n        while (!isNOU(el)) {\n            if (matches(el, selector)) {\n                matched.push(el);\n            }\n            el = el.parentNode;\n        }\n        return matched;\n    };\n    TreeView.prototype.isDoubleTapped = function (e) {\n        var target = e.originalEvent.target;\n        var secondTap;\n        if (target && e.tapCount) {\n            if (e.tapCount === 1) {\n                this.firstTap = closest(target, '.' + LISTITEM);\n            }\n            else if (e.tapCount === 2) {\n                secondTap = closest(target, '.' + LISTITEM);\n            }\n        }\n        return (this.firstTap === secondTap);\n    };\n    TreeView.prototype.isDescendant = function (parent, child) {\n        var node = child.parentNode;\n        while (!isNOU(node)) {\n            if (node === parent) {\n                return true;\n            }\n            node = node.parentNode;\n        }\n        return false;\n    };\n    TreeView.prototype.showSpinner = function (element) {\n        addClass([element], LOAD);\n        createSpinner({\n            target: element,\n            width: Browser.isDevice ? 16 : 14\n        }, this.createElement);\n        showSpinner(element);\n    };\n    TreeView.prototype.hideSpinner = function (element) {\n        hideSpinner(element);\n        element.innerHTML = '';\n        removeClass([element], LOAD);\n    };\n    TreeView.prototype.setCheckedNodes = function (nodes) {\n        nodes = JSON.parse(JSON.stringify(nodes));\n        this.uncheckAll(this.checkedNodes);\n        this.setIndeterminate(nodes);\n        if (nodes.length > 0) {\n            this.checkAll(nodes);\n        }\n    };\n    /**\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\n     */\n    TreeView.prototype.setValidCheckedNode = function (node) {\n        if (this.dataType === 1) {\n            var mapper = this.fields;\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\n            if (resultData[0]) {\n                this.setChildCheckState(resultData, node, resultData[0]);\n                if (this.autoCheck) {\n                    var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n                    var childNodes = this.getChildNodes(this.treeData, parent_4);\n                    var count = 0;\n                    for (var len = 0; len < childNodes.length; len++) {\n                        var childId = childNodes[len][this.fields.id].toString();\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\n                            count++;\n                        }\n                    }\n                    if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {\n                        this.checkedNodes.push(parent_4);\n                    }\n                }\n            }\n        }\n        else if (this.dataType === 2) {\n            for (var a = 0; a < this.treeData.length; a++) {\n                var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\n                if (index === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                    break;\n                }\n                var childItems = getValue(this.fields.child.toString(), this.treeData[a]);\n                if (childItems) {\n                    this.setChildCheckState(childItems, node, this.treeData[a]);\n                }\n            }\n        }\n    };\n    /**\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\n     */\n    TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {\n        var checkedParent;\n        var count = 0;\n        if (this.dataType === 1) {\n            if (treeData) {\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n            }\n            for (var index = 0; index < childItems.length; index++) {\n                var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\n                if (treeData && checkedParent && this.autoCheck) {\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n                        this.checkedNodes.push(checkNode);\n                    }\n                }\n                if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                }\n                var subChildItems = this.getChildNodes(this.treeData, checkNode);\n                if (subChildItems) {\n                    this.setChildCheckState(subChildItems, node, treeData);\n                }\n            }\n        }\n        else {\n            if (treeData) {\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n            }\n            for (var index = 0; index < childItems.length; index++) {\n                var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n                if (treeData && checkedParent && this.autoCheck) {\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n                        this.checkedNodes.push(checkedChild);\n                    }\n                }\n                if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                }\n                var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n                if (subChildItems) {\n                    this.setChildCheckState(subChildItems, node, childItems[index]);\n                }\n                if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n                    count++;\n                }\n                if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n                    this.checkedNodes.push(checkedParent);\n                }\n            }\n        }\n    };\n    TreeView.prototype.setIndeterminate = function (nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            this.setValidCheckedNode(nodes[i]);\n        }\n    };\n    TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {\n        if (this.dataType === 1) {\n            var pos = this.getDataPos(this.treeData, this.fields, id);\n            this.treeData.splice(pos, 1, newData);\n            if (isRefreshChild) {\n                this.removeChildNodes(id);\n                for (var j = 0; j < childValue.length; j++) {\n                    this.treeData.splice(pos, 0, childValue[j]);\n                    pos++;\n                }\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        else {\n            this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n        }\n    };\n    TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {\n        var found;\n        for (var i = 0, objlen = treeData.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, treeData[i]);\n            if (treeData[i] && nodeId && nodeId.toString() === currID) {\n                treeData[i] = newData[0];\n                return true;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, treeData[i]))) {\n                var childObj = getValue(mapper.child, treeData[i]);\n                found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n                if (found !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', treeData[i]))) {\n                var childData = getValue('child', treeData[i]);\n                found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n                if (found !== undefined) {\n                    break;\n                }\n            }\n        }\n        return found;\n    };\n    TreeView.prototype.dynamicState = function () {\n        this.setDragAndDrop(this.allowDragAndDrop);\n        this.wireEditingEvents(this.allowEditing);\n        if (!this.disabled) {\n            this.wireEvents();\n            this.setRipple();\n        }\n        else {\n            this.unWireEvents();\n            this.rippleFn();\n            this.rippleIconFn();\n        }\n    };\n    TreeView.prototype.crudOperation = function (operation, nodes, target, newText, newNode, index, prevent) {\n        var _this = this;\n        var data = this.fields.dataSource;\n        var matchedArr = [];\n        var query = this.getQuery(this.fields);\n        var key = this.fields.id;\n        var crud;\n        var changes = {\n            addedRecords: [],\n            deletedRecords: [],\n            changedRecords: []\n        };\n        var nodesID = [];\n        if (nodes) {\n            nodesID = this.nodeType(nodes);\n        }\n        else if (target) {\n            if (typeof target == \"string\") {\n                nodesID[0] = target.toString();\n            }\n            else if (typeof target === \"object\") {\n                nodesID[0] = target.getAttribute(\"data-uid\").toString();\n            }\n        }\n        for (var i = 0, len = nodesID.length; i < len; i++) {\n            var liEle = this.getElement(nodesID[i]);\n            if (isNullOrUndefined(liEle)) {\n                continue;\n            }\n            var removedData = this.getNodeObject(nodesID[i]);\n            matchedArr.push(removedData);\n        }\n        switch (operation) {\n            case 'delete':\n                if (nodes.length == 1) {\n                    crud = data.remove(key, matchedArr[0], query.fromTable, query);\n                }\n                else {\n                    changes.deletedRecords = matchedArr;\n                    crud = data.saveChanges(changes, key, query.fromTable, query);\n                }\n                crud.then(function (e) { return _this.deleteSuccess(nodesID); })\n                    .catch(function (e) { return _this.dmFailure(e); });\n                break;\n            case 'update':\n                matchedArr[0][this.fields.text] = newText;\n                crud = data.update(key, matchedArr[0], query.fromTable, query);\n                crud.then(function (e) { return _this.editSucess(target, newText, prevent); })\n                    .catch(function (e) { return _this.dmFailure(e, target, prevent); });\n                break;\n            case 'insert':\n                if (newNode.length == 1) {\n                    crud = data.insert(newNode[0], query.fromTable, query);\n                }\n                else {\n                    var arr = [];\n                    for (var i = 0, len = newNode.length; i < len; i++) {\n                        arr.push(newNode[i]);\n                    }\n                    changes.addedRecords = arr;\n                    crud = data.saveChanges(changes, key, query.fromTable, query);\n                }\n                crud.then(function (e) {\n                    var dropLi = _this.getElement(target);\n                    _this.addSuccess(newNode, dropLi, index);\n                    _this.preventExpand = false;\n                }).catch(function (e) { return _this.dmFailure(e); });\n                break;\n        }\n    };\n    TreeView.prototype.deleteSuccess = function (nodes) {\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var liEle = this.getElement(nodes[i]);\n            if (isNOU(liEle)) {\n                continue;\n            }\n            this.removeNode(liEle);\n        }\n        if (this.dataType === 1) {\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        this.triggerEvent();\n    };\n    TreeView.prototype.editSucess = function (target, newText, prevent) {\n        var liEle = this.getElement(target);\n        var txtEle = select('.' + LISTTEXT, liEle);\n        this.appendNewText(liEle, txtEle, newText, prevent);\n    };\n    TreeView.prototype.addSuccess = function (nodes, dropLi, index) {\n        var dropUl;\n        var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n        var proxy = this;\n        if (dropLi && icon && icon.classList.contains(EXPANDABLE) &&\n            dropLi.querySelector('.' + PARENTITEM) === null) {\n            proxy.renderChildNodes(dropLi, null, function () {\n                dropUl = dropLi.querySelector('.' + PARENTITEM);\n                proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);\n                proxy.triggerEvent();\n            });\n        }\n        else {\n            this.addGivenNodes(nodes, dropLi, index, true);\n            this.triggerEvent();\n        }\n    };\n    TreeView.prototype.dmFailure = function (e, target, prevent) {\n        if (target) {\n            this.updatePreviousText(target, prevent);\n        }\n        this.trigger('actionFailure', { error: e });\n    };\n    TreeView.prototype.updatePreviousText = function (target, prevent) {\n        var liEle = this.getElement(target);\n        var txtEle = select('.' + LISTTEXT, liEle);\n        this.updateText(liEle, txtEle, this.oldText, prevent);\n    };\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {TreeView} newProp\n     * @param  {TreeView} oldProp\n     * @returns void\n     * @private\n     */\n    // tslint:disable-next-line:max-func-body-length\n    TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'allowDragAndDrop':\n                    this.setDragAndDrop(this.allowDragAndDrop);\n                    break;\n                case 'dragArea':\n                    if (this.allowDragAndDrop) {\n                        this.dragObj.dragArea = this.dragArea;\n                    }\n                    break;\n                case 'allowEditing':\n                    this.wireEditingEvents(this.allowEditing);\n                    break;\n                case 'allowMultiSelection':\n                    if (this.selectedNodes.length > 1) {\n                        var sNode = this.getElement(this.selectedNodes[0]);\n                        this.isLoaded = false;\n                        this.removeSelectAll();\n                        this.selectNode(sNode, null);\n                        this.isLoaded = true;\n                    }\n                    this.setMultiSelect(this.allowMultiSelection);\n                    this.addMultiSelect(this.allowMultiSelection);\n                    break;\n                case 'checkedNodes':\n                    if (this.showCheckBox) {\n                        this.checkedNodes = oldProp.checkedNodes;\n                        this.setCheckedNodes(newProp.checkedNodes);\n                    }\n                    break;\n                case 'autoCheck':\n                    if (this.showCheckBox) {\n                        this.autoCheck = newProp.autoCheck;\n                        this.ensureIndeterminate();\n                    }\n                    break;\n                case 'cssClass':\n                    this.setCssClass(oldProp.cssClass, newProp.cssClass);\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'expandedNodes':\n                    this.isAnimate = false;\n                    if (!this.isBlazorPlatform) {\n                        this.setProperties({ expandedNodes: [] }, true);\n                    }\n                    this.collapseAll();\n                    this.isInitalExpand = true;\n                    if (!this.isBlazorPlatform) {\n                        this.setProperties({ expandedNodes: isNOU(newProp.expandedNodes) ? [] : newProp.expandedNodes }, true);\n                    }\n                    this.doExpandAction();\n                    this.isInitalExpand = false;\n                    this.isAnimate = true;\n                    break;\n                case 'expandOn':\n                    this.wireExpandOnEvent(false);\n                    this.setExpandOnType();\n                    if (this.expandOnType !== 'None' && !this.disabled) {\n                        this.wireExpandOnEvent(true);\n                    }\n                    break;\n                case 'disabled':\n                    this.setDisabledMode();\n                    this.dynamicState();\n                    break;\n                case 'fields':\n                    this.isAnimate = false;\n                    this.isFieldChange = true;\n                    this.initialRender = true;\n                    if (!this.blazorInitialRender) {\n                        this.reRenderNodes();\n                    }\n                    this.blazorInitialRender = false;\n                    this.initialRender = false;\n                    this.isAnimate = true;\n                    this.isFieldChange = false;\n                    break;\n                case 'fullRowSelect':\n                    this.setFullRow(this.fullRowSelect);\n                    this.addFullRow(this.fullRowSelect);\n                    break;\n                case 'loadOnDemand':\n                    if (this.loadOnDemand === false && !this.onLoaded) {\n                        var nodes = this.element.querySelectorAll('li');\n                        var i = 0;\n                        while (i < nodes.length) {\n                            if (nodes[i].getAttribute('aria-expanded') !== 'true') {\n                                this.renderChildNodes(nodes[i], true, null, true);\n                            }\n                            i++;\n                        }\n                        this.onLoaded = true;\n                    }\n                    break;\n                case 'nodeTemplate':\n                    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n                    this.reRenderNodes();\n                    break;\n                case 'selectedNodes':\n                    this.removeSelectAll();\n                    this.setProperties({ selectedNodes: newProp.selectedNodes }, true);\n                    this.doSelectionAction();\n                    break;\n                case 'showCheckBox':\n                    this.reRenderNodes();\n                    break;\n                case 'sortOrder':\n                    this.reRenderNodes();\n                    break;\n                case 'fullRowNavigable':\n                    this.setProperties({ fullRowNavigable: newProp.fullRowNavigable }, true);\n                    this.listBaseOption.itemNavigable = newProp.fullRowNavigable;\n                    this.reRenderNodes();\n                    break;\n            }\n        }\n    };\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n     */\n    TreeView.prototype.destroy = function () {\n        resetBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate');\n        this.clearTemplate();\n        this.element.removeAttribute('aria-activedescendant');\n        this.element.removeAttribute('tabindex');\n        this.unWireEvents();\n        this.wireEditingEvents(false);\n        if (!this.disabled) {\n            this.rippleFn();\n            this.rippleIconFn();\n        }\n        this.setCssClass(this.cssClass, null);\n        this.setDragAndDrop(false);\n        this.setFullRow(false);\n        if (this.isBlazorPlatform) {\n            this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n        }\n        if (this.ulElement && this.ulElement.parentElement) {\n            this.ulElement.parentElement.removeChild(this.ulElement);\n        }\n        if (!this.isBlazorPlatform) {\n            _super.prototype.destroy.call(this);\n        }\n    };\n    /**\n     * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\n     * then the nodes are added as children of the given parentID or in the root level of TreeView.\n     * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\n     * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n     */\n    TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {\n        if (isNOU(nodes)) {\n            return;\n        }\n        nodes = JSON.parse(JSON.stringify(nodes));\n        var dropLi = this.getElement(target);\n        this.preventExpand = preventTargetExpand;\n        if (this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n            if (!this.isOffline) {\n                this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);\n            }\n            else {\n                this.addSuccess(nodes, dropLi, index);\n            }\n        }\n        else if (this.dataType === 2) {\n            this.addGivenNodes(nodes, dropLi, index);\n        }\n        else {\n            if (dropLi) {\n                this.addGivenNodes(nodes, dropLi, index);\n            }\n            else {\n                nodes = this.getSortedData(nodes);\n                for (var i = 0; i < nodes.length; i++) {\n                    var pid = getValue(this.fields.parentID, nodes[i]);\n                    dropLi = pid ? this.getElement(pid.toString()) : pid;\n                    this.addGivenNodes([nodes[i]], dropLi, index);\n                }\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        this.updateCheckedStateFromDS();\n        if (this.showCheckBox && dropLi) {\n            this.ensureParentCheckState(dropLi);\n        }\n        if ((this.fields.dataSource instanceof DataManager === false) || (this.fields.dataSource instanceof DataManager) && (this.fields.dataSource.adaptorName === 'BlazorAdaptor')) {\n            this.preventExpand = false;\n            this.triggerEvent();\n        }\n    };\n    /**\n     * Instead of clicking on the TreeView node for editing, we can enable it by using\n     * `beginEdit` property. On passing the node ID or element through this property, the edit textBox\n     * will be created for the particular node thus allowing us to edit it.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     */\n    TreeView.prototype.beginEdit = function (node) {\n        var ele = this.getElement(node);\n        if (isNOU(ele) || this.disabled) {\n            return;\n        }\n        this.createTextbox(ele, null);\n    };\n    /**\n     * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\n     * as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    TreeView.prototype.checkAll = function (nodes) {\n        if (this.showCheckBox) {\n            this.doCheckBoxAction(nodes, true);\n        }\n    };\n    /**\n     * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\n     * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\n     * a specific level of nodes, set **level** as argument to collapseAll method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\n     * @param  {number} level - TreeView nodes will collapse up to the given level.\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\n     */\n    TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {\n        if (!isNOU(nodes)) {\n            this.doGivenAction(nodes, COLLAPSIBLE, false);\n        }\n        else {\n            if (level > 0) {\n                this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n            }\n            else {\n                this.collapseAllNodes(excludeHiddenNodes);\n            }\n        }\n    };\n    /**\n     * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     */\n    TreeView.prototype.disableNodes = function (nodes) {\n        if (!isNOU(nodes)) {\n            this.doDisableAction(nodes);\n        }\n    };\n    /**\n     * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     */\n    TreeView.prototype.enableNodes = function (nodes) {\n        if (!isNOU(nodes)) {\n            this.doEnableAction(nodes);\n        }\n    };\n    /**\n     * Ensures visibility of the TreeView node by using node ID or node element.\n     * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\n     * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\n     */\n    TreeView.prototype.ensureVisible = function (node) {\n        var liEle = this.getElement(node);\n        if (isNOU(liEle)) {\n            return;\n        }\n        var parents = this.parents(liEle, '.' + LISTITEM);\n        this.expandAll(parents);\n        setTimeout(function () { liEle.scrollIntoView(true); }, 450);\n    };\n    /**\n     * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\n     * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\n     * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     * @param  {number} level - TreeView nodes will expand up to the given level.\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\n     */\n    TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {\n        if (!isNOU(nodes)) {\n            this.doGivenAction(nodes, EXPANDABLE, true);\n        }\n        else {\n            if (level > 0) {\n                this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n            }\n            else {\n                this.expandAllNodes(excludeHiddenNodes);\n            }\n        }\n    };\n    /**\n     * Gets all the checked nodes including child, whether it is loaded or not.\n     */\n    TreeView.prototype.getAllCheckedNodes = function () {\n        var checkNodes = this.checkedNodes;\n        return checkNodes;\n    };\n    /**\n    * Gets all the disabled nodes including child, whether it is loaded or not.\n    */\n    TreeView.prototype.getDisabledNodes = function () {\n        var disabledNodes = this.disableNode;\n        return disabledNodes;\n    };\n    /**\n     * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     * @BlazorType NodeData\n     */\n    TreeView.prototype.getNode = function (node) {\n        var ele = this.getElement(node);\n        return this.getNodeData(ele, true);\n    };\n    /**\n     * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\n     * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\n     * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\n     * of the corresponding node otherwise it will return the entire updated data source of TreeView.\n     * * The updated data source also contains custom attributes if you specified in data source.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     * @isGenericType true\n     */\n    TreeView.prototype.getTreeData = function (node) {\n        var id = this.getId(node);\n        this.updatePersistProp();\n        if (isNOU(id)) {\n            return this.treeData;\n        }\n        else {\n            var data = this.getNodeObject(id);\n            return isNOU(data) ? [] : [data];\n        }\n    };\n    /**\n     * Moves the collection of nodes within the same TreeView based on target or its index position.\n     * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  {number} index - Specifies the index to place the moved nodes in the target element.\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n     */\n    TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {\n        var dropLi = this.getElement(target);\n        if (isNOU(dropLi)) {\n            return;\n        }\n        for (var i = 0; i < sourceNodes.length; i++) {\n            var dragLi = this.getElement(sourceNodes[i]);\n            if (isNOU(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n                continue;\n            }\n            this.preventExpand = preventTargetExpand;\n            this.dropAsChildNode(dragLi, dropLi, this, index);\n        }\n        if (this.fields.dataSource instanceof DataManager === false) {\n            this.preventExpand = false;\n        }\n        this.triggerEvent();\n    };\n    /**\n     * Refreshes a particular node of the TreeView.\n     * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\n     * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\n     */\n    TreeView.prototype.refreshNode = function (target, newData) {\n        if (isNOU(target) || isNOU(newData)) {\n            return;\n        }\n        var id;\n        var isRefreshChild = false;\n        if (this.dataType == 1 && newData.length > 1) {\n            isRefreshChild = true;\n        }\n        else if (this.dataType == 2 && newData.length === 1) {\n            var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\n            if (!isNOU(updatedChildValue)) {\n                isRefreshChild = true;\n            }\n        }\n        var liEle = this.getElement(target);\n        id = liEle ? liEle.getAttribute('data-uid') : ((target) ? target.toString() : null);\n        this.refreshData = this.getNodeObject(id);\n        newData = JSON.parse(JSON.stringify(newData));\n        // tslint:disable\n        var newNodeData;\n        var parentData;\n        if (this.dataType == 1 && isRefreshChild) {\n            for (var k = 0; k < newData.length; k++) {\n                if (isNOU(newData[k][this.fields.parentID])) {\n                    parentData = newData[k];\n                    newData.splice(k, 1);\n                    break;\n                }\n            }\n            newNodeData = extend({}, this.refreshData, parentData);\n        }\n        else {\n            newNodeData = extend({}, this.refreshData, newData[0]);\n        }\n        if (isNOU(liEle)) {\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n            return;\n        }\n        this.isRefreshed = true;\n        var level = parseFloat(liEle.getAttribute('aria-level'));\n        var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n        var ul = select('.' + PARENTITEM, liEle);\n        var childItems = getValue(this.fields.child.toString(), newNodeData);\n        if ((isRefreshChild && ul) || (isRefreshChild && !isNOU(childItems))) {\n            var parentEle = liEle.parentElement;\n            var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);\n            remove(liEle);\n            parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n            if (isRefreshChild && ul) {\n                this.expandAll([id]);\n            }\n        }\n        else {\n            var txtEle = select('.' + TEXTWRAP, liEle);\n            var newTextEle = select('.' + TEXTWRAP, newliEle[0]);\n            var icon = select('div.' + ICON, txtEle);\n            var newIcon = select('div.' + ICON, newTextEle);\n            if (icon && newIcon) {\n                if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n                    removeClass([newIcon], EXPANDABLE);\n                    addClass([newIcon], COLLAPSIBLE);\n                }\n                else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n                    removeClass([newIcon], COLLAPSIBLE);\n                    addClass([newIcon], EXPANDABLE);\n                }\n                else if (icon.classList.contains('interaction')) {\n                    addClass([newIcon], 'interaction');\n                }\n            }\n            remove(txtEle);\n            var fullEle = select('.' + FULLROW, liEle);\n            fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n        }\n        liEle = this.getElement(target);\n        if (newNodeData[this.fields.tooltip]) {\n            liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\n        }\n        if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n            var attr = {};\n            merge(attr, newNodeData[this.fields.htmlAttributes]);\n            if (attr.class) {\n                addClass([liEle], attr.class.split(' '));\n                delete attr.class;\n            }\n            else {\n                attributes(liEle, attr);\n            }\n        }\n        if (this.selectedNodes.indexOf(id) !== -1) {\n            liEle.setAttribute('aria-selected', 'true');\n            addClass([liEle], ACTIVE);\n        }\n        this.isRefreshed = false;\n        this.triggerEvent();\n    };\n    /**\n     * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    TreeView.prototype.removeNodes = function (nodes) {\n        if (!isNOU(nodes)) {\n            if (this.fields.dataSource instanceof DataManager && !this.isOffline && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n                this.crudOperation('delete', nodes);\n            }\n            else {\n                this.deleteSuccess(nodes);\n            }\n        }\n    };\n    /**\n     * Replaces the text of the TreeView node with the given text.\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  {string} newText - Specifies the new text of TreeView node.\n     */\n    TreeView.prototype.updateNode = function (target, newText) {\n        var _this = this;\n        if (isNOU(target) || isNOU(newText) || !this.allowEditing) {\n            return;\n        }\n        var liEle = this.getElement(target);\n        if (isNOU(liEle)) {\n            return;\n        }\n        var txtEle = select('.' + LISTTEXT, liEle);\n        this.updateOldText(liEle);\n        var eventArgs = this.getEditEvent(liEle, null, null);\n        this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                if (_this.fields.dataSource instanceof DataManager && !_this.isOffline && (_this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n                    _this.crudOperation('update', null, target, newText, null, null, false);\n                }\n                else {\n                    _this.appendNewText(liEle, txtEle, newText, false);\n                }\n            }\n        });\n    };\n    /**\n     * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\n     * as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    TreeView.prototype.uncheckAll = function (nodes) {\n        if (this.showCheckBox) {\n            this.doCheckBoxAction(nodes, false);\n        }\n    };\n    var TreeView_1;\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowDragAndDrop\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowEditing\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowMultiSelection\", void 0);\n    __decorate([\n        Complex({}, NodeAnimationSettings)\n    ], TreeView.prototype, \"animation\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"checkedNodes\", void 0);\n    __decorate([\n        Property('')\n    ], TreeView.prototype, \"cssClass\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"disabled\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeView.prototype, \"dragArea\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"enablePersistence\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"expandedNodes\", void 0);\n    __decorate([\n        Property('Auto')\n    ], TreeView.prototype, \"expandOn\", void 0);\n    __decorate([\n        Complex({}, FieldsSettings)\n    ], TreeView.prototype, \"fields\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeView.prototype, \"fullRowSelect\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeView.prototype, \"loadOnDemand\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"locale\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"nodeTemplate\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"selectedNodes\", void 0);\n    __decorate([\n        Property('None')\n    ], TreeView.prototype, \"sortOrder\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"showCheckBox\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeView.prototype, \"autoCheck\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"fullRowNavigable\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"actionFailure\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"created\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"dataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"dataSourceChanged\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"drawNode\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"destroyed\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"keyPress\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeChecked\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeChecking\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeClicked\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeCollapsed\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeCollapsing\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDragging\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDragStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDragStop\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDropped\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeEdited\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeEditing\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeExpanded\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeExpanding\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeSelected\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeSelecting\", void 0);\n    TreeView = TreeView_1 = __decorate([\n        NotifyPropertyChanges\n    ], TreeView);\n    return TreeView;\n}(Component));\nexport { TreeView };\n"]},"metadata":{},"sourceType":"module"}